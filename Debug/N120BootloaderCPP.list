
N120BootloaderCPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc18  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800cee8  0800cee8  0000dee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cfcc  0800cfcc  0000dfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cfd4  0800cfd4  0000dfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cfd8  0800cfd8  0000dfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000015c  24000000  0800cfdc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e98  2400015c  0800d138  0000e15c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001ff4  0800d138  0000eff4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e15c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ef9c  00000000  00000000  0000e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004257  00000000  00000000  0002d126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018e0  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ff  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000376c5  00000000  00000000  00033f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f76a  00000000  00000000  0006b624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154636  00000000  00000000  0008ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001df3c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006e70  00000000  00000000  001df408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001e6278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400015c 	.word	0x2400015c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ced0 	.word	0x0800ced0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000160 	.word	0x24000160
 800030c:	0800ced0 	.word	0x0800ced0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <uint32_to_str>:
uint16_t RGB565(uint8_t r, uint8_t g, uint8_t b);
uint8_t ReadFlashID(void);
void OctoSPI_SendCommand(uint8_t instruction, uint8_t *data, uint16_t dataSize);
void EnableQuadSPI();

char *uint32_to_str(uint32_t value) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
    char *buffer = (char *)malloc(11 * sizeof(char));
 80003c8:	200b      	movs	r0, #11
 80003ca:	f00c f8c5 	bl	800c558 <malloc>
 80003ce:	4603      	mov	r3, r0
 80003d0:	60fb      	str	r3, [r7, #12]
    if (buffer == NULL) return NULL;
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d101      	bne.n	80003dc <uint32_to_str+0x1c>
 80003d8:	2300      	movs	r3, #0
 80003da:	e006      	b.n	80003ea <uint32_to_str+0x2a>

    snprintf(buffer, 11, "%lu", value);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <uint32_to_str+0x34>)
 80003e0:	210b      	movs	r1, #11
 80003e2:	68f8      	ldr	r0, [r7, #12]
 80003e4:	f00c f96e 	bl	800c6c4 <sniprintf>
    return buffer;
 80003e8:	68fb      	ldr	r3, [r7, #12]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	0800cee8 	.word	0x0800cee8

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	@ 0x28
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fe:	f001 f8f5 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000402:	f000 f873 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000406:	f000 fa8d 	bl	8000924 <MX_GPIO_Init>
  MX_TIM3_Init();
 800040a:	f000 f9b5 	bl	8000778 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800040e:	f00b fb67 	bl	800bae0 <MX_USB_DEVICE_Init>
  MX_FMC_Init();
 8000412:	f000 fa23 	bl	800085c <MX_FMC_Init>
  MX_TIM2_Init();
 8000416:	f000 f961 	bl	80006dc <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 800041a:	f000 f8ff 	bl	800061c <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800041e:	2100      	movs	r1, #0
 8000420:	4831      	ldr	r0, [pc, #196]	@ (80004e8 <main+0xf0>)
 8000422:	f006 fd9f 	bl	8006f64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000426:	2104      	movs	r1, #4
 8000428:	482f      	ldr	r0, [pc, #188]	@ (80004e8 <main+0xf0>)
 800042a:	f006 fd9b 	bl	8006f64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800042e:	2108      	movs	r1, #8
 8000430:	482d      	ldr	r0, [pc, #180]	@ (80004e8 <main+0xf0>)
 8000432:	f006 fd97 	bl	8006f64 <HAL_TIM_PWM_Start>
  HAL_Delay(250);

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
  HAL_Delay(10000);
  sendMessage(uint32_to_str_dynamic(panelIdentifier()));*/
  EnableQuadSPI();
 8000436:	f000 fc5f 	bl	8000cf8 <EnableQuadSPI>

  setLedColor((Color){0, 255, 0});
 800043a:	2300      	movs	r3, #0
 800043c:	843b      	strh	r3, [r7, #32]
 800043e:	23ff      	movs	r3, #255	@ 0xff
 8000440:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000442:	2300      	movs	r3, #0
 8000444:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000446:	f107 0320 	add.w	r3, r7, #32
 800044a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800044e:	f000 fb33 	bl	8000ab8 <setLedColor>
  HAL_Delay(250);
 8000452:	20fa      	movs	r0, #250	@ 0xfa
 8000454:	f001 f95c 	bl	8001710 <HAL_Delay>
  setLedColor((Color){0, 0, 0});
 8000458:	2300      	movs	r3, #0
 800045a:	833b      	strh	r3, [r7, #24]
 800045c:	2300      	movs	r3, #0
 800045e:	837b      	strh	r3, [r7, #26]
 8000460:	2300      	movs	r3, #0
 8000462:	83bb      	strh	r3, [r7, #28]
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	e893 0003 	ldmia.w	r3, {r0, r1}
 800046c:	f000 fb24 	bl	8000ab8 <setLedColor>
  HAL_Delay(250);
 8000470:	20fa      	movs	r0, #250	@ 0xfa
 8000472:	f001 f94d 	bl	8001710 <HAL_Delay>
  setLedColor((Color){0, 255, 0});
 8000476:	2300      	movs	r3, #0
 8000478:	823b      	strh	r3, [r7, #16]
 800047a:	23ff      	movs	r3, #255	@ 0xff
 800047c:	827b      	strh	r3, [r7, #18]
 800047e:	2300      	movs	r3, #0
 8000480:	82bb      	strh	r3, [r7, #20]
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	e893 0003 	ldmia.w	r3, {r0, r1}
 800048a:	f000 fb15 	bl	8000ab8 <setLedColor>
  HAL_Delay(250);
 800048e:	20fa      	movs	r0, #250	@ 0xfa
 8000490:	f001 f93e 	bl	8001710 <HAL_Delay>
  setLedColor((Color){0, 0, 0});
 8000494:	2300      	movs	r3, #0
 8000496:	813b      	strh	r3, [r7, #8]
 8000498:	2300      	movs	r3, #0
 800049a:	817b      	strh	r3, [r7, #10]
 800049c:	2300      	movs	r3, #0
 800049e:	81bb      	strh	r3, [r7, #12]
 80004a0:	f107 0308 	add.w	r3, r7, #8
 80004a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004a8:	f000 fb06 	bl	8000ab8 <setLedColor>
  HAL_Delay(250);
 80004ac:	20fa      	movs	r0, #250	@ 0xfa
 80004ae:	f001 f92f 	bl	8001710 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //LCD_Init();
  //LCD_SetBrightness(1);
  //int b = 0;
  Color color = {255, 0, 0};
 80004b2:	23ff      	movs	r3, #255	@ 0xff
 80004b4:	803b      	strh	r3, [r7, #0]
 80004b6:	2300      	movs	r3, #0
 80004b8:	807b      	strh	r3, [r7, #2]
 80004ba:	2300      	movs	r3, #0
 80004bc:	80bb      	strh	r3, [r7, #4]
  setLedColor(color);
 80004be:	463b      	mov	r3, r7
 80004c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004c4:	f000 faf8 	bl	8000ab8 <setLedColor>
  while (1)
  {
	HAL_Delay(1000);
 80004c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004cc:	f001 f920 	bl	8001710 <HAL_Delay>
	sendMessage(uint32_to_str(ReadFlashID()));
 80004d0:	f000 fbfc 	bl	8000ccc <ReadFlashID>
 80004d4:	4603      	mov	r3, r0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff72 	bl	80003c0 <uint32_to_str>
 80004dc:	4603      	mov	r3, r0
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fb82 	bl	8000be8 <sendMessage>
	HAL_Delay(1000);
 80004e4:	bf00      	nop
 80004e6:	e7ef      	b.n	80004c8 <main+0xd0>
 80004e8:	24000220 	.word	0x24000220

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b0a4      	sub	sp, #144	@ 0x90
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80004f6:	224c      	movs	r2, #76	@ 0x4c
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f00c f916 	bl	800c72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000504:	2220      	movs	r2, #32
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f00c f90f 	bl	800c72c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]
 800051e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000520:	2004      	movs	r0, #4
 8000522:	f004 f86d 	bl	8004600 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b3a      	ldr	r3, [pc, #232]	@ (8000614 <SystemClock_Config+0x128>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a39      	ldr	r2, [pc, #228]	@ (8000614 <SystemClock_Config+0x128>)
 8000530:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b37      	ldr	r3, [pc, #220]	@ (8000614 <SystemClock_Config+0x128>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000542:	bf00      	nop
 8000544:	4b33      	ldr	r3, [pc, #204]	@ (8000614 <SystemClock_Config+0x128>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800054c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000550:	d1f8      	bne.n	8000544 <SystemClock_Config+0x58>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000552:	f004 f845 	bl	80045e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000556:	4b30      	ldr	r3, [pc, #192]	@ (8000618 <SystemClock_Config+0x12c>)
 8000558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800055a:	4a2f      	ldr	r2, [pc, #188]	@ (8000618 <SystemClock_Config+0x12c>)
 800055c:	f023 0318 	bic.w	r3, r3, #24
 8000560:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000562:	2326      	movs	r3, #38	@ 0x26
 8000564:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800056a:	2301      	movs	r3, #1
 800056c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800056e:	2340      	movs	r3, #64	@ 0x40
 8000570:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000576:	2300      	movs	r3, #0
 8000578:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f8a8 	bl	80046d4 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800058a:	f000 fbfd 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	233f      	movs	r3, #63	@ 0x3f
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000592:	2300      	movs	r3, #0
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800059e:	2340      	movs	r3, #64	@ 0x40
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005a2:	2340      	movs	r3, #64	@ 0x40
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005ac:	2340      	movs	r3, #64	@ 0x40
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 fc66 	bl	8004e88 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005c2:	f000 fbe1 	bl	8000d88 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <SystemClock_Config+0x12c>)
 80005c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80005cc:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <SystemClock_Config+0x12c>)
 80005ce:	f043 0302 	orr.w	r3, r3, #2
 80005d2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <SystemClock_Config+0x12c>)
 80005d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80005dc:	f003 0302 	and.w	r3, r3, #2
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80005e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80005f2:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80005f8:	2322      	movs	r3, #34	@ 0x22
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80005fc:	2320      	movs	r3, #32
 80005fe:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4618      	mov	r0, r3
 8000606:	f006 f93f 	bl	8006888 <HAL_RCCEx_CRSConfig>
}
 800060a:	bf00      	nop
 800060c:	3790      	adds	r7, #144	@ 0x90
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	58024800 	.word	0x58024800
 8000618:	58024400 	.word	0x58024400

0800061c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000632:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000634:	4a28      	ldr	r2, [pc, #160]	@ (80006d8 <MX_OCTOSPI1_Init+0xbc>)
 8000636:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000638:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 800063a:	2204      	movs	r2, #4
 800063c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX_RAM;
 8000644:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000646:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 800064a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 800064e:	2217      	movs	r2, #23
 8000650:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000652:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000654:	2202      	movs	r2, #2
 8000656:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 800066c:	2204      	movs	r2, #4
 800066e:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 800067e:	2200      	movs	r2, #0
 8000680:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000684:	2208      	movs	r2, #8
 8000686:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 800068a:	2200      	movs	r2, #0
 800068c:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000690:	2200      	movs	r2, #0
 8000692:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000694:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 8000696:	f001 fb3d 	bl	8001d14 <HAL_OSPI_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80006a0:	f000 fb72 	bl	8000d88 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80006ac:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80006b0:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <MX_OCTOSPI1_Init+0xb8>)
 80006bc:	f001 fd98 	bl	80021f0 <HAL_OSPIM_Config>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80006c6:	f000 fb5f 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	24000178 	.word	0x24000178
 80006d8:	52005000 	.word	0x52005000

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <MX_TIM2_Init+0x98>)
 80006fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_TIM2_Init+0x98>)
 8000704:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_TIM2_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_TIM2_Init+0x98>)
 8000712:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_TIM2_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_TIM2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000724:	4813      	ldr	r0, [pc, #76]	@ (8000774 <MX_TIM2_Init+0x98>)
 8000726:	f006 fab9 	bl	8006c9c <HAL_TIM_Base_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 fb2a 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	480c      	ldr	r0, [pc, #48]	@ (8000774 <MX_TIM2_Init+0x98>)
 8000742:	f006 ff47 	bl	80075d4 <HAL_TIM_ConfigClockSource>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800074c:	f000 fb1c 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_TIM2_Init+0x98>)
 800075e:	f007 fc9f 	bl	80080a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000768:	f000 fb0e 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	240001d4 	.word	0x240001d4

08000778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <MX_TIM3_Init+0xdc>)
 800079e:	4a2e      	ldr	r2, [pc, #184]	@ (8000858 <MX_TIM3_Init+0xe0>)
 80007a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80007a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <MX_TIM3_Init+0xdc>)
 80007a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <MX_TIM3_Init+0xdc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007b0:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <MX_TIM3_Init+0xdc>)
 80007b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <MX_TIM3_Init+0xdc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <MX_TIM3_Init+0xdc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c4:	4823      	ldr	r0, [pc, #140]	@ (8000854 <MX_TIM3_Init+0xdc>)
 80007c6:	f006 fb76 	bl	8006eb6 <HAL_TIM_PWM_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 fada 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	481c      	ldr	r0, [pc, #112]	@ (8000854 <MX_TIM3_Init+0xdc>)
 80007e4:	f007 fc5c 	bl	80080a0 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80007ee:	f000 facb 	bl	8000d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f2:	2360      	movs	r3, #96	@ 0x60
 80007f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	4812      	ldr	r0, [pc, #72]	@ (8000854 <MX_TIM3_Init+0xdc>)
 800080a:	f006 fdcf 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000814:	f000 fab8 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	2204      	movs	r2, #4
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_TIM3_Init+0xdc>)
 8000820:	f006 fdc4 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800082a:	f000 faad 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	2208      	movs	r2, #8
 8000832:	4619      	mov	r1, r3
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <MX_TIM3_Init+0xdc>)
 8000836:	f006 fdb9 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8000840:	f000 faa2 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000844:	4803      	ldr	r0, [pc, #12]	@ (8000854 <MX_TIM3_Init+0xdc>)
 8000846:	f000 fc37 	bl	80010b8 <HAL_TIM_MspPostInit>

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	24000220 	.word	0x24000220
 8000858:	40000400 	.word	0x40000400

0800085c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_FMC_Init+0xbc>)
 8000876:	4a29      	ldr	r2, [pc, #164]	@ (800091c <MX_FMC_Init+0xc0>)
 8000878:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800087a:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <MX_FMC_Init+0xbc>)
 800087c:	4a28      	ldr	r2, [pc, #160]	@ (8000920 <MX_FMC_Init+0xc4>)
 800087e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_FMC_Init+0xbc>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000886:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <MX_FMC_Init+0xbc>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_FMC_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_FMC_Init+0xbc>)
 8000894:	2210      	movs	r2, #16
 8000896:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_FMC_Init+0xbc>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800089e:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_FMC_Init+0xbc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80008dc:	230f      	movs	r3, #15
 80008de:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80008e0:	230f      	movs	r3, #15
 80008e2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80008e4:	23ff      	movs	r3, #255	@ 0xff
 80008e6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80008e8:	230f      	movs	r3, #15
 80008ea:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80008ec:	2310      	movs	r3, #16
 80008ee:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80008f0:	2311      	movs	r3, #17
 80008f2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <MX_FMC_Init+0xbc>)
 8000900:	f006 f97c 	bl	8006bfc <HAL_SRAM_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 800090a:	f000 fa3d 	bl	8000d88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2400026c 	.word	0x2400026c
 800091c:	52004000 	.word	0x52004000
 8000920:	52004104 	.word	0x52004104

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	@ 0x30
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093a:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000940:	4a58      	ldr	r2, [pc, #352]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094a:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	4b52      	ldr	r3, [pc, #328]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	4a51      	ldr	r2, [pc, #324]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000968:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	4a49      	ldr	r2, [pc, #292]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 800097e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000986:	4b47      	ldr	r3, [pc, #284]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b43      	ldr	r3, [pc, #268]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099a:	4a42      	ldr	r2, [pc, #264]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a4:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	4a3a      	ldr	r2, [pc, #232]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c2:	4b38      	ldr	r3, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d0:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	4a33      	ldr	r2, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e0:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x180>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <MX_GPIO_Init+0x184>)
 80009f4:	f001 f974 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KBD_COL_1_Pin|KBD_COL_4_Pin|KBD_COL_5_Pin|KBD_COL_6_Pin
 80009f8:	2200      	movs	r2, #0
 80009fa:	f640 2172 	movw	r1, #2674	@ 0xa72
 80009fe:	482b      	ldr	r0, [pc, #172]	@ (8000aac <MX_GPIO_Init+0x188>)
 8000a00:	f001 f96e 	bl	8001ce0 <HAL_GPIO_WritePin>
                          |KBD_COL_2_Pin|KBD_COL_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2108      	movs	r1, #8
 8000a08:	4829      	ldr	r0, [pc, #164]	@ (8000ab0 <MX_GPIO_Init+0x18c>)
 8000a0a:	f001 f969 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4820      	ldr	r0, [pc, #128]	@ (8000aa8 <MX_GPIO_Init+0x184>)
 8000a26:	f000 ffb3 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_COL_1_Pin KBD_COL_4_Pin KBD_COL_5_Pin */
  GPIO_InitStruct.Pin = KBD_COL_1_Pin|KBD_COL_4_Pin|KBD_COL_5_Pin;
 8000a2a:	2332      	movs	r3, #50	@ 0x32
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481a      	ldr	r0, [pc, #104]	@ (8000aac <MX_GPIO_Init+0x188>)
 8000a42:	f000 ffa5 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_ROW_B_Pin KBD_ROW_A_Pin KBD_ROW_C_Pin KBD_ROW_D_Pin
                           KBD_ROW_E_Pin KBD_ROW_F_Pin KBD_ROW_G_Pin KBD_ROW_H_Pin
                           KBD_ROW_I_Pin */
  GPIO_InitStruct.Pin = KBD_ROW_B_Pin|KBD_ROW_A_Pin|KBD_ROW_C_Pin|KBD_ROW_D_Pin
 8000a46:	f248 53cf 	movw	r3, #34255	@ 0x85cf
 8000a4a:	61fb      	str	r3, [r7, #28]
                          |KBD_ROW_E_Pin|KBD_ROW_F_Pin|KBD_ROW_G_Pin|KBD_ROW_H_Pin
                          |KBD_ROW_I_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a50:	2302      	movs	r3, #2
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <MX_GPIO_Init+0x190>)
 8000a5c:	f000 ff98 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : KBD_COL_6_Pin KBD_COL_2_Pin KBD_COL_3_Pin */
  GPIO_InitStruct.Pin = KBD_COL_6_Pin|KBD_COL_2_Pin|KBD_COL_3_Pin;
 8000a60:	f44f 6324 	mov.w	r3, #2624	@ 0xa40
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <MX_GPIO_Init+0x188>)
 8000a7a:	f000 ff89 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <MX_GPIO_Init+0x18c>)
 8000a96:	f000 ff7b 	bl	8001990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	58021000 	.word	0x58021000
 8000aac:	58020800 	.word	0x58020800
 8000ab0:	58020c00 	.word	0x58020c00
 8000ab4:	58020000 	.word	0x58020000

08000ab8 <setLedColor>:

/* USER CODE BEGIN 4 */
void setLedColor(Color c) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	463b      	mov	r3, r7
 8000ac0:	e883 0003 	stmia.w	r3, {r0, r1}
  color = c;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <setLedColor+0x8c>)
 8000ac6:	463a      	mov	r2, r7
 8000ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000acc:	6018      	str	r0, [r3, #0]
 8000ace:	3304      	adds	r3, #4
 8000ad0:	8019      	strh	r1, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, color.Red*1000/255);
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <setLedColor+0x8c>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a19      	ldr	r2, [pc, #100]	@ (8000b48 <setLedColor+0x90>)
 8000ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae6:	441a      	add	r2, r3
 8000ae8:	11d2      	asrs	r2, r2, #7
 8000aea:	17db      	asrs	r3, r3, #31
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <setLedColor+0x94>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, color.Green*1000/255);
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <setLedColor+0x8c>)
 8000af6:	885b      	ldrh	r3, [r3, #2]
 8000af8:	461a      	mov	r2, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	4a11      	ldr	r2, [pc, #68]	@ (8000b48 <setLedColor+0x90>)
 8000b04:	fb82 1203 	smull	r1, r2, r2, r3
 8000b08:	441a      	add	r2, r3
 8000b0a:	11d2      	asrs	r2, r2, #7
 8000b0c:	17db      	asrs	r3, r3, #31
 8000b0e:	1ad2      	subs	r2, r2, r3
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <setLedColor+0x94>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, color.Blue*1000/255);
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <setLedColor+0x8c>)
 8000b18:	889b      	ldrh	r3, [r3, #4]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b20:	fb02 f303 	mul.w	r3, r2, r3
 8000b24:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <setLedColor+0x90>)
 8000b26:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2a:	441a      	add	r2, r3
 8000b2c:	11d2      	asrs	r2, r2, #7
 8000b2e:	17db      	asrs	r3, r3, #31
 8000b30:	1ad2      	subs	r2, r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <setLedColor+0x94>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	24000000 	.word	0x24000000
 8000b48:	80808081 	.word	0x80808081
 8000b4c:	24000220 	.word	0x24000220

08000b50 <setTimeout>:
  uint8_t id3 = *DataAddress;

  return (id1 << 16) | (id2 << 8) | id3;
}

void setTimeout(void (*callback)(), uint32_t delay_ms) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
    timeoutCallback = callback;  // Stocke la fonction callback
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <setTimeout+0x38>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_AUTORELOAD(&htim2, delay_ms - 1);  // Définit la durée
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <setTimeout+0x3c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	3a01      	subs	r2, #1
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <setTimeout+0x3c>)
 8000b70:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Réinitialise le compteur
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <setTimeout+0x3c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(&htim2);  // Démarre le Timer avec interruption
 8000b7a:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <setTimeout+0x3c>)
 8000b7c:	f006 f8e6 	bl	8006d4c <HAL_TIM_Base_Start_IT>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	240002b8 	.word	0x240002b8
 8000b8c:	240001d4 	.word	0x240001d4

08000b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {  // Vérifie si c'est bien TIM2
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d109      	bne.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x24>
        HAL_TIM_Base_Stop_IT(&htim2);  // Stoppe le Timer
 8000ba0:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ba2:	f006 f959 	bl	8006e58 <HAL_TIM_Base_Stop_IT>
        if (timeoutCallback) timeoutCallback();  // Exécute la fonction
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x24>
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4798      	blx	r3
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	240001d4 	.word	0x240001d4
 8000bc0:	240002b8 	.word	0x240002b8

08000bc4 <resetLed>:

void resetLed() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  setLedColor((Color){0, 0, 0});
 8000bca:	2300      	movs	r3, #0
 8000bcc:	803b      	strh	r3, [r7, #0]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	807b      	strh	r3, [r7, #2]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bdc:	f7ff ff6c 	bl	8000ab8 <setLedColor>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <sendMessage>:

void sendMessage(char *message) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint16_t len = strlen(message);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fb8d 	bl	8000310 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_HS((uint8_t *)message, len);
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f00b f82e 	bl	800bc60 <CDC_Transmit_HS>
  timeoutCallback = NULL;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <sendMessage+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
  setLedColor((Color){255, 255, 0});
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <sendMessage+0x54>)
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c14:	6018      	str	r0, [r3, #0]
 8000c16:	3304      	adds	r3, #4
 8000c18:	8019      	strh	r1, [r3, #0]
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c22:	f7ff ff49 	bl	8000ab8 <setLedColor>
  setTimeout(resetLed, 300);
 8000c26:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <sendMessage+0x58>)
 8000c2c:	f7ff ff90 	bl	8000b50 <setTimeout>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	240002b8 	.word	0x240002b8
 8000c3c:	0800cef0 	.word	0x0800cef0
 8000c40:	08000bc5 	.word	0x08000bc5

08000c44 <OctoSPI_SendCommand>:
	//HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, 1);
	HAL_Delay(0.01);
  }
}

void OctoSPI_SendCommand(uint8_t instruction, uint8_t *data, uint16_t dataSize) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b096      	sub	sp, #88	@ 0x58
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80bb      	strh	r3, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2250      	movs	r2, #80	@ 0x50
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00b fd65 	bl	800c72c <memset>

    sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
    sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
    sCommand.Instruction        = instruction;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE; // 1 ligne pour l'instruction
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
    sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;       // Pas d'adresse pour lire l'ID
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;        // 1 ligne pour les données
 8000c7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c7e:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.NbData             = dataSize;                    // Nombre de bytes à recevoir
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DummyCycles        = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	657b      	str	r3, [r7, #84]	@ 0x54

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_MAX_DELAY) != HAL_OK) {
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <OctoSPI_SendCommand+0x84>)
 8000c9c:	f001 f8f6 	bl	8001e8c <HAL_OSPI_Command>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <OctoSPI_SendCommand+0x66>
        Error_Handler();
 8000ca6:	f000 f86f 	bl	8000d88 <Error_Handler>
    }

    if (HAL_OSPI_Receive(&hospi1, data, HAL_MAX_DELAY) != HAL_OK) {
 8000caa:	f04f 32ff 	mov.w	r2, #4294967295
 8000cae:	6839      	ldr	r1, [r7, #0]
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <OctoSPI_SendCommand+0x84>)
 8000cb2:	f001 f9eb 	bl	800208c <HAL_OSPI_Receive>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <OctoSPI_SendCommand+0x7c>
    	Error_Handler();
 8000cbc:	f000 f864 	bl	8000d88 <Error_Handler>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	3758      	adds	r7, #88	@ 0x58
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24000178 	.word	0x24000178

08000ccc <ReadFlashID>:

uint8_t ReadFlashID(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t id[3] = {0};
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <ReadFlashID+0x28>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	80bb      	strh	r3, [r7, #4]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71bb      	strb	r3, [r7, #6]
	OctoSPI_SendCommand(CMD_RDID, id, 3); // 0x9F = Commande Read ID
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2203      	movs	r2, #3
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	209f      	movs	r0, #159	@ 0x9f
 8000ce4:	f7ff ffae 	bl	8000c44 <OctoSPI_SendCommand>
	return id[0];
 8000ce8:	793b      	ldrb	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800cf28 	.word	0x0800cf28

08000cf8 <EnableQuadSPI>:

void EnableQuadSPI()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	@ 0x58
 8000cfc:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef sCommand;
    uint8_t reg;

    // Lire le registre de statut
    memset(&sCommand, 0, sizeof(sCommand));
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	2250      	movs	r2, #80	@ 0x50
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00b fd10 	bl	800c72c <memset>
    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
    sCommand.FlashId = HAL_OSPI_FLASH_ID_1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
    sCommand.Instruction = 0x05; // Read Status Register
 8000d14:	2305      	movs	r3, #5
 8000d16:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
    sCommand.DataMode = HAL_OSPI_DATA_1_LINE;
 8000d1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d20:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.NbData = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	647b      	str	r3, [r7, #68]	@ 0x44

    HAL_OSPI_Command(&hospi1, &sCommand, HAL_MAX_DELAY);
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4813      	ldr	r0, [pc, #76]	@ (8000d80 <EnableQuadSPI+0x88>)
 8000d32:	f001 f8ab 	bl	8001e8c <HAL_OSPI_Command>
    HAL_OSPI_Receive(&hospi1, &reg, HAL_MAX_DELAY);
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4810      	ldr	r0, [pc, #64]	@ (8000d80 <EnableQuadSPI+0x88>)
 8000d40:	f001 f9a4 	bl	800208c <HAL_OSPI_Receive>

    // Activer Quad Enable Bit (QE = bit 6)
    reg |= (1 << 6);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	71fb      	strb	r3, [r7, #7]

    // Écrire le registre de statut
    sCommand.Instruction = 0x01; // Write Status Register
 8000d4e:	2301      	movs	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
    HAL_OSPI_Command(&hospi1, &sCommand, HAL_MAX_DELAY);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4808      	ldr	r0, [pc, #32]	@ (8000d80 <EnableQuadSPI+0x88>)
 8000d5e:	f001 f895 	bl	8001e8c <HAL_OSPI_Command>
    HAL_OSPI_Transmit(&hospi1, &reg, HAL_MAX_DELAY);
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <EnableQuadSPI+0x88>)
 8000d6c:	f001 f91b 	bl	8001fa6 <HAL_OSPI_Transmit>

    sendMessage("Quad SPI activé !\n");
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <EnableQuadSPI+0x8c>)
 8000d72:	f7ff ff39 	bl	8000be8 <sendMessage>
}
 8000d76:	bf00      	nop
 8000d78:	3758      	adds	r7, #88	@ 0x58
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000178 	.word	0x24000178
 8000d84:	0800cf2c 	.word	0x0800cf2c

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8e:	b672      	cpsid	i
}
 8000d90:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  //Color color = {255, 0, 0};
  //setLedColor(color);
  while(1) {
	for (int i=0; i<255; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	e010      	b.n	8000dba <Error_Handler+0x32>
	  color.Red -= 1;
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <Error_Handler+0x68>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <Error_Handler+0x68>)
 8000da2:	801a      	strh	r2, [r3, #0]
	  setLedColor(color);
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <Error_Handler+0x68>)
 8000da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000daa:	f7ff fe85 	bl	8000ab8 <setLedColor>
	  HAL_Delay(2);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f000 fcae 	bl	8001710 <HAL_Delay>
	for (int i=0; i<255; i++) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dbe:	ddeb      	ble.n	8000d98 <Error_Handler+0x10>
	}
	for (int i=0; i<255; i++) {
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	e010      	b.n	8000de8 <Error_Handler+0x60>
	  color.Red += 1;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <Error_Handler+0x68>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <Error_Handler+0x68>)
 8000dd0:	801a      	strh	r2, [r3, #0]
	  setLedColor(color);
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <Error_Handler+0x68>)
 8000dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dd8:	f7ff fe6e 	bl	8000ab8 <setLedColor>
	  HAL_Delay(2);
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f000 fc97 	bl	8001710 <HAL_Delay>
	for (int i=0; i<255; i++) {
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dec:	ddeb      	ble.n	8000dc6 <Error_Handler+0x3e>
	for (int i=0; i<255; i++) {
 8000dee:	e7d0      	b.n	8000d92 <Error_Handler+0xa>
 8000df0:	24000000 	.word	0x24000000

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_MspInit+0x30>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e00:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_MspInit+0x30>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	58024400 	.word	0x58024400

08000e28 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0bc      	sub	sp, #240	@ 0xf0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	22b8      	movs	r2, #184	@ 0xb8
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f00b fc6f 	bl	800c72c <memset>
  if(hospi->Instance==OCTOSPI1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a6f      	ldr	r2, [pc, #444]	@ (8001010 <HAL_OSPI_MspInit+0x1e8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	f040 80d6 	bne.w	8001006 <HAL_OSPI_MspInit+0x1de>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000e5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 fb6a 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000e7a:	f7ff ff85 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000e7e:	4b65      	ldr	r3, [pc, #404]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000e80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e84:	4a63      	ldr	r2, [pc, #396]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e8e:	4b61      	ldr	r3, [pc, #388]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000e90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000e9c:	4b5d      	ldr	r3, [pc, #372]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000e9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000eac:	4b59      	ldr	r3, [pc, #356]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000eae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eba:	4b56      	ldr	r3, [pc, #344]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	4a54      	ldr	r2, [pc, #336]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eca:	4b52      	ldr	r3, [pc, #328]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	4a4d      	ldr	r2, [pc, #308]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b47      	ldr	r3, [pc, #284]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a45      	ldr	r2, [pc, #276]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	4b3f      	ldr	r3, [pc, #252]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b3b      	ldr	r3, [pc, #236]	@ (8001014 <HAL_OSPI_MspInit+0x1ec>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> OCTOSPIM_P1_CLK
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f32:	2304      	movs	r3, #4
 8000f34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f4a:	2309      	movs	r3, #9
 8000f4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f50:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f54:	4619      	mov	r1, r3
 8000f56:	4830      	ldr	r0, [pc, #192]	@ (8001018 <HAL_OSPI_MspInit+0x1f0>)
 8000f58:	f000 fd1a 	bl	8001990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f74:	2309      	movs	r3, #9
 8000f76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4826      	ldr	r0, [pc, #152]	@ (800101c <HAL_OSPI_MspInit+0x1f4>)
 8000f82:	f000 fd05 	bl	8001990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f86:	2304      	movs	r3, #4
 8000f88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f9e:	2309      	movs	r3, #9
 8000fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481d      	ldr	r0, [pc, #116]	@ (8001020 <HAL_OSPI_MspInit+0x1f8>)
 8000fac:	f000 fcf0 	bl	8001990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fb0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000fca:	2309      	movs	r3, #9
 8000fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4813      	ldr	r0, [pc, #76]	@ (8001024 <HAL_OSPI_MspInit+0x1fc>)
 8000fd8:	f000 fcda 	bl	8001990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fdc:	2340      	movs	r3, #64	@ 0x40
 8000fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	@ (8001020 <HAL_OSPI_MspInit+0x1f8>)
 8001002:	f000 fcc5 	bl	8001990 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8001006:	bf00      	nop
 8001008:	37f0      	adds	r7, #240	@ 0xf0
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	52005000 	.word	0x52005000
 8001014:	58024400 	.word	0x58024400
 8001018:	58021000 	.word	0x58021000
 800101c:	58020800 	.word	0x58020800
 8001020:	58020400 	.word	0x58020400
 8001024:	58020c00 	.word	0x58020c00

08001028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001038:	d116      	bne.n	8001068 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <HAL_TIM_Base_MspInit+0x48>)
 800103c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001040:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <HAL_TIM_Base_MspInit+0x48>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_Base_MspInit+0x48>)
 800104c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	201c      	movs	r0, #28
 800105e:	f000 fc62 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001062:	201c      	movs	r0, #28
 8001064:	f000 fc79 	bl	800195a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10e      	bne.n	80010a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <HAL_TIM_PWM_MspInit+0x40>)
 8001088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800108c:	4a09      	ldr	r2, [pc, #36]	@ (80010b4 <HAL_TIM_PWM_MspInit+0x40>)
 800108e:	f043 0302 	orr.w	r3, r3, #2
 8001092:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <HAL_TIM_PWM_MspInit+0x40>)
 8001098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40000400 	.word	0x40000400
 80010b4:	58024400 	.word	0x58024400

080010b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a22      	ldr	r2, [pc, #136]	@ (8001160 <HAL_TIM_MspPostInit+0xa8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d13e      	bne.n	8001158 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <HAL_TIM_MspPostInit+0xac>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <HAL_TIM_MspPostInit+0xac>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <HAL_TIM_MspPostInit+0xac>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <HAL_TIM_MspPostInit+0xac>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <HAL_TIM_MspPostInit+0xac>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_TIM_MspPostInit+0xac>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PB4(NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Led_Blue_Pin;
 8001116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001128:	2302      	movs	r3, #2
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Led_Blue_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <HAL_TIM_MspPostInit+0xb0>)
 8001134:	f000 fc2c 	bl	8001990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Led_Red_Pin|Led_Green_Pin;
 8001138:	2330      	movs	r3, #48	@ 0x30
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001148:	2302      	movs	r3, #2
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	@ (800116c <HAL_TIM_MspPostInit+0xb4>)
 8001154:	f000 fc1c 	bl	8001990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	@ 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40000400 	.word	0x40000400
 8001164:	58024400 	.word	0x58024400
 8001168:	58020800 	.word	0x58020800
 800116c:	58020400 	.word	0x58020400

08001170 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001170:	b580      	push	{r7, lr}
 8001172:	b0b6      	sub	sp, #216	@ 0xd8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001176:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001186:	4b66      	ldr	r3, [pc, #408]	@ (8001320 <HAL_FMC_MspInit+0x1b0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 80c3 	bne.w	8001316 <HAL_FMC_MspInit+0x1a6>
    return;
  }
  FMC_Initialized = 1;
 8001190:	4b63      	ldr	r3, [pc, #396]	@ (8001320 <HAL_FMC_MspInit+0x1b0>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	22b8      	movs	r2, #184	@ 0xb8
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00b fac4 	bl	800c72c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80011a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 f9c5 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80011c4:	f7ff fde0 	bl	8000d88 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011c8:	4b56      	ldr	r3, [pc, #344]	@ (8001324 <HAL_FMC_MspInit+0x1b4>)
 80011ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011ce:	4a55      	ldr	r2, [pc, #340]	@ (8001324 <HAL_FMC_MspInit+0x1b4>)
 80011d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80011d8:	4b52      	ldr	r3, [pc, #328]	@ (8001324 <HAL_FMC_MspInit+0x1b4>)
 80011da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PD2   ------> FMC_D7
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 80011e6:	f241 0301 	movw	r3, #4097	@ 0x1001
 80011ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF1_FMC;
 8001200:	2301      	movs	r3, #1
 8001202:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800120a:	4619      	mov	r1, r3
 800120c:	4846      	ldr	r0, [pc, #280]	@ (8001328 <HAL_FMC_MspInit+0x1b8>)
 800120e:	f000 fbbf 	bl	8001990 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001212:	2330      	movs	r3, #48	@ 0x30
 8001214:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800122a:	230c      	movs	r3, #12
 800122c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001234:	4619      	mov	r1, r3
 8001236:	483d      	ldr	r0, [pc, #244]	@ (800132c <HAL_FMC_MspInit+0x1bc>)
 8001238:	f000 fbaa 	bl	8001990 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800123c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001260:	4619      	mov	r1, r3
 8001262:	4833      	ldr	r0, [pc, #204]	@ (8001330 <HAL_FMC_MspInit+0x1c0>)
 8001264:	f000 fb94 	bl	8001990 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001268:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800126c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001282:	230c      	movs	r3, #12
 8001284:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800128c:	4619      	mov	r1, r3
 800128e:	4829      	ldr	r0, [pc, #164]	@ (8001334 <HAL_FMC_MspInit+0x1c4>)
 8001290:	f000 fb7e 	bl	8001990 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001294:	f64c 7333 	movw	r3, #53043	@ 0xcf33
 8001298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ae:	230c      	movs	r3, #12
 80012b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80012b8:	4619      	mov	r1, r3
 80012ba:	481f      	ldr	r0, [pc, #124]	@ (8001338 <HAL_FMC_MspInit+0x1c8>)
 80012bc:	f000 fb68 	bl	8001990 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012c0:	2380      	movs	r3, #128	@ 0x80
 80012c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80012d8:	2309      	movs	r3, #9
 80012da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	@ (8001328 <HAL_FMC_MspInit+0x1b8>)
 80012e6:	f000 fb53 	bl	8001990 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ea:	2304      	movs	r3, #4
 80012ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF1_FMC;
 8001302:	2301      	movs	r3, #1
 8001304:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800130c:	4619      	mov	r1, r3
 800130e:	480a      	ldr	r0, [pc, #40]	@ (8001338 <HAL_FMC_MspInit+0x1c8>)
 8001310:	f000 fb3e 	bl	8001990 <HAL_GPIO_Init>
 8001314:	e000      	b.n	8001318 <HAL_FMC_MspInit+0x1a8>
    return;
 8001316:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001318:	37d8      	adds	r7, #216	@ 0xd8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240002bc 	.word	0x240002bc
 8001324:	58024400 	.word	0x58024400
 8001328:	58020800 	.word	0x58020800
 800132c:	58020000 	.word	0x58020000
 8001330:	58021000 	.word	0x58021000
 8001334:	58020400 	.word	0x58020400
 8001338:	58020c00 	.word	0x58020c00

0800133c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001344:	f7ff ff14 	bl	8001170 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <NMI_Handler+0x4>

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <MemManage_Handler+0x4>

08001368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <UsageFault_Handler+0x4>

08001378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 f993 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <TIM2_IRQHandler+0x10>)
 80013b6:	f005 fef1 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	240001d4 	.word	0x240001d4

080013c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <OTG_HS_IRQHandler+0x10>)
 80013ca:	f001 ffaa 	bl	8003322 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	240017a8 	.word	0x240017a8

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f00b f9a8 	bl	800c75c <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	24050000 	.word	0x24050000
 8001438:	00000400 	.word	0x00000400
 800143c:	240002c0 	.word	0x240002c0
 8001440:	24001ff8 	.word	0x24001ff8

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001448:	4b3e      	ldr	r3, [pc, #248]	@ (8001544 <SystemInit+0x100>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a3d      	ldr	r2, [pc, #244]	@ (8001544 <SystemInit+0x100>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001458:	4b3b      	ldr	r3, [pc, #236]	@ (8001548 <SystemInit+0x104>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	2b06      	cmp	r3, #6
 8001462:	d807      	bhi.n	8001474 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001464:	4b38      	ldr	r3, [pc, #224]	@ (8001548 <SystemInit+0x104>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 030f 	bic.w	r3, r3, #15
 800146c:	4a36      	ldr	r2, [pc, #216]	@ (8001548 <SystemInit+0x104>)
 800146e:	f043 0307 	orr.w	r3, r3, #7
 8001472:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001474:	4b35      	ldr	r3, [pc, #212]	@ (800154c <SystemInit+0x108>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a34      	ldr	r2, [pc, #208]	@ (800154c <SystemInit+0x108>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <SystemInit+0x108>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001486:	4b31      	ldr	r3, [pc, #196]	@ (800154c <SystemInit+0x108>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4930      	ldr	r1, [pc, #192]	@ (800154c <SystemInit+0x108>)
 800148c:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <SystemInit+0x10c>)
 800148e:	4013      	ands	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <SystemInit+0x104>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800149e:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <SystemInit+0x104>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 030f 	bic.w	r3, r3, #15
 80014a6:	4a28      	ldr	r2, [pc, #160]	@ (8001548 <SystemInit+0x104>)
 80014a8:	f043 0307 	orr.w	r3, r3, #7
 80014ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <SystemInit+0x108>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014b4:	4b25      	ldr	r3, [pc, #148]	@ (800154c <SystemInit+0x108>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <SystemInit+0x108>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <SystemInit+0x108>)
 80014c2:	4a24      	ldr	r2, [pc, #144]	@ (8001554 <SystemInit+0x110>)
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014c6:	4b21      	ldr	r3, [pc, #132]	@ (800154c <SystemInit+0x108>)
 80014c8:	4a23      	ldr	r2, [pc, #140]	@ (8001558 <SystemInit+0x114>)
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <SystemInit+0x108>)
 80014ce:	4a23      	ldr	r2, [pc, #140]	@ (800155c <SystemInit+0x118>)
 80014d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <SystemInit+0x108>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <SystemInit+0x108>)
 80014da:	4a20      	ldr	r2, [pc, #128]	@ (800155c <SystemInit+0x118>)
 80014dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <SystemInit+0x108>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <SystemInit+0x108>)
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <SystemInit+0x118>)
 80014e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <SystemInit+0x108>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <SystemInit+0x108>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	@ (800154c <SystemInit+0x108>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <SystemInit+0x108>)
 80014fe:	2200      	movs	r2, #0
 8001500:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <SystemInit+0x108>)
 8001504:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d113      	bne.n	8001538 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <SystemInit+0x108>)
 8001512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001516:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <SystemInit+0x108>)
 8001518:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800151c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <SystemInit+0x11c>)
 8001522:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001526:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <SystemInit+0x108>)
 800152a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <SystemInit+0x108>)
 8001530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001534:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	52002000 	.word	0x52002000
 800154c:	58024400 	.word	0x58024400
 8001550:	eaf6ed7f 	.word	0xeaf6ed7f
 8001554:	02020200 	.word	0x02020200
 8001558:	01ff0000 	.word	0x01ff0000
 800155c:	01010280 	.word	0x01010280
 8001560:	52004000 	.word	0x52004000

08001564 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <ExitRun0Mode+0x2c>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <ExitRun0Mode+0x2c>)
 800156e:	f023 0302 	bic.w	r3, r3, #2
 8001572:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001574:	bf00      	nop
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <ExitRun0Mode+0x2c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f9      	beq.n	8001576 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	58024800 	.word	0x58024800

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001598:	f7ff ffe4 	bl	8001564 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800159c:	f7ff ff52 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	@ (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	@ (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f00b f8cf 	bl	800c768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7fe ff15 	bl	80003f8 <main>
  bx  lr
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015d8:	2400015c 	.word	0x2400015c
  ldr r2, =_sidata
 80015dc:	0800cfdc 	.word	0x0800cfdc
  ldr r2, =_sbss
 80015e0:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 80015e4:	24001ff4 	.word	0x24001ff4

080015e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC3_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f2:	2003      	movs	r0, #3
 80015f4:	f000 f98c 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015f8:	f003 fdfc 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_Init+0x68>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	4913      	ldr	r1, [pc, #76]	@ (8001658 <HAL_Init+0x6c>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
 8001614:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_Init+0x68>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <HAL_Init+0x6c>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_Init+0x70>)
 800162e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001630:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_Init+0x74>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f814 	bl	8001664 <HAL_InitTick>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e002      	b.n	800164c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001646:	f7ff fbd5 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	58024400 	.word	0x58024400
 8001658:	0800cf88 	.word	0x0800cf88
 800165c:	2400000c 	.word	0x2400000c
 8001660:	24000008 	.word	0x24000008

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_InitTick+0x60>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e021      	b.n	80016bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_InitTick+0x64>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_InitTick+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f971 	bl	8001976 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f93b 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <HAL_InitTick+0x68>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000014 	.word	0x24000014
 80016c8:	24000008 	.word	0x24000008
 80016cc:	24000010 	.word	0x24000010

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	24000014 	.word	0x24000014
 80016f4:	240002c4 	.word	0x240002c4

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	240002c4 	.word	0x240002c4

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24000014 	.word	0x24000014

08001758 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetREVID+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0c1b      	lsrs	r3, r3, #16
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	5c001000 	.word	0x5c001000

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	4313      	orrs	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x40>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	05fa0000 	.word	0x05fa0000

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	@ (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	@ (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	@ (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	@ 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff40 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff90 	bl	8001864 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5f 	bl	8001810 <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff33 	bl	80017d4 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa4 	bl	80018cc <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800199e:	4b86      	ldr	r3, [pc, #536]	@ (8001bb8 <HAL_GPIO_Init+0x228>)
 80019a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019a2:	e18c      	b.n	8001cbe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 817e 	beq.w	8001cb8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d005      	beq.n	80019d4 <HAL_GPIO_Init+0x44>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d017      	beq.n	8001a72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80d8 	beq.w	8001cb8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <HAL_GPIO_Init+0x22c>)
 8001b0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bbc <HAL_GPIO_Init+0x22c>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <HAL_GPIO_Init+0x22c>)
 8001b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a26      	ldr	r2, [pc, #152]	@ (8001bc0 <HAL_GPIO_Init+0x230>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc4 <HAL_GPIO_Init+0x234>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d04a      	beq.n	8001be8 <HAL_GPIO_Init+0x258>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <HAL_GPIO_Init+0x238>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d02b      	beq.n	8001bb2 <HAL_GPIO_Init+0x222>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bcc <HAL_GPIO_Init+0x23c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d025      	beq.n	8001bae <HAL_GPIO_Init+0x21e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd0 <HAL_GPIO_Init+0x240>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01f      	beq.n	8001baa <HAL_GPIO_Init+0x21a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	@ (8001bd4 <HAL_GPIO_Init+0x244>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d019      	beq.n	8001ba6 <HAL_GPIO_Init+0x216>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a18      	ldr	r2, [pc, #96]	@ (8001bd8 <HAL_GPIO_Init+0x248>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x212>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_GPIO_Init+0x24c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a16      	ldr	r2, [pc, #88]	@ (8001be0 <HAL_GPIO_Init+0x250>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x20a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a15      	ldr	r2, [pc, #84]	@ (8001be4 <HAL_GPIO_Init+0x254>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x206>
 8001b92:	2309      	movs	r3, #9
 8001b94:	e029      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001b96:	230a      	movs	r3, #10
 8001b98:	e027      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e025      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	e023      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e021      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e01f      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e01d      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e01b      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e019      	b.n	8001bea <HAL_GPIO_Init+0x25a>
 8001bb6:	bf00      	nop
 8001bb8:	58000080 	.word	0x58000080
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	58000400 	.word	0x58000400
 8001bc4:	58020000 	.word	0x58020000
 8001bc8:	58020400 	.word	0x58020400
 8001bcc:	58020800 	.word	0x58020800
 8001bd0:	58020c00 	.word	0x58020c00
 8001bd4:	58021000 	.word	0x58021000
 8001bd8:	58021400 	.word	0x58021400
 8001bdc:	58021800 	.word	0x58021800
 8001be0:	58021c00 	.word	0x58021c00
 8001be4:	58022400 	.word	0x58022400
 8001be8:	2300      	movs	r3, #0
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfa:	4938      	ldr	r1, [pc, #224]	@ (8001cdc <HAL_GPIO_Init+0x34c>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f47f ae6b 	bne.w	80019a4 <HAL_GPIO_Init+0x14>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	3724      	adds	r7, #36	@ 0x24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	58000400 	.word	0x58000400

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff fcea 	bl	80016f8 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e0a5      	b.n	8001e7e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 809e 	bne.w	8001e7e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff f870 	bl	8000e28 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001d48:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fa40 	bl	80021d2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b4b      	ldr	r3, [pc, #300]	@ (8001e88 <HAL_OSPI_Init+0x174>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68d1      	ldr	r1, [r2, #12]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6912      	ldr	r2, [r2, #16]
 8001d64:	3a01      	subs	r2, #1
 8001d66:	0412      	lsls	r2, r2, #16
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6952      	ldr	r2, [r2, #20]
 8001d6e:	3a01      	subs	r2, #1
 8001d70:	0212      	lsls	r2, r2, #8
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	69d2      	ldr	r2, [r2, #28]
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001db8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	021a      	lsls	r2, r3, #8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2120      	movs	r1, #32
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fef1 	bl	8002bc8 <OSPI_WaitFlagStateUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d146      	bne.n	8001e7e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e26:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d107      	bne.n	8001e66 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0202 	orr.w	r2, r2, #2
 8001e64:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e6e:	d103      	bne.n	8001e78 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e76:	e002      	b.n	8001e7e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	f8e0f8f4 	.word	0xf8e0f8f4

08001e8c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fc2e 	bl	80016f8 <HAL_GetTick>
 8001e9c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea2:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea8:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d104      	bne.n	8001eba <HAL_OSPI_Command+0x2e>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001eb8:	d115      	bne.n	8001ee6 <HAL_OSPI_Command+0x5a>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b14      	cmp	r3, #20
 8001ebe:	d107      	bne.n	8001ed0 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d00a      	beq.n	8001ee6 <HAL_OSPI_Command+0x5a>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b24      	cmp	r3, #36	@ 0x24
 8001ed4:	d15b      	bne.n	8001f8e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d003      	beq.n	8001ee6 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d153      	bne.n	8001f8e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2200      	movs	r2, #0
 8001eee:	2120      	movs	r1, #32
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fe69 	bl	8002bc8 <OSPI_WaitFlagStateUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8001efa:	7ffb      	ldrb	r3, [r7, #31]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d14c      	bne.n	8001f9a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fe95 	bl	8002c38 <OSPI_ConfigCmd>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d140      	bne.n	8001f9a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10e      	bne.n	8001f3e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2201      	movs	r2, #1
 8001f28:	2102      	movs	r1, #2
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fe4c 	bl	8002bc8 <OSPI_WaitFlagStateUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8001f3c:	e02d      	b.n	8001f9a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001f4c:	e025      	b.n	8001f9a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10b      	bne.n	8001f6e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5a:	2b24      	cmp	r3, #36	@ 0x24
 8001f5c:	d103      	bne.n	8001f66 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2204      	movs	r2, #4
 8001f62:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001f64:	e019      	b.n	8001f9a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2214      	movs	r2, #20
 8001f6a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001f6c:	e015      	b.n	8001f9a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d111      	bne.n	8001f9a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f7a:	2b14      	cmp	r3, #20
 8001f7c:	d103      	bne.n	8001f86 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2204      	movs	r2, #4
 8001f82:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001f84:	e009      	b.n	8001f9a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2224      	movs	r2, #36	@ 0x24
 8001f8a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001f8c:	e005      	b.n	8001f9a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2210      	movs	r2, #16
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f98:	e000      	b.n	8001f9c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8001f9a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8001f9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b08a      	sub	sp, #40	@ 0x28
 8001faa:	af02      	add	r7, sp, #8
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001fb2:	f7ff fba1 	bl	80016f8 <HAL_GetTick>
 8001fb6:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3350      	adds	r3, #80	@ 0x50
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fd0:	e057      	b.n	8002082 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d14e      	bne.n	8002078 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002002:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fdda 	bl	8002bc8 <OSPI_WaitFlagStateUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002018:	7ffb      	ldrb	r3, [r7, #31]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d113      	bne.n	8002046 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1df      	bne.n	8002004 <HAL_OSPI_Transmit+0x5e>
 8002044:	e000      	b.n	8002048 <HAL_OSPI_Transmit+0xa2>
          break;
 8002046:	bf00      	nop

      if (status == HAL_OK)
 8002048:	7ffb      	ldrb	r3, [r7, #31]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d119      	bne.n	8002082 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2201      	movs	r2, #1
 8002056:	2102      	movs	r1, #2
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fdb5 	bl	8002bc8 <OSPI_WaitFlagStateUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10c      	bne.n	8002082 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2202      	movs	r2, #2
 8002074:	651a      	str	r2, [r3, #80]	@ 0x50
 8002076:	e004      	b.n	8002082 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2210      	movs	r2, #16
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002082:	7ffb      	ldrb	r3, [r7, #31]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	@ 0x30
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff fb2e 	bl	80016f8 <HAL_GetTick>
 800209c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3350      	adds	r3, #80	@ 0x50
 80020a4:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ac:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80020b6:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2208      	movs	r2, #8
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80020ca:	e07c      	b.n	80021c6 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d172      	bne.n	80021ba <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002100:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800210a:	d104      	bne.n	8002116 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	649a      	str	r2, [r3, #72]	@ 0x48
 8002114:	e011      	b.n	800213a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800211e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	649a      	str	r2, [r3, #72]	@ 0x48
 800212e:	e004      	b.n	800213a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2201      	movs	r2, #1
 8002142:	2106      	movs	r1, #6
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fd3f 	bl	8002bc8 <OSPI_WaitFlagStateUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8002150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002154:	2b00      	cmp	r3, #0
 8002156:	d114      	bne.n	8002182 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	1e5a      	subs	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1dc      	bne.n	800213a <HAL_OSPI_Receive+0xae>
 8002180:	e000      	b.n	8002184 <HAL_OSPI_Receive+0xf8>
          break;
 8002182:	bf00      	nop

      if (status == HAL_OK)
 8002184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11c      	bne.n	80021c6 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2201      	movs	r2, #1
 8002194:	2102      	movs	r1, #2
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fd16 	bl	8002bc8 <OSPI_WaitFlagStateUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 80021a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2202      	movs	r2, #2
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2202      	movs	r2, #2
 80021b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80021b8:	e005      	b.n	80021c6 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2210      	movs	r2, #16
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 80021c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3728      	adds	r7, #40	@ 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	@ 0x50
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a9d      	ldr	r2, [pc, #628]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d105      	bne.n	800221e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800221c:	e004      	b.n	8002228 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800221e:	2301      	movs	r3, #1
 8002220:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800222e:	e01d      	b.n	800226c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002230:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002234:	3301      	adds	r3, #1
 8002236:	b2d8      	uxtb	r0, r3
 8002238:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800223c:	f107 0114 	add.w	r1, r7, #20
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	4619      	mov	r1, r3
 800224c:	f000 fe6e 	bl	8002f2c <OSPIM_GetConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2208      	movs	r2, #8
 8002260:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002262:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800226c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002270:	2b01      	cmp	r3, #1
 8002272:	d9dd      	bls.n	8002230 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002274:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 8499 	bne.w	8002bb0 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800227e:	4b81      	ldr	r3, [pc, #516]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800228a:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7d      	ldr	r2, [pc, #500]	@ (8002484 <HAL_OSPIM_Config+0x294>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002296:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80022a2:	4b79      	ldr	r3, [pc, #484]	@ (8002488 <HAL_OSPIM_Config+0x298>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80022ae:	4b76      	ldr	r3, [pc, #472]	@ (8002488 <HAL_OSPIM_Config+0x298>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a75      	ldr	r2, [pc, #468]	@ (8002488 <HAL_OSPIM_Config+0x298>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80022ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80022c6:	4971      	ldr	r1, [pc, #452]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80022c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	3350      	adds	r3, #80	@ 0x50
 80022d4:	443b      	add	r3, r7
 80022d6:	3b34      	subs	r3, #52	@ 0x34
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3b01      	subs	r3, #1
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	486a      	ldr	r0, [pc, #424]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80022e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3350      	adds	r3, #80	@ 0x50
 80022f0:	443b      	add	r3, r7
 80022f2:	3b34      	subs	r3, #52	@ 0x34
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4403      	add	r3, r0
 8002300:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002302:	4b62      	ldr	r3, [pc, #392]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80c0 	beq.w	8002490 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002310:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800231c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 8162 	bne.w	80025ea <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002326:	4959      	ldr	r1, [pc, #356]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002328:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	3350      	adds	r3, #80	@ 0x50
 8002336:	443b      	add	r3, r7
 8002338:	3b3c      	subs	r3, #60	@ 0x3c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	4851      	ldr	r0, [pc, #324]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002346:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	3350      	adds	r3, #80	@ 0x50
 8002354:	443b      	add	r3, r7
 8002356:	3b3c      	subs	r3, #60	@ 0x3c
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3b01      	subs	r3, #1
 800235c:	f041 0202 	orr.w	r2, r1, #2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4403      	add	r3, r0
 8002364:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002366:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	3350      	adds	r3, #80	@ 0x50
 8002374:	443b      	add	r3, r7
 8002376:	3b38      	subs	r3, #56	@ 0x38
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01f      	beq.n	80023be <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800237e:	4943      	ldr	r1, [pc, #268]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 8002380:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3350      	adds	r3, #80	@ 0x50
 800238e:	443b      	add	r3, r7
 8002390:	3b38      	subs	r3, #56	@ 0x38
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3b01      	subs	r3, #1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	483b      	ldr	r0, [pc, #236]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 800239e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	3350      	adds	r3, #80	@ 0x50
 80023ac:	443b      	add	r3, r7
 80023ae:	3b38      	subs	r3, #56	@ 0x38
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f041 0220 	orr.w	r2, r1, #32
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4403      	add	r3, r0
 80023bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80023be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	3350      	adds	r3, #80	@ 0x50
 80023cc:	443b      	add	r3, r7
 80023ce:	3b30      	subs	r3, #48	@ 0x30
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d023      	beq.n	800241e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80023d6:	492d      	ldr	r1, [pc, #180]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80023d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	3350      	adds	r3, #80	@ 0x50
 80023e6:	443b      	add	r3, r7
 80023e8:	3b30      	subs	r3, #48	@ 0x30
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	4824      	ldr	r0, [pc, #144]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 80023fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3350      	adds	r3, #80	@ 0x50
 8002408:	443b      	add	r3, r7
 800240a:	3b30      	subs	r3, #48	@ 0x30
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3b01      	subs	r3, #1
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4403      	add	r3, r0
 800241c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800241e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	3350      	adds	r3, #80	@ 0x50
 800242c:	443b      	add	r3, r7
 800242e:	3b2c      	subs	r3, #44	@ 0x2c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80d9 	beq.w	80025ea <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002438:	4914      	ldr	r1, [pc, #80]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 800243a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	3350      	adds	r3, #80	@ 0x50
 8002448:	443b      	add	r3, r7
 800244a:	3b2c      	subs	r3, #44	@ 0x2c
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3b01      	subs	r3, #1
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	480c      	ldr	r0, [pc, #48]	@ (800248c <HAL_OSPIM_Config+0x29c>)
 800245c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	3350      	adds	r3, #80	@ 0x50
 800246a:	443b      	add	r3, r7
 800246c:	3b2c      	subs	r3, #44	@ 0x2c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4403      	add	r3, r0
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	e0b3      	b.n	80025ea <HAL_OSPIM_Config+0x3fa>
 8002482:	bf00      	nop
 8002484:	52005000 	.word	0x52005000
 8002488:	5200a000 	.word	0x5200a000
 800248c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	3350      	adds	r3, #80	@ 0x50
 800249c:	443b      	add	r3, r7
 800249e:	3b3c      	subs	r3, #60	@ 0x3c
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80a1 	beq.w	80025ea <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80024a8:	4995      	ldr	r1, [pc, #596]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 80024aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	3350      	adds	r3, #80	@ 0x50
 80024b6:	443b      	add	r3, r7
 80024b8:	3b3c      	subs	r3, #60	@ 0x3c
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3b01      	subs	r3, #1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	488e      	ldr	r0, [pc, #568]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 80024c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	3350      	adds	r3, #80	@ 0x50
 80024d2:	443b      	add	r3, r7
 80024d4:	3b3c      	subs	r3, #60	@ 0x3c
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3b01      	subs	r3, #1
 80024da:	f021 0201 	bic.w	r2, r1, #1
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4403      	add	r3, r0
 80024e2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80024e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	3350      	adds	r3, #80	@ 0x50
 80024f0:	443b      	add	r3, r7
 80024f2:	3b38      	subs	r3, #56	@ 0x38
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01d      	beq.n	8002536 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80024fa:	4981      	ldr	r1, [pc, #516]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 80024fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	3350      	adds	r3, #80	@ 0x50
 8002508:	443b      	add	r3, r7
 800250a:	3b38      	subs	r3, #56	@ 0x38
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3b01      	subs	r3, #1
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	487a      	ldr	r0, [pc, #488]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 8002518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	3350      	adds	r3, #80	@ 0x50
 8002524:	443b      	add	r3, r7
 8002526:	3b38      	subs	r3, #56	@ 0x38
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3b01      	subs	r3, #1
 800252c:	f021 0210 	bic.w	r2, r1, #16
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4403      	add	r3, r0
 8002534:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	3350      	adds	r3, #80	@ 0x50
 8002542:	443b      	add	r3, r7
 8002544:	3b30      	subs	r3, #48	@ 0x30
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d021      	beq.n	8002590 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800254c:	496c      	ldr	r1, [pc, #432]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 800254e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	3350      	adds	r3, #80	@ 0x50
 800255a:	443b      	add	r3, r7
 800255c:	3b30      	subs	r3, #48	@ 0x30
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3b01      	subs	r3, #1
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	4864      	ldr	r0, [pc, #400]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 800256e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	3350      	adds	r3, #80	@ 0x50
 800257a:	443b      	add	r3, r7
 800257c:	3b30      	subs	r3, #48	@ 0x30
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4403      	add	r3, r0
 800258e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	3350      	adds	r3, #80	@ 0x50
 800259c:	443b      	add	r3, r7
 800259e:	3b2c      	subs	r3, #44	@ 0x2c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d021      	beq.n	80025ea <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80025a6:	4956      	ldr	r1, [pc, #344]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 80025a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	3350      	adds	r3, #80	@ 0x50
 80025b4:	443b      	add	r3, r7
 80025b6:	3b2c      	subs	r3, #44	@ 0x2c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	484e      	ldr	r0, [pc, #312]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 80025c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	3350      	adds	r3, #80	@ 0x50
 80025d4:	443b      	add	r3, r7
 80025d6:	3b2c      	subs	r3, #44	@ 0x2c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	3350      	adds	r3, #80	@ 0x50
 80025fc:	443b      	add	r3, r7
 80025fe:	3b3c      	subs	r3, #60	@ 0x3c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4299      	cmp	r1, r3
 8002604:	d03c      	beq.n	8002680 <HAL_OSPIM_Config+0x490>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6899      	ldr	r1, [r3, #8]
 800260a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	3350      	adds	r3, #80	@ 0x50
 8002618:	443b      	add	r3, r7
 800261a:	3b34      	subs	r3, #52	@ 0x34
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4299      	cmp	r1, r3
 8002620:	d02e      	beq.n	8002680 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	3350      	adds	r3, #80	@ 0x50
 8002634:	443b      	add	r3, r7
 8002636:	3b38      	subs	r3, #56	@ 0x38
 8002638:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800263a:	4299      	cmp	r1, r3
 800263c:	d103      	bne.n	8002646 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11c      	bne.n	8002680 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	3350      	adds	r3, #80	@ 0x50
 8002658:	443b      	add	r3, r7
 800265a:	3b30      	subs	r3, #48	@ 0x30
 800265c:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800265e:	4299      	cmp	r1, r3
 8002660:	d00e      	beq.n	8002680 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6919      	ldr	r1, [r3, #16]
 8002666:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	3350      	adds	r3, #80	@ 0x50
 8002674:	443b      	add	r3, r7
 8002676:	3b2c      	subs	r3, #44	@ 0x2c
 8002678:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800267a:	4299      	cmp	r1, r3
 800267c:	f040 810e 	bne.w	800289c <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	3350      	adds	r3, #80	@ 0x50
 8002692:	443b      	add	r3, r7
 8002694:	3b3c      	subs	r3, #60	@ 0x3c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4299      	cmp	r1, r3
 800269a:	d133      	bne.n	8002704 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3350      	adds	r3, #80	@ 0x50
 80026ae:	443b      	add	r3, r7
 80026b0:	3b38      	subs	r3, #56	@ 0x38
 80026b2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80026b4:	4299      	cmp	r1, r3
 80026b6:	d125      	bne.n	8002704 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	68d9      	ldr	r1, [r3, #12]
 80026bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	3350      	adds	r3, #80	@ 0x50
 80026ca:	443b      	add	r3, r7
 80026cc:	3b30      	subs	r3, #48	@ 0x30
 80026ce:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80026d0:	4299      	cmp	r1, r3
 80026d2:	d117      	bne.n	8002704 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6919      	ldr	r1, [r3, #16]
 80026d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3350      	adds	r3, #80	@ 0x50
 80026e6:	443b      	add	r3, r7
 80026e8:	3b2c      	subs	r3, #44	@ 0x2c
 80026ea:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80026ec:	4299      	cmp	r1, r3
 80026ee:	d109      	bne.n	8002704 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a02      	ldr	r2, [pc, #8]	@ (8002700 <HAL_OSPIM_Config+0x510>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e0ce      	b.n	800289c <HAL_OSPIM_Config+0x6ac>
 80026fe:	bf00      	nop
 8002700:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002704:	49bb      	ldr	r1, [pc, #748]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002706:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	3350      	adds	r3, #80	@ 0x50
 8002714:	443b      	add	r3, r7
 8002716:	3b3c      	subs	r3, #60	@ 0x3c
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3b01      	subs	r3, #1
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	48b4      	ldr	r0, [pc, #720]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002724:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	3350      	adds	r3, #80	@ 0x50
 8002732:	443b      	add	r3, r7
 8002734:	3b3c      	subs	r3, #60	@ 0x3c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3b01      	subs	r3, #1
 800273a:	f021 0201 	bic.w	r2, r1, #1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4403      	add	r3, r0
 8002742:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002744:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	3350      	adds	r3, #80	@ 0x50
 8002752:	443b      	add	r3, r7
 8002754:	3b38      	subs	r3, #56	@ 0x38
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01f      	beq.n	800279c <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800275c:	49a5      	ldr	r1, [pc, #660]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 800275e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	3350      	adds	r3, #80	@ 0x50
 800276c:	443b      	add	r3, r7
 800276e:	3b38      	subs	r3, #56	@ 0x38
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3b01      	subs	r3, #1
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	489e      	ldr	r0, [pc, #632]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 800277c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	3350      	adds	r3, #80	@ 0x50
 800278a:	443b      	add	r3, r7
 800278c:	3b38      	subs	r3, #56	@ 0x38
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	f021 0210 	bic.w	r2, r1, #16
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4403      	add	r3, r0
 800279a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800279c:	4995      	ldr	r1, [pc, #596]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 800279e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	3350      	adds	r3, #80	@ 0x50
 80027ac:	443b      	add	r3, r7
 80027ae:	3b34      	subs	r3, #52	@ 0x34
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	488e      	ldr	r0, [pc, #568]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80027bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	3350      	adds	r3, #80	@ 0x50
 80027ca:	443b      	add	r3, r7
 80027cc:	3b34      	subs	r3, #52	@ 0x34
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4403      	add	r3, r0
 80027da:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80027dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	3350      	adds	r3, #80	@ 0x50
 80027ea:	443b      	add	r3, r7
 80027ec:	3b30      	subs	r3, #48	@ 0x30
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d023      	beq.n	800283c <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80027f4:	497f      	ldr	r1, [pc, #508]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80027f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	3350      	adds	r3, #80	@ 0x50
 8002804:	443b      	add	r3, r7
 8002806:	3b30      	subs	r3, #48	@ 0x30
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3b01      	subs	r3, #1
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	4877      	ldr	r0, [pc, #476]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002818:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	3350      	adds	r3, #80	@ 0x50
 8002826:	443b      	add	r3, r7
 8002828:	3b30      	subs	r3, #48	@ 0x30
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3b01      	subs	r3, #1
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4403      	add	r3, r0
 800283a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800283c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	3350      	adds	r3, #80	@ 0x50
 800284a:	443b      	add	r3, r7
 800284c:	3b2c      	subs	r3, #44	@ 0x2c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d023      	beq.n	800289c <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002854:	4967      	ldr	r1, [pc, #412]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002856:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	3350      	adds	r3, #80	@ 0x50
 8002864:	443b      	add	r3, r7
 8002866:	3b2c      	subs	r3, #44	@ 0x2c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3b01      	subs	r3, #1
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	485f      	ldr	r0, [pc, #380]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002878:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	3350      	adds	r3, #80	@ 0x50
 8002886:	443b      	add	r3, r7
 8002888:	3b2c      	subs	r3, #44	@ 0x2c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4403      	add	r3, r0
 800289a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800289c:	4a55      	ldr	r2, [pc, #340]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	431a      	orrs	r2, r3
 80028b4:	494f      	ldr	r1, [pc, #316]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	1e5a      	subs	r2, r3, #1
 80028cc:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d90a      	bls.n	80028ee <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	4942      	ldr	r1, [pc, #264]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80028ee:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 809a 	beq.w	8002a30 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80028fc:	4a3d      	ldr	r2, [pc, #244]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	4939      	ldr	r1, [pc, #228]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3b01      	subs	r3, #1
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d011      	beq.n	800294c <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002928:	4a32      	ldr	r2, [pc, #200]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800293a:	492e      	ldr	r1, [pc, #184]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	3b01      	subs	r3, #1
 8002942:	f042 0210 	orr.w	r2, r2, #16
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d016      	beq.n	8002986 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002958:	4a26      	ldr	r2, [pc, #152]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	3b01      	subs	r3, #1
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800296e:	4921      	ldr	r1, [pc, #132]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	e019      	b.n	80029ba <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800298e:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80029a4:	4913      	ldr	r1, [pc, #76]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d018      	beq.n	80029f8 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80029c6:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80029dc:	4905      	ldr	r1, [pc, #20]	@ (80029f4 <HAL_OSPIM_Config+0x804>)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	e0c5      	b.n	8002b80 <HAL_OSPIM_Config+0x990>
 80029f4:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80bf 	beq.w	8002b80 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002a02:	4a6e      	ldr	r2, [pc, #440]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002a18:	4968      	ldr	r1, [pc, #416]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	e0a7      	b.n	8002b80 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002a30:	4a62      	ldr	r2, [pc, #392]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	495c      	ldr	r1, [pc, #368]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d014      	beq.n	8002a8c <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002a62:	4a56      	ldr	r2, [pc, #344]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a76:	015b      	lsls	r3, r3, #5
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	4950      	ldr	r1, [pc, #320]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	f042 0210 	orr.w	r2, r2, #16
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d019      	beq.n	8002acc <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002a98:	4a48      	ldr	r2, [pc, #288]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab0:	049b      	lsls	r3, r3, #18
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	4941      	ldr	r1, [pc, #260]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e01c      	b.n	8002b06 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d018      	beq.n	8002b06 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002ad4:	4a39      	ldr	r2, [pc, #228]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aec:	069b      	lsls	r3, r3, #26
 8002aee:	431a      	orrs	r2, r3
 8002af0:	4932      	ldr	r1, [pc, #200]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d019      	beq.n	8002b46 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002b12:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b2a:	049b      	lsls	r3, r3, #18
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	4923      	ldr	r1, [pc, #140]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	e01c      	b.n	8002b80 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d018      	beq.n	8002b80 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	4914      	ldr	r1, [pc, #80]	@ (8002bbc <HAL_OSPIM_Config+0x9cc>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002b80:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_OSPIM_Config+0x9d0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <HAL_OSPIM_Config+0x9d0>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002b98:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002ba4:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <HAL_OSPIM_Config+0x9d4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <HAL_OSPIM_Config+0x9d4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002bb0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3750      	adds	r7, #80	@ 0x50
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	5200b400 	.word	0x5200b400
 8002bc0:	52005000 	.word	0x52005000
 8002bc4:	5200a000 	.word	0x5200a000

08002bc8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002bd8:	e01a      	b.n	8002c10 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d016      	beq.n	8002c10 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be2:	f7fe fd89 	bl	80016f8 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d302      	bcc.n	8002bf8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfe:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e00e      	b.n	8002c2e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1d6      	bne.n	8002bda <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c54:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d114      	bne.n	8002ca6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002c84:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002c8e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002c98:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e02c      	b.n	8002d00 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d114      	bne.n	8002cd8 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002cb6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002cc0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cca:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e013      	b.n	8002d00 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ce0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002cea:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002cf4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	4319      	orrs	r1, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d34:	430b      	orrs	r3, r1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 021f 	bic.w	r2, r3, #31
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3a01      	subs	r2, #1
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8095 	beq.w	8002e9e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d053      	beq.n	8002e24 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01e      	beq.n	8002dc2 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b64      	ldr	r3, [pc, #400]	@ (8002f1c <OSPI_ConfigCmd+0x2e4>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	68d1      	ldr	r1, [r2, #12]
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	6952      	ldr	r2, [r2, #20]
 8002d94:	4311      	orrs	r1, r2
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	6912      	ldr	r2, [r2, #16]
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	69d2      	ldr	r2, [r2, #28]
 8002da0:	4311      	orrs	r1, r2
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002da6:	4311      	orrs	r1, r2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	6a12      	ldr	r2, [r2, #32]
 8002dac:	4311      	orrs	r1, r2
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002db2:	4311      	orrs	r1, r2
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002db8:	430a      	orrs	r2, r1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e026      	b.n	8002e10 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b56      	ldr	r3, [pc, #344]	@ (8002f20 <OSPI_ConfigCmd+0x2e8>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	68d1      	ldr	r1, [r2, #12]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	6952      	ldr	r2, [r2, #20]
 8002dd2:	4311      	orrs	r1, r2
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	6912      	ldr	r2, [r2, #16]
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	69d2      	ldr	r2, [r2, #28]
 8002dde:	4311      	orrs	r1, r2
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002de4:	4311      	orrs	r1, r2
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	6a12      	ldr	r2, [r2, #32]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	431a      	orrs	r2, r3
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dfa:	d109      	bne.n	8002e10 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d105      	bne.n	8002e10 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	6992      	ldr	r2, [r2, #24]
 8002e20:	649a      	str	r2, [r3, #72]	@ 0x48
 8002e22:	e074      	b.n	8002f0e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d015      	beq.n	8002e58 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <OSPI_ConfigCmd+0x2ec>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	68d1      	ldr	r1, [r2, #12]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	6952      	ldr	r2, [r2, #20]
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	6912      	ldr	r2, [r2, #16]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	431a      	orrs	r2, r3
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e01d      	b.n	8002e94 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68d9      	ldr	r1, [r3, #12]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	4319      	orrs	r1, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	431a      	orrs	r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e7e:	d109      	bne.n	8002e94 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d105      	bne.n	8002e94 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e037      	b.n	8002f0e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d02e      	beq.n	8002f04 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <OSPI_ConfigCmd+0x2f0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	69d1      	ldr	r1, [r2, #28]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	6a12      	ldr	r2, [r2, #32]
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eca:	4311      	orrs	r1, r2
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e00e      	b.n	8002ef8 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	69d9      	ldr	r1, [r3, #28]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	4319      	orrs	r1, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	6992      	ldr	r2, [r2, #24]
 8002f00:	649a      	str	r2, [r3, #72]	@ 0x48
 8002f02:	e004      	b.n	8002f0e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3724      	adds	r7, #36	@ 0x24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	f0ffc0c0 	.word	0xf0ffc0c0
 8002f20:	ffffc0c0 	.word	0xffffc0c0
 8002f24:	f0ffffc0 	.word	0xf0ffffc0
 8002f28:	f0ffc0ff 	.word	0xf0ffc0ff

08002f2c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <OSPIM_GetConfig+0x26>
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d802      	bhi.n	8002f52 <OSPIM_GetConfig+0x26>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
 8002f56:	e098      	b.n	800308a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d10b      	bne.n	8002f94 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002f7c:	4b46      	ldr	r3, [pc, #280]	@ (8003098 <OSPIM_GetConfig+0x16c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002f88:	4b44      	ldr	r3, [pc, #272]	@ (800309c <OSPIM_GetConfig+0x170>)
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	e002      	b.n	8002f94 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f92:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e074      	b.n	8003084 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003098 <OSPIM_GetConfig+0x16c>)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4053      	eors	r3, r2
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4053      	eors	r3, r2
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4053      	eors	r3, r2
 8002ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d018      	beq.n	8003042 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4053      	eors	r3, r2
 8003016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d111      	bne.n	8003042 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3301      	adds	r3, #1
 800302c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	e005      	b.n	8003042 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3301      	adds	r3, #1
 800303a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d018      	beq.n	800307e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4053      	eors	r3, r2
 8003052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d111      	bne.n	800307e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3301      	adds	r3, #1
 8003068:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	611a      	str	r2, [r3, #16]
 8003070:	e005      	b.n	800307e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3301      	adds	r3, #1
 8003076:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d987      	bls.n	8002f9a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	5200b400 	.word	0x5200b400
 800309c:	04040222 	.word	0x04040222

080030a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0fe      	b.n	80032b0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f008 ff12 	bl	800bef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f005 fad2 	bl	8008682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7c1a      	ldrb	r2, [r3, #16]
 80030e6:	f88d 2000 	strb.w	r2, [sp]
 80030ea:	3304      	adds	r3, #4
 80030ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ee:	f005 f9a3 	bl	8008438 <USB_CoreInit>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0d5      	b.n	80032b0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f005 faca 	bl	80086a4 <USB_SetCurrentMode>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0c6      	b.n	80032b0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e04a      	b.n	80031be <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3315      	adds	r3, #21
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3314      	adds	r3, #20
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	b298      	uxth	r0, r3
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	332e      	adds	r3, #46	@ 0x2e
 8003164:	4602      	mov	r2, r0
 8003166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3318      	adds	r3, #24
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	331c      	adds	r3, #28
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3320      	adds	r3, #32
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3324      	adds	r3, #36	@ 0x24
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	3301      	adds	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	791b      	ldrb	r3, [r3, #4]
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d3af      	bcc.n	8003128 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e044      	b.n	8003258 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	3301      	adds	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	791b      	ldrb	r3, [r3, #4]
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	429a      	cmp	r2, r3
 8003260:	d3b5      	bcc.n	80031ce <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7c1a      	ldrb	r2, [r3, #16]
 800326a:	f88d 2000 	strb.w	r2, [sp]
 800326e:	3304      	adds	r3, #4
 8003270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003272:	f005 fa63 	bl	800873c <USB_DevInit>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e013      	b.n	80032b0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7b1b      	ldrb	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f001 f96e 	bl	8004580 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f006 faa6 	bl	80097fa <USB_DevDisconnect>

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_Start+0x1c>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e022      	b.n	800331a <HAL_PCD_Start+0x62>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f005 f9ad 	bl	8008660 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f006 fa54 	bl	80097b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003322:	b590      	push	{r4, r7, lr}
 8003324:	b08d      	sub	sp, #52	@ 0x34
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f006 fb12 	bl	8009962 <USB_GetMode>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 84b9 	bne.w	8003cb8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f006 fa76 	bl	800983c <USB_ReadInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 84af 	beq.w	8003cb6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f006 fa63 	bl	800983c <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d107      	bne.n	8003390 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f002 0202 	and.w	r2, r2, #2
 800338e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f006 fa51 	bl	800983c <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d161      	bne.n	8003468 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0210 	bic.w	r2, r2, #16
 80033b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	3304      	adds	r3, #4
 80033d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	0c5b      	lsrs	r3, r3, #17
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d124      	bne.n	800342a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d035      	beq.n	8003458 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	6a38      	ldr	r0, [r7, #32]
 8003400:	f006 f888 	bl	8009514 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003410:	441a      	add	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003422:	441a      	add	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	615a      	str	r2, [r3, #20]
 8003428:	e016      	b.n	8003458 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	0c5b      	lsrs	r3, r3, #17
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	2b06      	cmp	r3, #6
 8003434:	d110      	bne.n	8003458 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800343c:	2208      	movs	r2, #8
 800343e:	4619      	mov	r1, r3
 8003440:	6a38      	ldr	r0, [r7, #32]
 8003442:	f006 f867 	bl	8009514 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003452:	441a      	add	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0210 	orr.w	r2, r2, #16
 8003466:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f006 f9e5 	bl	800983c <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003478:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800347c:	f040 80a7 	bne.w	80035ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f006 f9ea 	bl	8009862 <USB_ReadDevAllOutEpInterrupt>
 800348e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003490:	e099      	b.n	80035c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 808e 	beq.w	80035ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f006 fa0e 	bl	80098ca <USB_ReadDevOutEPInterrupt>
 80034ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2301      	movs	r3, #1
 80034ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fed0 	bl	8004274 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2308      	movs	r3, #8
 80034ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 ffa6 	bl	8004444 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	2310      	movs	r3, #16
 8003512:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d030      	beq.n	8003580 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003526:	2b80      	cmp	r3, #128	@ 0x80
 8003528:	d109      	bne.n	800353e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800353c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	78db      	ldrb	r3, [r3, #3]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d108      	bne.n	800356e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f008 fde1 	bl	800c130 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357a:	461a      	mov	r2, r3
 800357c:	2302      	movs	r3, #2
 800357e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	2320      	movs	r3, #32
 800359a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b2:	461a      	mov	r2, r3
 80035b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	3301      	adds	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af62 	bne.w	8003492 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f006 f932 	bl	800983c <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035e2:	f040 80db 	bne.w	800379c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f006 f953 	bl	8009896 <USB_ReadDevAllInEpInterrupt>
 80035f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80035f6:	e0cd      	b.n	8003794 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80c2 	beq.w	8003788 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f006 f979 	bl	8009906 <USB_ReadDevInEPInterrupt>
 8003614:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d057      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	69f9      	ldr	r1, [r7, #28]
 800363c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003640:	4013      	ands	r3, r2
 8003642:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003650:	461a      	mov	r2, r3
 8003652:	2301      	movs	r3, #1
 8003654:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	799b      	ldrb	r3, [r3, #6]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d132      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3320      	adds	r3, #32
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4403      	add	r3, r0
 800367e:	331c      	adds	r3, #28
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4419      	add	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4403      	add	r3, r0
 8003692:	3320      	adds	r3, #32
 8003694:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d113      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x3a2>
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3324      	adds	r3, #36	@ 0x24
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036bc:	461a      	mov	r2, r3
 80036be:	2101      	movs	r1, #1
 80036c0:	f006 f982 	bl	80099c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f008 fcab 	bl	800c026 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e6:	461a      	mov	r2, r3
 80036e8:	2308      	movs	r3, #8
 80036ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003702:	461a      	mov	r2, r3
 8003704:	2310      	movs	r3, #16
 8003706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	2340      	movs	r3, #64	@ 0x40
 8003722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d023      	beq.n	8003776 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800372e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003730:	6a38      	ldr	r0, [r7, #32]
 8003732:	f005 f961 	bl	80089f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3310      	adds	r3, #16
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	78db      	ldrb	r3, [r3, #3]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d108      	bne.n	8003764 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f008 fcf8 	bl	800c154 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003770:	461a      	mov	r2, r3
 8003772:	2302      	movs	r3, #2
 8003774:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fcea 	bl	800415c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	3301      	adds	r3, #1
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	f47f af2e 	bne.w	80035f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f006 f84b 	bl	800983c <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037b0:	d122      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037d8:	2100      	movs	r1, #0
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fef4 	bl	80045c8 <HAL_PCDEx_LPM_Callback>
 80037e0:	e002      	b.n	80037e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f008 fc96 	bl	800c114 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80037f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f006 f81d 	bl	800983c <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800380c:	d112      	bne.n	8003834 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f008 fc52 	bl	800c0c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003832:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f005 ffff 	bl	800983c <USB_ReadInterrupts>
 800383e:	4603      	mov	r3, r0
 8003840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003848:	d121      	bne.n	800388e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003858:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	f003 020f 	and.w	r2, r3, #15
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800387e:	2101      	movs	r1, #1
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fea1 	bl	80045c8 <HAL_PCDEx_LPM_Callback>
 8003886:	e002      	b.n	800388e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f008 fc1d 	bl	800c0c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f005 ffd2 	bl	800983c <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	f040 80b7 	bne.w	8003a14 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2110      	movs	r1, #16
 80038c0:	4618      	mov	r0, r3
 80038c2:	f005 f899 	bl	80089f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ca:	e046      	b.n	800395a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d8:	461a      	mov	r2, r3
 80038da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003912:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	440a      	add	r2, r1
 800392a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800392e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003932:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800394e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003952:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	3301      	adds	r3, #1
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	791b      	ldrb	r3, [r3, #4]
 800395e:	461a      	mov	r2, r3
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	4293      	cmp	r3, r2
 8003964:	d3b2      	bcc.n	80038cc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003974:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003978:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7bdb      	ldrb	r3, [r3, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003992:	f043 030b 	orr.w	r3, r3, #11
 8003996:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a8:	f043 030b 	orr.w	r3, r3, #11
 80039ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ae:	e015      	b.n	80039dc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039be:	4619      	mov	r1, r3
 80039c0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80039c4:	4313      	orrs	r3, r2
 80039c6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d6:	f043 030b 	orr.w	r3, r3, #11
 80039da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039fe:	461a      	mov	r2, r3
 8003a00:	f005 ffe2 	bl	80099c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f005 ff0f 	bl	800983c <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a28:	d123      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f005 ffa6 	bl	8009980 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f005 f856 	bl	8008aea <USB_GetDevSpeed>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681c      	ldr	r4, [r3, #0]
 8003a4a:	f001 fd4d 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 8003a4e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a54:	461a      	mov	r2, r3
 8003a56:	4620      	mov	r0, r4
 8003a58:	f004 fd60 	bl	800851c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f008 fb0a 	bl	800c076 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f005 fee0 	bl	800983c <USB_ReadInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d10a      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f008 fae7 	bl	800c05a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f002 0208 	and.w	r2, r2, #8
 8003a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f005 fecb 	bl	800983c <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aac:	2b80      	cmp	r3, #128	@ 0x80
 8003aae:	d123      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac0:	e014      	b.n	8003aec <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fb0a 	bl	80040fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	3301      	adds	r3, #1
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	791b      	ldrb	r3, [r3, #4]
 8003af0:	461a      	mov	r2, r3
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d3e4      	bcc.n	8003ac2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f005 fe9d 	bl	800983c <USB_ReadInterrupts>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b0c:	d13c      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b0e:	2301      	movs	r3, #1
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b12:	e02b      	b.n	8003b6c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	3318      	adds	r3, #24
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d115      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	da12      	bge.n	8003b66 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3317      	adds	r3, #23
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 faca 	bl	80040fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	791b      	ldrb	r3, [r3, #4]
 8003b70:	461a      	mov	r2, r3
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d3cd      	bcc.n	8003b14 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f005 fe55 	bl	800983c <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b9c:	d156      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba2:	e045      	b.n	8003c30 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d12e      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	da2b      	bge.n	8003c2a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	0c1a      	lsrs	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003bdc:	4053      	eors	r3, r2
 8003bde:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d121      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c26:	6053      	str	r3, [r2, #4]
            break;
 8003c28:	e008      	b.n	8003c3c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	791b      	ldrb	r3, [r3, #4]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d3b3      	bcc.n	8003ba4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f005 fdf3 	bl	800983c <USB_ReadInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c60:	d10a      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f008 fa88 	bl	800c178 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f005 fddd 	bl	800983c <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d115      	bne.n	8003cb8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f008 fa78 	bl	800c194 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	e000      	b.n	8003cb8 <HAL_PCD_IRQHandler+0x996>
      return;
 8003cb6:	bf00      	nop
    }
  }
}
 8003cb8:	3734      	adds	r7, #52	@ 0x34
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd90      	pop	{r4, r7, pc}

08003cbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_PCD_SetAddress+0x1a>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e012      	b.n	8003cfe <HAL_PCD_SetAddress+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f005 fd3c 	bl	800976c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	4608      	mov	r0, r1
 8003d10:	4611      	mov	r1, r2
 8003d12:	461a      	mov	r2, r3
 8003d14:	4603      	mov	r3, r0
 8003d16:	70fb      	strb	r3, [r7, #3]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	803b      	strh	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	da0f      	bge.n	8003d4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	f003 020f 	and.w	r2, r3, #15
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	705a      	strb	r2, [r3, #1]
 8003d4a:	e00f      	b.n	8003d6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d78:	883b      	ldrh	r3, [r7, #0]
 8003d7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	78ba      	ldrb	r2, [r7, #2]
 8003d86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	785b      	ldrb	r3, [r3, #1]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d9a:	78bb      	ldrb	r3, [r7, #2]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d102      	bne.n	8003da6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_PCD_EP_Open+0xae>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e00e      	b.n	8003dd2 <HAL_PCD_EP_Open+0xcc>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68f9      	ldr	r1, [r7, #12]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f004 feb6 	bl	8008b34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003dd0:	7afb      	ldrb	r3, [r7, #11]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da0f      	bge.n	8003e0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	f003 020f 	and.w	r2, r3, #15
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	3310      	adds	r3, #16
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	3304      	adds	r3, #4
 8003e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	705a      	strb	r2, [r3, #1]
 8003e0c:	e00f      	b.n	8003e2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_PCD_EP_Close+0x6e>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e00e      	b.n	8003e66 <HAL_PCD_EP_Close+0x8c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68f9      	ldr	r1, [r7, #12]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f004 fef4 	bl	8008c44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	799b      	ldrb	r3, [r3, #6]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d102      	bne.n	8003eca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	799b      	ldrb	r3, [r3, #6]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	f004 ff91 	bl	8008dfc <USB_EPStartXfer>

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	460b      	mov	r3, r1
 8003f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f24:	7afb      	ldrb	r3, [r7, #11]
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3310      	adds	r3, #16
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	3304      	adds	r3, #4
 8003f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2201      	movs	r2, #1
 8003f52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f54:	7afb      	ldrb	r3, [r7, #11]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	799b      	ldrb	r3, [r3, #6]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d102      	bne.n	8003f6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	799b      	ldrb	r3, [r3, #6]
 8003f76:	461a      	mov	r2, r3
 8003f78:	6979      	ldr	r1, [r7, #20]
 8003f7a:	f004 ff3f 	bl	8008dfc <USB_EPStartXfer>

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	7912      	ldrb	r2, [r2, #4]
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e04f      	b.n	8004046 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da0f      	bge.n	8003fce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	705a      	strb	r2, [r3, #1]
 8003fcc:	e00d      	b.n	8003fea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_PCD_EP_SetStall+0x82>
 8004006:	2302      	movs	r3, #2
 8004008:	e01d      	b.n	8004046 <HAL_PCD_EP_SetStall+0xbe>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	4618      	mov	r0, r3
 800401a:	f005 fad3 	bl	80095c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7999      	ldrb	r1, [r3, #6]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004036:	461a      	mov	r2, r3
 8004038:	f005 fcc6 	bl	80099c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	7912      	ldrb	r2, [r2, #4]
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e042      	b.n	80040f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800406c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004070:	2b00      	cmp	r3, #0
 8004072:	da0f      	bge.n	8004094 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	3310      	adds	r3, #16
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	705a      	strb	r2, [r3, #1]
 8004092:	e00f      	b.n	80040b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_PCD_EP_ClrStall+0x86>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e00e      	b.n	80040f2 <HAL_PCD_EP_ClrStall+0xa4>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f005 fadc 	bl	80096a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800410a:	2b00      	cmp	r3, #0
 800410c:	da0c      	bge.n	8004128 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 020f 	and.w	r2, r3, #15
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	3310      	adds	r3, #16
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e00c      	b.n	8004142 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	4618      	mov	r0, r3
 800414a:	f005 f8fb 	bl	8009344 <USB_EPStopXfer>
 800414e:	4603      	mov	r3, r0
 8004150:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004152:	7afb      	ldrb	r3, [r7, #11]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	@ 0x28
 8004160:	af02      	add	r7, sp, #8
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	3310      	adds	r3, #16
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	3304      	adds	r3, #4
 8004182:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d901      	bls.n	8004194 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e06b      	b.n	800426c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d902      	bls.n	80041b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	3303      	adds	r3, #3
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041b8:	e02a      	b.n	8004210 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d902      	bls.n	80041d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3303      	adds	r3, #3
 80041da:	089b      	lsrs	r3, r3, #2
 80041dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68d9      	ldr	r1, [r3, #12]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	4603      	mov	r3, r0
 80041f2:	6978      	ldr	r0, [r7, #20]
 80041f4:	f005 f950 	bl	8009498 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	441a      	add	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	441a      	add	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	429a      	cmp	r2, r3
 8004224:	d809      	bhi.n	800423a <PCD_WriteEmptyTxFifo+0xde>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800422e:	429a      	cmp	r2, r3
 8004230:	d203      	bcs.n	800423a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1bf      	bne.n	80041ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	429a      	cmp	r2, r3
 8004244:	d811      	bhi.n	800426a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	2201      	movs	r2, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	43db      	mvns	r3, r3
 8004260:	6939      	ldr	r1, [r7, #16]
 8004262:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004266:	4013      	ands	r3, r2
 8004268:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	333c      	adds	r3, #60	@ 0x3c
 800428c:	3304      	adds	r3, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	799b      	ldrb	r3, [r3, #6]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d17b      	bne.n	80043a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4a61      	ldr	r2, [pc, #388]	@ (800443c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	f240 80b9 	bls.w	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80b3 	beq.w	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042dc:	6093      	str	r3, [r2, #8]
 80042de:	e0a7      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f6:	461a      	mov	r2, r3
 80042f8:	2320      	movs	r3, #32
 80042fa:	6093      	str	r3, [r2, #8]
 80042fc:	e098      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 8093 	bne.w	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4a4b      	ldr	r2, [pc, #300]	@ (800443c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d90f      	bls.n	8004332 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432e:	6093      	str	r3, [r2, #8]
 8004330:	e07e      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	0159      	lsls	r1, r3, #5
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	440b      	add	r3, r1
 8004354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d114      	bne.n	8004394 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800437c:	461a      	mov	r2, r3
 800437e:	2101      	movs	r1, #1
 8004380:	f005 fb22 	bl	80099c8 <USB_EP0_OutStart>
 8004384:	e006      	b.n	8004394 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	441a      	add	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f007 fe28 	bl	800bff0 <HAL_PCD_DataOutStageCallback>
 80043a0:	e046      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4a26      	ldr	r2, [pc, #152]	@ (8004440 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d124      	bne.n	80043f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c0:	461a      	mov	r2, r3
 80043c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c6:	6093      	str	r3, [r2, #8]
 80043c8:	e032      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	2320      	movs	r3, #32
 80043e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f007 fdff 	bl	800bff0 <HAL_PCD_DataOutStageCallback>
 80043f2:	e01d      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d114      	bne.n	8004424 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800441c:	461a      	mov	r2, r3
 800441e:	2100      	movs	r1, #0
 8004420:	f005 fad2 	bl	80099c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f007 fde0 	bl	800bff0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	4f54300a 	.word	0x4f54300a
 8004440:	4f54310a 	.word	0x4f54310a

08004444 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	333c      	adds	r3, #60	@ 0x3c
 800445c:	3304      	adds	r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <PCD_EP_OutSetupPacket_int+0x88>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d90e      	bls.n	8004498 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004490:	461a      	mov	r2, r3
 8004492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004496:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f007 fd97 	bl	800bfcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <PCD_EP_OutSetupPacket_int+0x88>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d90c      	bls.n	80044c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	799b      	ldrb	r3, [r3, #6]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d108      	bne.n	80044c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044b8:	461a      	mov	r2, r3
 80044ba:	2101      	movs	r1, #1
 80044bc:	f005 fa84 	bl	80099c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	4f54300a 	.word	0x4f54300a

080044d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
 80044dc:	4613      	mov	r3, r2
 80044de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044ee:	883b      	ldrh	r3, [r7, #0]
 80044f0:	0419      	lsls	r1, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80044fc:	e028      	b.n	8004550 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]
 8004510:	e00d      	b.n	800452e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	3340      	adds	r3, #64	@ 0x40
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	4413      	add	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	3301      	adds	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	3b01      	subs	r3, #1
 8004534:	429a      	cmp	r2, r3
 8004536:	d3ec      	bcc.n	8004512 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004538:	883b      	ldrh	r3, [r7, #0]
 800453a:	0418      	lsls	r0, r3, #16
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	3b01      	subs	r3, #1
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4302      	orrs	r2, r0
 8004548:	3340      	adds	r3, #64	@ 0x40
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	10000003 	.word	0x10000003

080045c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	58024800 	.word	0x58024800

08004600 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004608:	4b29      	ldr	r3, [pc, #164]	@ (80046b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	2b06      	cmp	r3, #6
 8004612:	d00a      	beq.n	800462a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004614:	4b26      	ldr	r3, [pc, #152]	@ (80046b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d001      	beq.n	8004626 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e03f      	b.n	80046a6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e03d      	b.n	80046a6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800462a:	4b21      	ldr	r3, [pc, #132]	@ (80046b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004632:	491f      	ldr	r1, [pc, #124]	@ (80046b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4313      	orrs	r3, r2
 8004638:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800463a:	f7fd f85d 	bl	80016f8 <HAL_GetTick>
 800463e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004640:	e009      	b.n	8004656 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004642:	f7fd f859 	bl	80016f8 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004650:	d901      	bls.n	8004656 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e027      	b.n	80046a6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004656:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800465e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004662:	d1ee      	bne.n	8004642 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b1e      	cmp	r3, #30
 8004668:	d008      	beq.n	800467c <HAL_PWREx_ConfigSupply+0x7c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b2e      	cmp	r3, #46	@ 0x2e
 800466e:	d005      	beq.n	800467c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b1d      	cmp	r3, #29
 8004674:	d002      	beq.n	800467c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b2d      	cmp	r3, #45	@ 0x2d
 800467a:	d113      	bne.n	80046a4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800467c:	f7fd f83c 	bl	80016f8 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004682:	e009      	b.n	8004698 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004684:	f7fd f838 	bl	80016f8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004692:	d901      	bls.n	8004698 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e006      	b.n	80046a6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0311 	and.w	r3, r3, #17
 80046a0:	2b11      	cmp	r3, #17
 80046a2:	d1ef      	bne.n	8004684 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	58024800 	.word	0x58024800

080046b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4a04      	ldr	r2, [pc, #16]	@ (80046d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046c2:	60d3      	str	r3, [r2, #12]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	58024800 	.word	0x58024800

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	@ 0x30
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e3c8      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8087 	beq.w	8004802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f4:	4b88      	ldr	r3, [pc, #544]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046fe:	4b86      	ldr	r3, [pc, #536]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004706:	2b10      	cmp	r3, #16
 8004708:	d007      	beq.n	800471a <HAL_RCC_OscConfig+0x46>
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	2b18      	cmp	r3, #24
 800470e:	d110      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d10b      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471a:	4b7f      	ldr	r3, [pc, #508]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d06c      	beq.n	8004800 <HAL_RCC_OscConfig+0x12c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d168      	bne.n	8004800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e3a2      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x76>
 800473c:	4b76      	ldr	r3, [pc, #472]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a75      	ldr	r2, [pc, #468]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x98>
 8004752:	4b71      	ldr	r3, [pc, #452]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a70      	ldr	r2, [pc, #448]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b6e      	ldr	r3, [pc, #440]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6d      	ldr	r2, [pc, #436]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0xbc>
 8004776:	4b68      	ldr	r3, [pc, #416]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a67      	ldr	r2, [pc, #412]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b65      	ldr	r3, [pc, #404]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a64      	ldr	r2, [pc, #400]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 8004790:	4b61      	ldr	r3, [pc, #388]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a60      	ldr	r2, [pc, #384]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b5e      	ldr	r3, [pc, #376]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fc ffa2 	bl	80016f8 <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fc ff9e 	bl	80016f8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e356      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ca:	4b53      	ldr	r3, [pc, #332]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe4>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fc ff8e 	bl	80016f8 <HAL_GetTick>
 80047dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fc ff8a 	bl	80016f8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	@ 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e342      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047f2:	4b49      	ldr	r3, [pc, #292]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x10c>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 808c 	beq.w	8004928 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004810:	4b41      	ldr	r3, [pc, #260]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004818:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800481a:	4b3f      	ldr	r3, [pc, #252]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_RCC_OscConfig+0x162>
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	2b18      	cmp	r3, #24
 800482a:	d137      	bne.n	800489c <HAL_RCC_OscConfig+0x1c8>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d132      	bne.n	800489c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004836:	4b38      	ldr	r3, [pc, #224]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_RCC_OscConfig+0x17a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e314      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800484e:	4b32      	ldr	r3, [pc, #200]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0219 	bic.w	r2, r3, #25
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	492f      	ldr	r1, [pc, #188]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fc ff4a 	bl	80016f8 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004868:	f7fc ff46 	bl	80016f8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e2fe      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487a:	4b27      	ldr	r3, [pc, #156]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004886:	4b24      	ldr	r3, [pc, #144]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	061b      	lsls	r3, r3, #24
 8004894:	4920      	ldr	r1, [pc, #128]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 8004896:	4313      	orrs	r3, r2
 8004898:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800489a:	e045      	b.n	8004928 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d026      	beq.n	80048f2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 0219 	bic.w	r2, r3, #25
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4919      	ldr	r1, [pc, #100]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fc ff1f 	bl	80016f8 <HAL_GetTick>
 80048ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048be:	f7fc ff1b 	bl	80016f8 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e2d3      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048d0:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	490b      	ldr	r1, [pc, #44]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
 80048f0:	e01a      	b.n	8004928 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f2:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a08      	ldr	r2, [pc, #32]	@ (8004918 <HAL_RCC_OscConfig+0x244>)
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fc fefb 	bl	80016f8 <HAL_GetTick>
 8004902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004906:	f7fc fef7 	bl	80016f8 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d903      	bls.n	800491c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e2af      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
 8004918:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800491c:	4b96      	ldr	r3, [pc, #600]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ee      	bne.n	8004906 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d06a      	beq.n	8004a0a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004934:	4b90      	ldr	r3, [pc, #576]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800493c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800493e:	4b8e      	ldr	r3, [pc, #568]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004942:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b08      	cmp	r3, #8
 8004948:	d007      	beq.n	800495a <HAL_RCC_OscConfig+0x286>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b18      	cmp	r3, #24
 800494e:	d11b      	bne.n	8004988 <HAL_RCC_OscConfig+0x2b4>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d116      	bne.n	8004988 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800495a:	4b87      	ldr	r3, [pc, #540]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_RCC_OscConfig+0x29e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b80      	cmp	r3, #128	@ 0x80
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e282      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004972:	4b81      	ldr	r3, [pc, #516]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	497d      	ldr	r1, [pc, #500]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004986:	e040      	b.n	8004a0a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d023      	beq.n	80049d8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004990:	4b79      	ldr	r3, [pc, #484]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a78      	ldr	r2, [pc, #480]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800499a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fc feac 	bl	80016f8 <HAL_GetTick>
 80049a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049a4:	f7fc fea8 	bl	80016f8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e260      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049b6:	4b70      	ldr	r3, [pc, #448]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	061b      	lsls	r3, r3, #24
 80049d0:	4969      	ldr	r1, [pc, #420]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
 80049d6:	e018      	b.n	8004a0a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049d8:	4b67      	ldr	r3, [pc, #412]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a66      	ldr	r2, [pc, #408]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 80049de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fc fe88 	bl	80016f8 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049ec:	f7fc fe84 	bl	80016f8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e23c      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d036      	beq.n	8004a84 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1e:	4b56      	ldr	r3, [pc, #344]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	4a55      	ldr	r2, [pc, #340]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2a:	f7fc fe65 	bl	80016f8 <HAL_GetTick>
 8004a2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a32:	f7fc fe61 	bl	80016f8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e219      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a44:	4b4c      	ldr	r3, [pc, #304]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x35e>
 8004a50:	e018      	b.n	8004a84 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a52:	4b49      	ldr	r3, [pc, #292]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a56:	4a48      	ldr	r2, [pc, #288]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fc fe4b 	bl	80016f8 <HAL_GetTick>
 8004a62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a66:	f7fc fe47 	bl	80016f8 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e1ff      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a78:	4b3f      	ldr	r3, [pc, #252]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f0      	bne.n	8004a66 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d036      	beq.n	8004afe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a98:	4b37      	ldr	r3, [pc, #220]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a36      	ldr	r2, [pc, #216]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004a9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aa4:	f7fc fe28 	bl	80016f8 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aac:	f7fc fe24 	bl	80016f8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1dc      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004abe:	4b2e      	ldr	r3, [pc, #184]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x3d8>
 8004aca:	e018      	b.n	8004afe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004acc:	4b2a      	ldr	r3, [pc, #168]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a29      	ldr	r2, [pc, #164]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004ad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ad6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ad8:	f7fc fe0e 	bl	80016f8 <HAL_GetTick>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae0:	f7fc fe0a 	bl	80016f8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1c2      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004af2:	4b21      	ldr	r3, [pc, #132]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8086 	beq.w	8004c18 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <HAL_RCC_OscConfig+0x4a8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <HAL_RCC_OscConfig+0x4a8>)
 8004b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b18:	f7fc fdee 	bl	80016f8 <HAL_GetTick>
 8004b1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b20:	f7fc fdea 	bl	80016f8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	@ 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e1a2      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b32:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <HAL_RCC_OscConfig+0x4a8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x480>
 8004b46:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b52:	e032      	b.n	8004bba <HAL_RCC_OscConfig+0x4e6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4ac>
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b60:	4a05      	ldr	r2, [pc, #20]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b68:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6c:	4a02      	ldr	r2, [pc, #8]	@ (8004b78 <HAL_RCC_OscConfig+0x4a4>)
 8004b6e:	f023 0304 	bic.w	r3, r3, #4
 8004b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b74:	e021      	b.n	8004bba <HAL_RCC_OscConfig+0x4e6>
 8004b76:	bf00      	nop
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	58024800 	.word	0x58024800
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4ce>
 8004b88:	4b83      	ldr	r3, [pc, #524]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	4a82      	ldr	r2, [pc, #520]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b94:	4b80      	ldr	r3, [pc, #512]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b98:	4a7f      	ldr	r2, [pc, #508]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0x4e6>
 8004ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	4a7c      	ldr	r2, [pc, #496]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bae:	4b7a      	ldr	r3, [pc, #488]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	4a79      	ldr	r2, [pc, #484]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fc fd99 	bl	80016f8 <HAL_GetTick>
 8004bc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fc fd95 	bl	80016f8 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e14b      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be0:	4b6d      	ldr	r3, [pc, #436]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCC_OscConfig+0x4f6>
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fc fd83 	bl	80016f8 <HAL_GetTick>
 8004bf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fc fd7f 	bl	80016f8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e135      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c0c:	4b62      	ldr	r3, [pc, #392]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 812a 	beq.w	8004e76 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c22:	4b5d      	ldr	r3, [pc, #372]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c2a:	2b18      	cmp	r3, #24
 8004c2c:	f000 80ba 	beq.w	8004da4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	f040 8095 	bne.w	8004d64 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b57      	ldr	r3, [pc, #348]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a56      	ldr	r2, [pc, #344]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004c40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fc fd57 	bl	80016f8 <HAL_GetTick>
 8004c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fc fd53 	bl	80016f8 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e10b      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c60:	4b4d      	ldr	r3, [pc, #308]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004c6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c70:	4b4a      	ldr	r3, [pc, #296]	@ (8004d9c <HAL_RCC_OscConfig+0x6c8>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	4945      	ldr	r1, [pc, #276]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c94:	3b01      	subs	r3, #1
 8004c96:	025b      	lsls	r3, r3, #9
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cb6:	4938      	ldr	r1, [pc, #224]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cbc:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	4a35      	ldr	r2, [pc, #212]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cc8:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ccc:	4b34      	ldr	r3, [pc, #208]	@ (8004da0 <HAL_RCC_OscConfig+0x6cc>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cd4:	00d2      	lsls	r2, r2, #3
 8004cd6:	4930      	ldr	r1, [pc, #192]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	f023 020c 	bic.w	r2, r3, #12
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	492b      	ldr	r1, [pc, #172]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cee:	4b2a      	ldr	r3, [pc, #168]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	f023 0202 	bic.w	r2, r3, #2
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	4927      	ldr	r1, [pc, #156]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d00:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0c:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4a21      	ldr	r2, [pc, #132]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d18:	4b1f      	ldr	r3, [pc, #124]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d24:	4b1c      	ldr	r3, [pc, #112]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d30:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a18      	ldr	r2, [pc, #96]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fc fcdc 	bl	80016f8 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fc fcd8 	bl	80016f8 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e090      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d56:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x670>
 8004d62:	e088      	b.n	8004e76 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a0b      	ldr	r2, [pc, #44]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fc fcc2 	bl	80016f8 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fc fcbe 	bl	80016f8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e076      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d8a:	4b03      	ldr	r3, [pc, #12]	@ (8004d98 <HAL_RCC_OscConfig+0x6c4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x6a4>
 8004d96:	e06e      	b.n	8004e76 <HAL_RCC_OscConfig+0x7a2>
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	fffffc0c 	.word	0xfffffc0c
 8004da0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004da4:	4b36      	ldr	r3, [pc, #216]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004daa:	4b35      	ldr	r3, [pc, #212]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d031      	beq.n	8004e1c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f003 0203 	and.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d12a      	bne.n	8004e1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d122      	bne.n	8004e1c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d11a      	bne.n	8004e1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	0a5b      	lsrs	r3, r3, #9
 8004dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d111      	bne.n	8004e1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d108      	bne.n	8004e1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e02b      	b.n	8004e78 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e20:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d01f      	beq.n	8004e76 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e36:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e42:	f7fc fc59 	bl	80016f8 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e48:	bf00      	nop
 8004e4a:	f7fc fc55 	bl	80016f8 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d0f9      	beq.n	8004e4a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e56:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <HAL_RCC_OscConfig+0x7b0>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e62:	00d2      	lsls	r2, r2, #3
 8004e64:	4906      	ldr	r1, [pc, #24]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e6a:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <HAL_RCC_OscConfig+0x7ac>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3730      	adds	r7, #48	@ 0x30
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	58024400 	.word	0x58024400
 8004e84:	ffff0007 	.word	0xffff0007

08004e88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e19c      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b8a      	ldr	r3, [pc, #552]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d910      	bls.n	8004ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b87      	ldr	r3, [pc, #540]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 020f 	bic.w	r2, r3, #15
 8004eb2:	4985      	ldr	r1, [pc, #532]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b83      	ldr	r3, [pc, #524]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e184      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	4b7b      	ldr	r3, [pc, #492]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d908      	bls.n	8004efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ee8:	4b78      	ldr	r3, [pc, #480]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	4975      	ldr	r1, [pc, #468]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	4b70      	ldr	r3, [pc, #448]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d908      	bls.n	8004f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f16:	4b6d      	ldr	r3, [pc, #436]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	496a      	ldr	r1, [pc, #424]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d010      	beq.n	8004f56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	4b64      	ldr	r3, [pc, #400]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d908      	bls.n	8004f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f44:	4b61      	ldr	r3, [pc, #388]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	495e      	ldr	r1, [pc, #376]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d010      	beq.n	8004f84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	4b59      	ldr	r3, [pc, #356]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d908      	bls.n	8004f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f72:	4b56      	ldr	r3, [pc, #344]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	4953      	ldr	r1, [pc, #332]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	4b4d      	ldr	r3, [pc, #308]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d908      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f023 020f 	bic.w	r2, r3, #15
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4947      	ldr	r1, [pc, #284]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d055      	beq.n	800506a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fbe:	4b43      	ldr	r3, [pc, #268]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	4940      	ldr	r1, [pc, #256]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d121      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0f6      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff0:	4b36      	ldr	r3, [pc, #216]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d115      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0ea      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005008:	4b30      	ldr	r3, [pc, #192]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0de      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005018:	4b2c      	ldr	r3, [pc, #176]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0d6      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005028:	4b28      	ldr	r3, [pc, #160]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f023 0207 	bic.w	r2, r3, #7
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4925      	ldr	r1, [pc, #148]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8005036:	4313      	orrs	r3, r2
 8005038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503a:	f7fc fb5d 	bl	80016f8 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005040:	e00a      	b.n	8005058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005042:	f7fc fb59 	bl	80016f8 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0be      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005058:	4b1c      	ldr	r3, [pc, #112]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	429a      	cmp	r2, r3
 8005068:	d1eb      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d010      	beq.n	8005098 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	4b14      	ldr	r3, [pc, #80]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	429a      	cmp	r2, r3
 8005084:	d208      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005086:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f023 020f 	bic.w	r2, r3, #15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	490e      	ldr	r1, [pc, #56]	@ (80050cc <HAL_RCC_ClockConfig+0x244>)
 8005094:	4313      	orrs	r3, r2
 8005096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d214      	bcs.n	80050d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 020f 	bic.w	r2, r3, #15
 80050ae:	4906      	ldr	r1, [pc, #24]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b04      	ldr	r3, [pc, #16]	@ (80050c8 <HAL_RCC_ClockConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e086      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
 80050c8:	52002000 	.word	0x52002000
 80050cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d010      	beq.n	80050fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	4b3f      	ldr	r3, [pc, #252]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d208      	bcs.n	80050fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050ec:	4b3c      	ldr	r3, [pc, #240]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	4939      	ldr	r1, [pc, #228]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d010      	beq.n	800512c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	4b34      	ldr	r3, [pc, #208]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005116:	429a      	cmp	r2, r3
 8005118:	d208      	bcs.n	800512c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	492e      	ldr	r1, [pc, #184]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005128:	4313      	orrs	r3, r2
 800512a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	4b28      	ldr	r3, [pc, #160]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005144:	429a      	cmp	r2, r3
 8005146:	d208      	bcs.n	800515a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005148:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	4922      	ldr	r1, [pc, #136]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005156:	4313      	orrs	r3, r2
 8005158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d010      	beq.n	8005188 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	4b1d      	ldr	r3, [pc, #116]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005172:	429a      	cmp	r2, r3
 8005174:	d208      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005176:	4b1a      	ldr	r3, [pc, #104]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4917      	ldr	r1, [pc, #92]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005184:	4313      	orrs	r3, r2
 8005186:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005188:	f000 f834 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b14      	ldr	r3, [pc, #80]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	4912      	ldr	r1, [pc, #72]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051a6:	4b0e      	ldr	r3, [pc, #56]	@ (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	4a0d      	ldr	r2, [pc, #52]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80051b0:	5cd3      	ldrb	r3, [r2, r3]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	4a0a      	ldr	r2, [pc, #40]	@ (80051e8 <HAL_RCC_ClockConfig+0x360>)
 80051be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051c0:	4a0a      	ldr	r2, [pc, #40]	@ (80051ec <HAL_RCC_ClockConfig+0x364>)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <HAL_RCC_ClockConfig+0x368>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc fa4a 	bl	8001664 <HAL_InitTick>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	0800cf88 	.word	0x0800cf88
 80051e8:	2400000c 	.word	0x2400000c
 80051ec:	24000008 	.word	0x24000008
 80051f0:	24000010 	.word	0x24000010

080051f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b089      	sub	sp, #36	@ 0x24
 80051f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051fa:	4bb3      	ldr	r3, [pc, #716]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005202:	2b18      	cmp	r3, #24
 8005204:	f200 8155 	bhi.w	80054b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005275 	.word	0x08005275
 8005214:	080054b3 	.word	0x080054b3
 8005218:	080054b3 	.word	0x080054b3
 800521c:	080054b3 	.word	0x080054b3
 8005220:	080054b3 	.word	0x080054b3
 8005224:	080054b3 	.word	0x080054b3
 8005228:	080054b3 	.word	0x080054b3
 800522c:	080054b3 	.word	0x080054b3
 8005230:	0800529b 	.word	0x0800529b
 8005234:	080054b3 	.word	0x080054b3
 8005238:	080054b3 	.word	0x080054b3
 800523c:	080054b3 	.word	0x080054b3
 8005240:	080054b3 	.word	0x080054b3
 8005244:	080054b3 	.word	0x080054b3
 8005248:	080054b3 	.word	0x080054b3
 800524c:	080054b3 	.word	0x080054b3
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080054b3 	.word	0x080054b3
 8005258:	080054b3 	.word	0x080054b3
 800525c:	080054b3 	.word	0x080054b3
 8005260:	080054b3 	.word	0x080054b3
 8005264:	080054b3 	.word	0x080054b3
 8005268:	080054b3 	.word	0x080054b3
 800526c:	080054b3 	.word	0x080054b3
 8005270:	080052a7 	.word	0x080052a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005274:	4b94      	ldr	r3, [pc, #592]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005280:	4b91      	ldr	r3, [pc, #580]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	4a90      	ldr	r2, [pc, #576]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005292:	e111      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005294:	4b8d      	ldr	r3, [pc, #564]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005296:	61bb      	str	r3, [r7, #24]
      break;
 8005298:	e10e      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800529a:	4b8d      	ldr	r3, [pc, #564]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800529c:	61bb      	str	r3, [r7, #24]
      break;
 800529e:	e10b      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052a0:	4b8c      	ldr	r3, [pc, #560]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052a2:	61bb      	str	r3, [r7, #24]
      break;
 80052a4:	e108      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a6:	4b88      	ldr	r3, [pc, #544]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052b0:	4b85      	ldr	r3, [pc, #532]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052bc:	4b82      	ldr	r3, [pc, #520]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052c6:	4b80      	ldr	r3, [pc, #512]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80e1 	beq.w	80054ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f000 8083 	beq.w	80053f8 <HAL_RCC_GetSysClockFreq+0x204>
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f200 80a1 	bhi.w	800543c <HAL_RCC_GetSysClockFreq+0x248>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x114>
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d056      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005306:	e099      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005308:	4b6f      	ldr	r3, [pc, #444]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02d      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005314:	4b6c      	ldr	r3, [pc, #432]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	4a6b      	ldr	r2, [pc, #428]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b62      	ldr	r3, [pc, #392]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005352:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800536e:	e087      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80054dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b51      	ldr	r3, [pc, #324]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a02 	vldr	s12, [r7, #8]
 8005396:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053b2:	e065      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80054e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b40      	ldr	r3, [pc, #256]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053f6:	e043      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80054e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b2f      	ldr	r3, [pc, #188]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a02 	vldr	s12, [r7, #8]
 800541e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800543a:	e021      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80054e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005462:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800547e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005480:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005484:	0a5b      	lsrs	r3, r3, #9
 8005486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800548a:	3301      	adds	r3, #1
 800548c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005498:	edd7 6a07 	vldr	s13, [r7, #28]
 800549c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a4:	ee17 3a90 	vmov	r3, s15
 80054a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054aa:	e005      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61bb      	str	r3, [r7, #24]
      break;
 80054b0:	e002      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054b2:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054b4:	61bb      	str	r3, [r7, #24]
      break;
 80054b6:	bf00      	nop
  }

  return sysclockfreq;
 80054b8:	69bb      	ldr	r3, [r7, #24]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3724      	adds	r7, #36	@ 0x24
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	58024400 	.word	0x58024400
 80054cc:	03d09000 	.word	0x03d09000
 80054d0:	003d0900 	.word	0x003d0900
 80054d4:	017d7840 	.word	0x017d7840
 80054d8:	46000000 	.word	0x46000000
 80054dc:	4c742400 	.word	0x4c742400
 80054e0:	4a742400 	.word	0x4a742400
 80054e4:	4bbebc20 	.word	0x4bbebc20

080054e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054ee:	f7ff fe81 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <HAL_RCC_GetHCLKFreq+0x50>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	490f      	ldr	r1, [pc, #60]	@ (800553c <HAL_RCC_GetHCLKFreq+0x54>)
 8005500:	5ccb      	ldrb	r3, [r1, r3]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800550c:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <HAL_RCC_GetHCLKFreq+0x50>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	4a09      	ldr	r2, [pc, #36]	@ (800553c <HAL_RCC_GetHCLKFreq+0x54>)
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	4a07      	ldr	r2, [pc, #28]	@ (8005540 <HAL_RCC_GetHCLKFreq+0x58>)
 8005524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005526:	4a07      	ldr	r2, [pc, #28]	@ (8005544 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800552c:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <HAL_RCC_GetHCLKFreq+0x58>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	58024400 	.word	0x58024400
 800553c:	0800cf88 	.word	0x0800cf88
 8005540:	2400000c 	.word	0x2400000c
 8005544:	24000008 	.word	0x24000008

08005548 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800554c:	b0c6      	sub	sp, #280	@ 0x118
 800554e:	af00      	add	r7, sp, #0
 8005550:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005554:	2300      	movs	r3, #0
 8005556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800555a:	2300      	movs	r3, #0
 800555c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800556c:	2500      	movs	r5, #0
 800556e:	ea54 0305 	orrs.w	r3, r4, r5
 8005572:	d049      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005578:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800557a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800557e:	d02f      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005580:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005584:	d828      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800558a:	d01a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800558c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005590:	d822      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800559a:	d007      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800559c:	e01c      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559e:	4bab      	ldr	r3, [pc, #684]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	4aaa      	ldr	r2, [pc, #680]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055aa:	e01a      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	3308      	adds	r3, #8
 80055b2:	2102      	movs	r1, #2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 f9bd 	bl	8006934 <RCCEx_PLL2_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055c0:	e00f      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c6:	3328      	adds	r3, #40	@ 0x28
 80055c8:	2102      	movs	r1, #2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fa64 	bl	8006a98 <RCCEx_PLL3_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055d6:	e004      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80055e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055ea:	4b98      	ldr	r3, [pc, #608]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f8:	4a94      	ldr	r2, [pc, #592]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80055fe:	e003      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005614:	f04f 0900 	mov.w	r9, #0
 8005618:	ea58 0309 	orrs.w	r3, r8, r9
 800561c:	d047      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005624:	2b04      	cmp	r3, #4
 8005626:	d82a      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005628:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005645 	.word	0x08005645
 8005634:	08005653 	.word	0x08005653
 8005638:	08005669 	.word	0x08005669
 800563c:	08005687 	.word	0x08005687
 8005640:	08005687 	.word	0x08005687
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005644:	4b81      	ldr	r3, [pc, #516]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	4a80      	ldr	r2, [pc, #512]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800564a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800564e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005650:	e01a      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005656:	3308      	adds	r3, #8
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f001 f96a 	bl	8006934 <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005666:	e00f      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566c:	3328      	adds	r3, #40	@ 0x28
 800566e:	2100      	movs	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f001 fa11 	bl	8006a98 <RCCEx_PLL3_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800567c:	e004      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005690:	4b6e      	ldr	r3, [pc, #440]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005694:	f023 0107 	bic.w	r1, r3, #7
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569e:	4a6b      	ldr	r2, [pc, #428]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80056a4:	e003      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80056ba:	f04f 0b00 	mov.w	fp, #0
 80056be:	ea5a 030b 	orrs.w	r3, sl, fp
 80056c2:	d05b      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056cc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80056d0:	d03b      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80056d2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80056d6:	d834      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056dc:	d037      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80056de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056e2:	d82e      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056e8:	d033      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80056ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056ee:	d828      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f4:	d01a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fa:	d822      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005704:	d007      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005706:	e01c      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005708:	4b50      	ldr	r3, [pc, #320]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	4a4f      	ldr	r2, [pc, #316]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800570e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005714:	e01e      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571a:	3308      	adds	r3, #8
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f001 f908 	bl	8006934 <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800572a:	e013      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800572c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005730:	3328      	adds	r3, #40	@ 0x28
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f001 f9af 	bl	8006a98 <RCCEx_PLL3_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005740:	e008      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005748:	e004      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800575c:	4b3b      	ldr	r3, [pc, #236]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800575e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005760:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800576c:	4a37      	ldr	r2, [pc, #220]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800576e:	430b      	orrs	r3, r1
 8005770:	6593      	str	r3, [r2, #88]	@ 0x58
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800577c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005792:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d05d      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80057a8:	d03b      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80057aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80057ae:	d834      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b4:	d037      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80057b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ba:	d82e      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057c0:	d033      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80057c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057c6:	d828      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057cc:	d01a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80057ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057d2:	d822      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80057d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057dc:	d007      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80057de:	e01c      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e0:	4b1a      	ldr	r3, [pc, #104]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	4a19      	ldr	r2, [pc, #100]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057ec:	e01e      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f2:	3308      	adds	r3, #8
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 f89c 	bl	8006934 <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005802:	e013      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005808:	3328      	adds	r3, #40	@ 0x28
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f001 f943 	bl	8006a98 <RCCEx_PLL3_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005818:	e008      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005820:	e004      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800582a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10d      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005838:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800583c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005840:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005844:	4a01      	ldr	r2, [pc, #4]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005846:	430b      	orrs	r3, r1
 8005848:	6593      	str	r3, [r2, #88]	@ 0x58
 800584a:	e005      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800584c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005854:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005864:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800586e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	d03a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	2b30      	cmp	r3, #48	@ 0x30
 8005880:	d01f      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005882:	2b30      	cmp	r3, #48	@ 0x30
 8005884:	d819      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005886:	2b20      	cmp	r3, #32
 8005888:	d00c      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800588a:	2b20      	cmp	r3, #32
 800588c:	d815      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d019      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005892:	2b10      	cmp	r3, #16
 8005894:	d111      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005896:	4baa      	ldr	r3, [pc, #680]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4aa9      	ldr	r2, [pc, #676]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800589c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	3308      	adds	r3, #8
 80058aa:	2102      	movs	r1, #2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 f841 	bl	8006934 <RCCEx_PLL2_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058d0:	4b9b      	ldr	r3, [pc, #620]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058de:	4a98      	ldr	r2, [pc, #608]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005904:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d051      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005914:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005918:	d035      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800591a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800591e:	d82e      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005920:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005924:	d031      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005926:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800592a:	d828      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800592c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005930:	d01a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005936:	d822      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005940:	d007      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005942:	e01c      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005944:	4b7e      	ldr	r3, [pc, #504]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	4a7d      	ldr	r2, [pc, #500]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800594e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005950:	e01c      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005956:	3308      	adds	r3, #8
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f000 ffea 	bl	8006934 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005966:	e011      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596c:	3328      	adds	r3, #40	@ 0x28
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f001 f891 	bl	8006a98 <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800597c:	e006      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005994:	4b6a      	ldr	r3, [pc, #424]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005998:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a2:	4a67      	ldr	r2, [pc, #412]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d053      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059dc:	d033      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80059de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059e2:	d82c      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059e8:	d02f      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80059ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059ee:	d826      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059f4:	d02b      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80059f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059fa:	d820      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a00:	d012      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a06:	d81a      	bhi.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d022      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a10:	d115      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a16:	3308      	adds	r3, #8
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 ff8a 	bl	8006934 <RCCEx_PLL2_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a26:	e015      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	3328      	adds	r3, #40	@ 0x28
 8005a2e:	2101      	movs	r1, #1
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f831 	bl	8006a98 <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005a46:	bf00      	nop
 8005a48:	e004      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a5c:	4b38      	ldr	r3, [pc, #224]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a6a:	4a35      	ldr	r2, [pc, #212]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a94:	460b      	mov	r3, r1
 8005a96:	4313      	orrs	r3, r2
 8005a98:	d058      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa6:	d033      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aac:	d82c      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab2:	d02f      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d826      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005abe:	d02b      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005ac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ac4:	d820      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aca:	d012      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad0:	d81a      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d022      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ada:	d115      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff25 	bl	8006934 <RCCEx_PLL2_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005af0:	e015      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af6:	3328      	adds	r3, #40	@ 0x28
 8005af8:	2101      	movs	r1, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ffcc 	bl	8006a98 <RCCEx_PLL3_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b06:	e00a      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b0e:	e006      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b10:	bf00      	nop
 8005b12:	e004      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b14:	bf00      	nop
 8005b16:	e002      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b18:	bf00      	nop
 8005b1a:	e000      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10e      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b36:	4a02      	ldr	r2, [pc, #8]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3c:	e006      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b3e:	bf00      	nop
 8005b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d037      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b76:	d00e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b7c:	d816      	bhi.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d018      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b86:	d111      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b88:	4bc4      	ldr	r3, [pc, #784]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	4ac3      	ldr	r2, [pc, #780]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b94:	e00f      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fec8 	bl	8006934 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bbe:	4bb7      	ldr	r3, [pc, #732]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bcc:	4ab3      	ldr	r2, [pc, #716]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd2:	e003      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005be8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d039      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d81c      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c06:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c49 	.word	0x08005c49
 8005c10:	08005c1d 	.word	0x08005c1d
 8005c14:	08005c2b 	.word	0x08005c2b
 8005c18:	08005c49 	.word	0x08005c49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b9f      	ldr	r3, [pc, #636]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c20:	4a9e      	ldr	r2, [pc, #632]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c28:	e00f      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2102      	movs	r1, #2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fe7e 	bl	8006934 <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c46:	e000      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c52:	4b92      	ldr	r3, [pc, #584]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c56:	f023 0103 	bic.w	r1, r3, #3
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c60:	4a8e      	ldr	r2, [pc, #568]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c62:	430b      	orrs	r3, r1
 8005c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c66:	e003      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f000 8099 	beq.w	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c92:	4b83      	ldr	r3, [pc, #524]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a82      	ldr	r2, [pc, #520]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c9e:	f7fb fd2b 	bl	80016f8 <HAL_GetTick>
 8005ca2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca8:	f7fb fd26 	bl	80016f8 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b64      	cmp	r3, #100	@ 0x64
 8005cb6:	d903      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cbe:	e005      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc0:	4b77      	ldr	r3, [pc, #476]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ed      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d173      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cd4:	4b71      	ldr	r3, [pc, #452]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ce0:	4053      	eors	r3, r2
 8005ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d015      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cea:	4b6c      	ldr	r3, [pc, #432]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cf6:	4b69      	ldr	r3, [pc, #420]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	4a68      	ldr	r2, [pc, #416]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d02:	4b66      	ldr	r3, [pc, #408]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d06:	4a65      	ldr	r2, [pc, #404]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d0e:	4a63      	ldr	r2, [pc, #396]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d22:	d118      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fb fce8 	bl	80016f8 <HAL_GetTick>
 8005d28:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d2c:	e00d      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2e:	f7fb fce3 	bl	80016f8 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d903      	bls.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005d48:	e005      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4a:	4b54      	ldr	r3, [pc, #336]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0eb      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005d56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d129      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d6e:	d10e      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005d70:	4b4a      	ldr	r3, [pc, #296]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d80:	091a      	lsrs	r2, r3, #4
 8005d82:	4b48      	ldr	r3, [pc, #288]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	4a45      	ldr	r2, [pc, #276]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6113      	str	r3, [r2, #16]
 8005d8c:	e005      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005d8e:	4b43      	ldr	r3, [pc, #268]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	4a42      	ldr	r2, [pc, #264]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d98:	6113      	str	r3, [r2, #16]
 8005d9a:	4b40      	ldr	r3, [pc, #256]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005daa:	4a3c      	ldr	r2, [pc, #240]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db0:	e008      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005db2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005db6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005dba:	e003      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f002 0301 	and.w	r3, r2, #1
 8005dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005dda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f000 808f 	beq.w	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dec:	2b28      	cmp	r3, #40	@ 0x28
 8005dee:	d871      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005df0:	a201      	add	r2, pc, #4	@ (adr r2, 8005df8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005edd 	.word	0x08005edd
 8005dfc:	08005ed5 	.word	0x08005ed5
 8005e00:	08005ed5 	.word	0x08005ed5
 8005e04:	08005ed5 	.word	0x08005ed5
 8005e08:	08005ed5 	.word	0x08005ed5
 8005e0c:	08005ed5 	.word	0x08005ed5
 8005e10:	08005ed5 	.word	0x08005ed5
 8005e14:	08005ed5 	.word	0x08005ed5
 8005e18:	08005ea9 	.word	0x08005ea9
 8005e1c:	08005ed5 	.word	0x08005ed5
 8005e20:	08005ed5 	.word	0x08005ed5
 8005e24:	08005ed5 	.word	0x08005ed5
 8005e28:	08005ed5 	.word	0x08005ed5
 8005e2c:	08005ed5 	.word	0x08005ed5
 8005e30:	08005ed5 	.word	0x08005ed5
 8005e34:	08005ed5 	.word	0x08005ed5
 8005e38:	08005ebf 	.word	0x08005ebf
 8005e3c:	08005ed5 	.word	0x08005ed5
 8005e40:	08005ed5 	.word	0x08005ed5
 8005e44:	08005ed5 	.word	0x08005ed5
 8005e48:	08005ed5 	.word	0x08005ed5
 8005e4c:	08005ed5 	.word	0x08005ed5
 8005e50:	08005ed5 	.word	0x08005ed5
 8005e54:	08005ed5 	.word	0x08005ed5
 8005e58:	08005edd 	.word	0x08005edd
 8005e5c:	08005ed5 	.word	0x08005ed5
 8005e60:	08005ed5 	.word	0x08005ed5
 8005e64:	08005ed5 	.word	0x08005ed5
 8005e68:	08005ed5 	.word	0x08005ed5
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08005ed5 	.word	0x08005ed5
 8005e78:	08005edd 	.word	0x08005edd
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005ed5 	.word	0x08005ed5
 8005e88:	08005ed5 	.word	0x08005ed5
 8005e8c:	08005ed5 	.word	0x08005ed5
 8005e90:	08005ed5 	.word	0x08005ed5
 8005e94:	08005ed5 	.word	0x08005ed5
 8005e98:	08005edd 	.word	0x08005edd
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	58024800 	.word	0x58024800
 8005ea4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	3308      	adds	r3, #8
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fd3f 	bl	8006934 <RCCEx_PLL2_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ebc:	e00f      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec2:	3328      	adds	r3, #40	@ 0x28
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fde6 	bl	8006a98 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ed2:	e004      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ee6:	4bbf      	ldr	r3, [pc, #764]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ef4:	4abb      	ldr	r2, [pc, #748]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f002 0302 	and.w	r3, r2, #2
 8005f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	d041      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d824      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f63 	.word	0x08005f63
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	08005f81 	.word	0x08005f81
 8005f48:	08005f81 	.word	0x08005f81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f50:	3308      	adds	r3, #8
 8005f52:	2101      	movs	r1, #1
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fced 	bl	8006934 <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f60:	e00f      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f66:	3328      	adds	r3, #40	@ 0x28
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fd94 	bl	8006a98 <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f76:	e004      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f8a:	4b96      	ldr	r3, [pc, #600]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8e:	f023 0107 	bic.w	r1, r3, #7
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f98:	4a92      	ldr	r2, [pc, #584]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f9e:	e003      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f002 0304 	and.w	r3, r2, #4
 8005fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fbe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	d044      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d825      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08006029 	.word	0x08006029
 8005fe0:	08005ff5 	.word	0x08005ff5
 8005fe4:	0800600b 	.word	0x0800600b
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08006029 	.word	0x08006029
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fc99 	bl	8006934 <RCCEx_PLL2_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006008:	e00f      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800600a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600e:	3328      	adds	r3, #40	@ 0x28
 8006010:	2101      	movs	r1, #1
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fd40 	bl	8006a98 <RCCEx_PLL3_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800601e:	e004      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006026:	e000      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006032:	4b6c      	ldr	r3, [pc, #432]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006036:	f023 0107 	bic.w	r1, r3, #7
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006042:	4a68      	ldr	r2, [pc, #416]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006044:	430b      	orrs	r3, r1
 8006046:	6593      	str	r3, [r2, #88]	@ 0x58
 8006048:	e003      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800604e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f002 0320 	and.w	r3, r2, #32
 800605e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006062:	2300      	movs	r3, #0
 8006064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006068:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800606c:	460b      	mov	r3, r1
 800606e:	4313      	orrs	r3, r2
 8006070:	d055      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800607a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607e:	d033      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006084:	d82c      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608a:	d02f      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006090:	d826      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006096:	d02b      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006098:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800609c:	d820      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a2:	d012      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80060a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a8:	d81a      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d022      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80060ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060b2:	d115      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b8:	3308      	adds	r3, #8
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fc39 	bl	8006934 <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060c8:	e015      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ce:	3328      	adds	r3, #40	@ 0x28
 80060d0:	2102      	movs	r1, #2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fce0 	bl	8006a98 <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060de:	e00a      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060e6:	e006      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80060e8:	bf00      	nop
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060fe:	4b39      	ldr	r3, [pc, #228]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006102:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800610e:	4a35      	ldr	r2, [pc, #212]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006110:	430b      	orrs	r3, r1
 8006112:	6553      	str	r3, [r2, #84]	@ 0x54
 8006114:	e003      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800611a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800611e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800612a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006134:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006138:	460b      	mov	r3, r1
 800613a:	4313      	orrs	r3, r2
 800613c:	d058      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006146:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800614a:	d033      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800614c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006150:	d82c      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	d02f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615c:	d826      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800615e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006162:	d02b      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006168:	d820      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800616a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800616e:	d012      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006174:	d81a      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d022      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800617e:	d115      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006184:	3308      	adds	r3, #8
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fbd3 	bl	8006934 <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006194:	e015      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619a:	3328      	adds	r3, #40	@ 0x28
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fc7a 	bl	8006a98 <RCCEx_PLL3_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061aa:	e00a      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061b2:	e006      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80061b4:	bf00      	nop
 80061b6:	e004      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80061b8:	bf00      	nop
 80061ba:	e002      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80061bc:	bf00      	nop
 80061be:	e000      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80061c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10e      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ca:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061da:	4a02      	ldr	r2, [pc, #8]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e0:	e006      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006206:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	d055      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006214:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006218:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800621c:	d033      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800621e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006222:	d82c      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006228:	d02f      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622e:	d826      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006230:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006234:	d02b      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006236:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800623a:	d820      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800623c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006240:	d012      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006246:	d81a      	bhi.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d022      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006250:	d115      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	3308      	adds	r3, #8
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fb6a 	bl	8006934 <RCCEx_PLL2_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006266:	e015      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626c:	3328      	adds	r3, #40	@ 0x28
 800626e:	2102      	movs	r1, #2
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fc11 	bl	8006a98 <RCCEx_PLL3_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800627c:	e00a      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006286:	bf00      	nop
 8006288:	e004      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800628a:	bf00      	nop
 800628c:	e002      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800629c:	4ba0      	ldr	r3, [pc, #640]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800629e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062ac:	4a9c      	ldr	r2, [pc, #624]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 0308 	and.w	r3, r2, #8
 80062c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d01e      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	3328      	adds	r3, #40	@ 0x28
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fbd0 	bl	8006a98 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006304:	4b86      	ldr	r3, [pc, #536]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006308:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006314:	4a82      	ldr	r2, [pc, #520]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006316:	430b      	orrs	r3, r1
 8006318:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f002 0310 	and.w	r3, r2, #16
 8006326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800632a:	2300      	movs	r3, #0
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006330:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006334:	460b      	mov	r3, r1
 8006336:	4313      	orrs	r3, r2
 8006338:	d01e      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006346:	d10c      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634c:	3328      	adds	r3, #40	@ 0x28
 800634e:	2102      	movs	r1, #2
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fba1 	bl	8006a98 <RCCEx_PLL3_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006362:	4b6f      	ldr	r3, [pc, #444]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006366:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006372:	4a6b      	ldr	r2, [pc, #428]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006386:	2300      	movs	r3, #0
 8006388:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800638a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	d03e      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800639c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a0:	d022      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80063a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a6:	d81b      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b0:	d00b      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80063b2:	e015      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b8:	3308      	adds	r3, #8
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fab9 	bl	8006934 <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063c8:	e00f      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	3328      	adds	r3, #40	@ 0x28
 80063d0:	2102      	movs	r1, #2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fb60 	bl	8006a98 <RCCEx_PLL3_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063de:	e004      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063e6:	e000      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80063e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006402:	4a47      	ldr	r2, [pc, #284]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006404:	430b      	orrs	r3, r1
 8006406:	6593      	str	r3, [r2, #88]	@ 0x58
 8006408:	e003      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800640e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800641e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006420:	2300      	movs	r3, #0
 8006422:	677b      	str	r3, [r7, #116]	@ 0x74
 8006424:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006428:	460b      	mov	r3, r1
 800642a:	4313      	orrs	r3, r2
 800642c:	d03b      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006436:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800643a:	d01f      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800643c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006440:	d818      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006446:	d003      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800644c:	d007      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800644e:	e011      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006450:	4b33      	ldr	r3, [pc, #204]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	4a32      	ldr	r2, [pc, #200]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800645a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800645c:	e00f      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006462:	3328      	adds	r3, #40	@ 0x28
 8006464:	2101      	movs	r1, #1
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb16 	bl	8006a98 <RCCEx_PLL3_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006472:	e004      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800647a:	e000      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800647c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006486:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800648e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006496:	4a22      	ldr	r2, [pc, #136]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006498:	430b      	orrs	r3, r1
 800649a:	6553      	str	r3, [r2, #84]	@ 0x54
 800649c:	e003      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064b4:	2300      	movs	r3, #0
 80064b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064bc:	460b      	mov	r3, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	d034      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d0:	d007      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80064d2:	e011      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d4:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	4a11      	ldr	r2, [pc, #68]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064e0:	e00e      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	3308      	adds	r3, #8
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fa22 	bl	8006934 <RCCEx_PLL2_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064f6:	e003      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10d      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800650a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800650c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006516:	4a02      	ldr	r2, [pc, #8]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006518:	430b      	orrs	r3, r1
 800651a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800651c:	e006      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800651e:	bf00      	nop
 8006520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006538:	663b      	str	r3, [r7, #96]	@ 0x60
 800653a:	2300      	movs	r3, #0
 800653c:	667b      	str	r3, [r7, #100]	@ 0x64
 800653e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006542:	460b      	mov	r3, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	d00c      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654c:	3328      	adds	r3, #40	@ 0x28
 800654e:	2102      	movs	r1, #2
 8006550:	4618      	mov	r0, r3
 8006552:	f000 faa1 	bl	8006a98 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800656e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006570:	2300      	movs	r3, #0
 8006572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006574:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006578:	460b      	mov	r3, r1
 800657a:	4313      	orrs	r3, r2
 800657c:	d036      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006588:	d018      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800658a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800658e:	d811      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006594:	d014      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659a:	d80b      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d011      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80065a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a4:	d106      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a6:	4bb7      	ldr	r3, [pc, #732]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	4ab6      	ldr	r2, [pc, #728]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065b2:	e008      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ba:	e004      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80065bc:	bf00      	nop
 80065be:	e002      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80065c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065ce:	4bad      	ldr	r3, [pc, #692]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065dc:	4aa9      	ldr	r2, [pc, #676]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80065e2:	e003      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80065fa:	2300      	movs	r3, #0
 80065fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80065fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d009      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006608:	4b9e      	ldr	r3, [pc, #632]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800660a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800660c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006616:	4a9b      	ldr	r2, [pc, #620]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006618:	430b      	orrs	r3, r1
 800661a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800662a:	2300      	movs	r3, #0
 800662c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800662e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006638:	4b92      	ldr	r3, [pc, #584]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800663a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006646:	4a8f      	ldr	r2, [pc, #572]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800664c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006658:	643b      	str	r3, [r7, #64]	@ 0x40
 800665a:	2300      	movs	r3, #0
 800665c:	647b      	str	r3, [r7, #68]	@ 0x44
 800665e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006662:	460b      	mov	r3, r1
 8006664:	4313      	orrs	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006668:	4b86      	ldr	r3, [pc, #536]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	4a85      	ldr	r2, [pc, #532]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800666e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006672:	6113      	str	r3, [r2, #16]
 8006674:	4b83      	ldr	r3, [pc, #524]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006676:	6919      	ldr	r1, [r3, #16]
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006680:	4a80      	ldr	r2, [pc, #512]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006682:	430b      	orrs	r3, r1
 8006684:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006698:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066a2:	4b78      	ldr	r3, [pc, #480]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b0:	4a74      	ldr	r2, [pc, #464]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066b2:	430b      	orrs	r3, r1
 80066b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c4:	2300      	movs	r3, #0
 80066c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d00a      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e2:	4a68      	ldr	r2, [pc, #416]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	2100      	movs	r1, #0
 80066f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066fe:	460b      	mov	r3, r1
 8006700:	4313      	orrs	r3, r2
 8006702:	d011      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006708:	3308      	adds	r3, #8
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f911 	bl	8006934 <RCCEx_PLL2_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	2100      	movs	r1, #0
 8006732:	6239      	str	r1, [r7, #32]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
 800673a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d011      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	3308      	adds	r3, #8
 800674a:	2101      	movs	r1, #1
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f8f1 	bl	8006934 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	2100      	movs	r1, #0
 8006772:	61b9      	str	r1, [r7, #24]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	d011      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	3308      	adds	r3, #8
 800678a:	2102      	movs	r1, #2
 800678c:	4618      	mov	r0, r3
 800678e:	f000 f8d1 	bl	8006934 <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	2100      	movs	r1, #0
 80067b2:	6139      	str	r1, [r7, #16]
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d011      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c8:	3328      	adds	r3, #40	@ 0x28
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f963 	bl	8006a98 <RCCEx_PLL3_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80067d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	2100      	movs	r1, #0
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d011      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006808:	3328      	adds	r3, #40	@ 0x28
 800680a:	2101      	movs	r1, #1
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f943 	bl	8006a98 <RCCEx_PLL3_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006824:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	2100      	movs	r1, #0
 8006832:	6039      	str	r1, [r7, #0]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800683e:	460b      	mov	r3, r1
 8006840:	4313      	orrs	r3, r2
 8006842:	d011      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006848:	3328      	adds	r3, #40	@ 0x28
 800684a:	2102      	movs	r1, #2
 800684c:	4618      	mov	r0, r3
 800684e:	f000 f923 	bl	8006a98 <RCCEx_PLL3_Config>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006864:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006868:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e000      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
}
 8006876:	4618      	mov	r0, r3
 8006878:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800687c:	46bd      	mov	sp, r7
 800687e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006882:	bf00      	nop
 8006884:	58024400 	.word	0x58024400

08006888 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *pInit)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006890:	4b26      	ldr	r3, [pc, #152]	@ (800692c <HAL_RCCEx_CRSConfig+0xa4>)
 8006892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006896:	4a25      	ldr	r2, [pc, #148]	@ (800692c <HAL_RCCEx_CRSConfig+0xa4>)
 8006898:	f043 0302 	orr.w	r3, r3, #2
 800689c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80068a0:	4b22      	ldr	r3, [pc, #136]	@ (800692c <HAL_RCCEx_CRSConfig+0xa4>)
 80068a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a6:	4a21      	ldr	r2, [pc, #132]	@ (800692c <HAL_RCCEx_CRSConfig+0xa4>)
 80068a8:	f023 0302 	bic.w	r3, r3, #2
 80068ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80068b0:	f7fa ff52 	bl	8001758 <HAL_GetREVID>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d80b      	bhi.n	80068d6 <HAL_RCCEx_CRSConfig+0x4e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068c6:	d106      	bne.n	80068d6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e008      	b.n	80068e8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80068fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006930 <HAL_RCCEx_CRSConfig+0xa8>)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8006904:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <HAL_RCCEx_CRSConfig+0xa8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	4907      	ldr	r1, [pc, #28]	@ (8006930 <HAL_RCCEx_CRSConfig+0xa8>)
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8006918:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <HAL_RCCEx_CRSConfig+0xa8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a04      	ldr	r2, [pc, #16]	@ (8006930 <HAL_RCCEx_CRSConfig+0xa8>)
 800691e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006922:	6013      	str	r3, [r2, #0]
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	58024400 	.word	0x58024400
 8006930:	40008400 	.word	0x40008400

08006934 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006942:	4b53      	ldr	r3, [pc, #332]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b03      	cmp	r3, #3
 800694c:	d101      	bne.n	8006952 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e099      	b.n	8006a86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006952:	4b4f      	ldr	r3, [pc, #316]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a4e      	ldr	r2, [pc, #312]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006958:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800695c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695e:	f7fa fecb 	bl	80016f8 <HAL_GetTick>
 8006962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006964:	e008      	b.n	8006978 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006966:	f7fa fec7 	bl	80016f8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e086      	b.n	8006a86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006978:	4b45      	ldr	r3, [pc, #276]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f0      	bne.n	8006966 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006984:	4b42      	ldr	r3, [pc, #264]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006988:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	031b      	lsls	r3, r3, #12
 8006992:	493f      	ldr	r1, [pc, #252]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006994:	4313      	orrs	r3, r2
 8006996:	628b      	str	r3, [r1, #40]	@ 0x28
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	3b01      	subs	r3, #1
 800699e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	025b      	lsls	r3, r3, #9
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	041b      	lsls	r3, r3, #16
 80069b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	061b      	lsls	r3, r3, #24
 80069c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069c8:	4931      	ldr	r1, [pc, #196]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069ce:	4b30      	ldr	r3, [pc, #192]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	492d      	ldr	r1, [pc, #180]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	f023 0220 	bic.w	r2, r3, #32
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	4928      	ldr	r1, [pc, #160]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069f2:	4b27      	ldr	r3, [pc, #156]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	4a26      	ldr	r2, [pc, #152]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 80069f8:	f023 0310 	bic.w	r3, r3, #16
 80069fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069fe:	4b24      	ldr	r3, [pc, #144]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a02:	4b24      	ldr	r3, [pc, #144]	@ (8006a94 <RCCEx_PLL2_Config+0x160>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	69d2      	ldr	r2, [r2, #28]
 8006a0a:	00d2      	lsls	r2, r2, #3
 8006a0c:	4920      	ldr	r1, [pc, #128]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a12:	4b1f      	ldr	r3, [pc, #124]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	4a1e      	ldr	r2, [pc, #120]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	f043 0310 	orr.w	r3, r3, #16
 8006a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a24:	4b1a      	ldr	r3, [pc, #104]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	4a19      	ldr	r2, [pc, #100]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a30:	e00f      	b.n	8006a52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d106      	bne.n	8006a46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a38:	4b15      	ldr	r3, [pc, #84]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	4a14      	ldr	r2, [pc, #80]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a44:	e005      	b.n	8006a52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a46:	4b12      	ldr	r3, [pc, #72]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	4a11      	ldr	r2, [pc, #68]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a52:	4b0f      	ldr	r3, [pc, #60]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a0e      	ldr	r2, [pc, #56]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a5e:	f7fa fe4b 	bl	80016f8 <HAL_GetTick>
 8006a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a64:	e008      	b.n	8006a78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a66:	f7fa fe47 	bl	80016f8 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e006      	b.n	8006a86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <RCCEx_PLL2_Config+0x15c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f0      	beq.n	8006a66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	58024400 	.word	0x58024400
 8006a94:	ffff0007 	.word	0xffff0007

08006a98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aa6:	4b53      	ldr	r3, [pc, #332]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d101      	bne.n	8006ab6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e099      	b.n	8006bea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a4e      	ldr	r2, [pc, #312]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac2:	f7fa fe19 	bl	80016f8 <HAL_GetTick>
 8006ac6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ac8:	e008      	b.n	8006adc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006aca:	f7fa fe15 	bl	80016f8 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e086      	b.n	8006bea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006adc:	4b45      	ldr	r3, [pc, #276]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1f0      	bne.n	8006aca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ae8:	4b42      	ldr	r3, [pc, #264]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	051b      	lsls	r3, r3, #20
 8006af6:	493f      	ldr	r1, [pc, #252]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	628b      	str	r3, [r1, #40]	@ 0x28
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	025b      	lsls	r3, r3, #9
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b2c:	4931      	ldr	r1, [pc, #196]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b32:	4b30      	ldr	r3, [pc, #192]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	492d      	ldr	r1, [pc, #180]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b44:	4b2b      	ldr	r3, [pc, #172]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	4928      	ldr	r1, [pc, #160]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b56:	4b27      	ldr	r3, [pc, #156]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	4a26      	ldr	r2, [pc, #152]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b62:	4b24      	ldr	r3, [pc, #144]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b66:	4b24      	ldr	r3, [pc, #144]	@ (8006bf8 <RCCEx_PLL3_Config+0x160>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	69d2      	ldr	r2, [r2, #28]
 8006b6e:	00d2      	lsls	r2, r2, #3
 8006b70:	4920      	ldr	r1, [pc, #128]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b76:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b88:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	4a19      	ldr	r2, [pc, #100]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006b92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b94:	e00f      	b.n	8006bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d106      	bne.n	8006baa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b9c:	4b15      	ldr	r3, [pc, #84]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba0:	4a14      	ldr	r2, [pc, #80]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006ba2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ba8:	e005      	b.n	8006bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006baa:	4b12      	ldr	r3, [pc, #72]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	4a11      	ldr	r2, [pc, #68]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006bb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc2:	f7fa fd99 	bl	80016f8 <HAL_GetTick>
 8006bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bc8:	e008      	b.n	8006bdc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bca:	f7fa fd95 	bl	80016f8 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e006      	b.n	8006bea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bdc:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <RCCEx_PLL3_Config+0x15c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	58024400 	.word	0x58024400
 8006bf8:	ffff0007 	.word	0xffff0007

08006bfc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e03e      	b.n	8006c90 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7fa fb88 	bl	800133c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3308      	adds	r3, #8
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f001 faec 	bl	8008214 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	461a      	mov	r2, r3
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	f001 fb74 	bl	8008334 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6858      	ldr	r0, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	f001 fbb5 	bl	80083c8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	6892      	ldr	r2, [r2, #8]
 8006c66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	6892      	ldr	r2, [r2, #8]
 8006c72:	f041 0101 	orr.w	r1, r1, #1
 8006c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <HAL_SRAM_Init+0x9c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a06      	ldr	r2, [pc, #24]	@ (8006c98 <HAL_SRAM_Init+0x9c>)
 8006c80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c84:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	52004000 	.word	0x52004000

08006c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e049      	b.n	8006d42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fa f9b0 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f000 fd9a 	bl	8007814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d001      	beq.n	8006d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e05e      	b.n	8006e22 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a2b      	ldr	r2, [pc, #172]	@ (8006e30 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d02c      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8e:	d027      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a27      	ldr	r2, [pc, #156]	@ (8006e34 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d022      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a26      	ldr	r2, [pc, #152]	@ (8006e38 <HAL_TIM_Base_Start_IT+0xec>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d01d      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a24      	ldr	r2, [pc, #144]	@ (8006e3c <HAL_TIM_Base_Start_IT+0xf0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d018      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a23      	ldr	r2, [pc, #140]	@ (8006e40 <HAL_TIM_Base_Start_IT+0xf4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a21      	ldr	r2, [pc, #132]	@ (8006e44 <HAL_TIM_Base_Start_IT+0xf8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00e      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a20      	ldr	r2, [pc, #128]	@ (8006e48 <HAL_TIM_Base_Start_IT+0xfc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8006e4c <HAL_TIM_Base_Start_IT+0x100>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0x94>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1d      	ldr	r2, [pc, #116]	@ (8006e50 <HAL_TIM_Base_Start_IT+0x104>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d115      	bne.n	8006e0c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e54 <HAL_TIM_Base_Start_IT+0x108>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b06      	cmp	r3, #6
 8006df0:	d015      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0xd2>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df8:	d011      	beq.n	8006e1e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0201 	orr.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0a:	e008      	b.n	8006e1e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	e000      	b.n	8006e20 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40010400 	.word	0x40010400
 8006e44:	40001800 	.word	0x40001800
 8006e48:	40014000 	.word	0x40014000
 8006e4c:	4000e000 	.word	0x4000e000
 8006e50:	4000e400 	.word	0x4000e400
 8006e54:	00010007 	.word	0x00010007

08006e58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6a1a      	ldr	r2, [r3, #32]
 8006e76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10f      	bne.n	8006ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a1a      	ldr	r2, [r3, #32]
 8006e86:	f240 4344 	movw	r3, #1092	@ 0x444
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e049      	b.n	8006f5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fa f8c9 	bl	8001074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f000 fc8d 	bl	8007814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_TIM_PWM_Start+0x24>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	bf14      	ite	ne
 8006f80:	2301      	movne	r3, #1
 8006f82:	2300      	moveq	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	e03c      	b.n	8007002 <HAL_TIM_PWM_Start+0x9e>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d109      	bne.n	8006fa2 <HAL_TIM_PWM_Start+0x3e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	e02f      	b.n	8007002 <HAL_TIM_PWM_Start+0x9e>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d109      	bne.n	8006fbc <HAL_TIM_PWM_Start+0x58>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e022      	b.n	8007002 <HAL_TIM_PWM_Start+0x9e>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b0c      	cmp	r3, #12
 8006fc0:	d109      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0x72>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	e015      	b.n	8007002 <HAL_TIM_PWM_Start+0x9e>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d109      	bne.n	8006ff0 <HAL_TIM_PWM_Start+0x8c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e008      	b.n	8007002 <HAL_TIM_PWM_Start+0x9e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e0ab      	b.n	8007162 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0xb6>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007018:	e023      	b.n	8007062 <HAL_TIM_PWM_Start+0xfe>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0xc6>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007028:	e01b      	b.n	8007062 <HAL_TIM_PWM_Start+0xfe>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d104      	bne.n	800703a <HAL_TIM_PWM_Start+0xd6>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007038:	e013      	b.n	8007062 <HAL_TIM_PWM_Start+0xfe>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b0c      	cmp	r3, #12
 800703e:	d104      	bne.n	800704a <HAL_TIM_PWM_Start+0xe6>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007048:	e00b      	b.n	8007062 <HAL_TIM_PWM_Start+0xfe>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b10      	cmp	r3, #16
 800704e:	d104      	bne.n	800705a <HAL_TIM_PWM_Start+0xf6>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007058:	e003      	b.n	8007062 <HAL_TIM_PWM_Start+0xfe>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2201      	movs	r2, #1
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fff2 	bl	8008054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a3d      	ldr	r2, [pc, #244]	@ (800716c <HAL_TIM_PWM_Start+0x208>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x13e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a3c      	ldr	r2, [pc, #240]	@ (8007170 <HAL_TIM_PWM_Start+0x20c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x13e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a3a      	ldr	r2, [pc, #232]	@ (8007174 <HAL_TIM_PWM_Start+0x210>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x13e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a39      	ldr	r2, [pc, #228]	@ (8007178 <HAL_TIM_PWM_Start+0x214>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x13e>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a37      	ldr	r2, [pc, #220]	@ (800717c <HAL_TIM_PWM_Start+0x218>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_PWM_Start+0x142>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <HAL_TIM_PWM_Start+0x144>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2a      	ldr	r2, [pc, #168]	@ (800716c <HAL_TIM_PWM_Start+0x208>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d02c      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ce:	d027      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007180 <HAL_TIM_PWM_Start+0x21c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d022      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a29      	ldr	r2, [pc, #164]	@ (8007184 <HAL_TIM_PWM_Start+0x220>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d01d      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a27      	ldr	r2, [pc, #156]	@ (8007188 <HAL_TIM_PWM_Start+0x224>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d018      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007170 <HAL_TIM_PWM_Start+0x20c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d013      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a23      	ldr	r2, [pc, #140]	@ (800718c <HAL_TIM_PWM_Start+0x228>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00e      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1b      	ldr	r2, [pc, #108]	@ (8007174 <HAL_TIM_PWM_Start+0x210>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d009      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1f      	ldr	r2, [pc, #124]	@ (8007190 <HAL_TIM_PWM_Start+0x22c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d004      	beq.n	8007120 <HAL_TIM_PWM_Start+0x1bc>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1e      	ldr	r2, [pc, #120]	@ (8007194 <HAL_TIM_PWM_Start+0x230>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d115      	bne.n	800714c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	4b1c      	ldr	r3, [pc, #112]	@ (8007198 <HAL_TIM_PWM_Start+0x234>)
 8007128:	4013      	ands	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b06      	cmp	r3, #6
 8007130:	d015      	beq.n	800715e <HAL_TIM_PWM_Start+0x1fa>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007138:	d011      	beq.n	800715e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0201 	orr.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714a:	e008      	b.n	800715e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e000      	b.n	8007160 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40010400 	.word	0x40010400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800
 8007180:	40000400 	.word	0x40000400
 8007184:	40000800 	.word	0x40000800
 8007188:	40000c00 	.word	0x40000c00
 800718c:	40001800 	.word	0x40001800
 8007190:	4000e000 	.word	0x4000e000
 8007194:	4000e400 	.word	0x4000e400
 8007198:	00010007 	.word	0x00010007

0800719c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d020      	beq.n	8007200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0202 	mvn.w	r2, #2
 80071d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 faf6 	bl	80077d8 <HAL_TIM_IC_CaptureCallback>
 80071ec:	e005      	b.n	80071fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fae8 	bl	80077c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 faf9 	bl	80077ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d020      	beq.n	800724c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01b      	beq.n	800724c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0204 	mvn.w	r2, #4
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fad0 	bl	80077d8 <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fac2 	bl	80077c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fad3 	bl	80077ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d020      	beq.n	8007298 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01b      	beq.n	8007298 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0208 	mvn.w	r2, #8
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 faaa 	bl	80077d8 <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa9c 	bl	80077c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 faad 	bl	80077ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d020      	beq.n	80072e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0210 	mvn.w	r2, #16
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2208      	movs	r2, #8
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa84 	bl	80077d8 <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa76 	bl	80077c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fa87 	bl	80077ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0201 	mvn.w	r2, #1
 8007300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7f9 fc44 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800732e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 ff5b 	bl	80081ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00c      	beq.n	800735a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 ff53 	bl	8008200 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00c      	beq.n	800737e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa41 	bl	8007800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00c      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f06f 0220 	mvn.w	r2, #32
 800739a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 ff1b 	bl	80081d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e0ff      	b.n	80075ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b14      	cmp	r3, #20
 80073d6:	f200 80f0 	bhi.w	80075ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073da:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	08007435 	.word	0x08007435
 80073e4:	080075bb 	.word	0x080075bb
 80073e8:	080075bb 	.word	0x080075bb
 80073ec:	080075bb 	.word	0x080075bb
 80073f0:	08007475 	.word	0x08007475
 80073f4:	080075bb 	.word	0x080075bb
 80073f8:	080075bb 	.word	0x080075bb
 80073fc:	080075bb 	.word	0x080075bb
 8007400:	080074b7 	.word	0x080074b7
 8007404:	080075bb 	.word	0x080075bb
 8007408:	080075bb 	.word	0x080075bb
 800740c:	080075bb 	.word	0x080075bb
 8007410:	080074f7 	.word	0x080074f7
 8007414:	080075bb 	.word	0x080075bb
 8007418:	080075bb 	.word	0x080075bb
 800741c:	080075bb 	.word	0x080075bb
 8007420:	08007539 	.word	0x08007539
 8007424:	080075bb 	.word	0x080075bb
 8007428:	080075bb 	.word	0x080075bb
 800742c:	080075bb 	.word	0x080075bb
 8007430:	08007579 	.word	0x08007579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fa96 	bl	800796c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0208 	orr.w	r2, r2, #8
 800744e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0204 	bic.w	r2, r2, #4
 800745e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6999      	ldr	r1, [r3, #24]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	619a      	str	r2, [r3, #24]
      break;
 8007472:	e0a5      	b.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fb06 	bl	8007a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800748e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800749e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6999      	ldr	r1, [r3, #24]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	021a      	lsls	r2, r3, #8
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	619a      	str	r2, [r3, #24]
      break;
 80074b4:	e084      	b.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fb6f 	bl	8007ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0208 	orr.w	r2, r2, #8
 80074d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0204 	bic.w	r2, r2, #4
 80074e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69d9      	ldr	r1, [r3, #28]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	61da      	str	r2, [r3, #28]
      break;
 80074f4:	e064      	b.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fbd7 	bl	8007cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69da      	ldr	r2, [r3, #28]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69d9      	ldr	r1, [r3, #28]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	021a      	lsls	r2, r3, #8
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	61da      	str	r2, [r3, #28]
      break;
 8007536:	e043      	b.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fc20 	bl	8007d84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0208 	orr.w	r2, r2, #8
 8007552:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0204 	bic.w	r2, r2, #4
 8007562:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007576:	e023      	b.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fc64 	bl	8007e4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007592:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	021a      	lsls	r2, r3, #8
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80075b8:	e002      	b.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
      break;
 80075be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop

080075d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_TIM_ConfigClockSource+0x1c>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e0dc      	b.n	80077aa <HAL_TIM_ConfigClockSource+0x1d6>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	4b6a      	ldr	r3, [pc, #424]	@ (80077b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800760c:	4013      	ands	r3, r2
 800760e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a64      	ldr	r2, [pc, #400]	@ (80077b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	f000 80a9 	beq.w	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 800762c:	4a62      	ldr	r2, [pc, #392]	@ (80077b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	f200 80ae 	bhi.w	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007634:	4a61      	ldr	r2, [pc, #388]	@ (80077bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	f000 80a1 	beq.w	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 800763c:	4a5f      	ldr	r2, [pc, #380]	@ (80077bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	f200 80a6 	bhi.w	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007644:	4a5e      	ldr	r2, [pc, #376]	@ (80077c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007646:	4293      	cmp	r3, r2
 8007648:	f000 8099 	beq.w	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 800764c:	4a5c      	ldr	r2, [pc, #368]	@ (80077c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800764e:	4293      	cmp	r3, r2
 8007650:	f200 809e 	bhi.w	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007654:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007658:	f000 8091 	beq.w	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 800765c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007660:	f200 8096 	bhi.w	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007664:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007668:	f000 8089 	beq.w	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 800766c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007670:	f200 808e 	bhi.w	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007678:	d03e      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0x124>
 800767a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800767e:	f200 8087 	bhi.w	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007686:	f000 8086 	beq.w	8007796 <HAL_TIM_ConfigClockSource+0x1c2>
 800768a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800768e:	d87f      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007690:	2b70      	cmp	r3, #112	@ 0x70
 8007692:	d01a      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0xf6>
 8007694:	2b70      	cmp	r3, #112	@ 0x70
 8007696:	d87b      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 8007698:	2b60      	cmp	r3, #96	@ 0x60
 800769a:	d050      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x16a>
 800769c:	2b60      	cmp	r3, #96	@ 0x60
 800769e:	d877      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 80076a0:	2b50      	cmp	r3, #80	@ 0x50
 80076a2:	d03c      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x14a>
 80076a4:	2b50      	cmp	r3, #80	@ 0x50
 80076a6:	d873      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 80076a8:	2b40      	cmp	r3, #64	@ 0x40
 80076aa:	d058      	beq.n	800775e <HAL_TIM_ConfigClockSource+0x18a>
 80076ac:	2b40      	cmp	r3, #64	@ 0x40
 80076ae:	d86f      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 80076b0:	2b30      	cmp	r3, #48	@ 0x30
 80076b2:	d064      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 80076b4:	2b30      	cmp	r3, #48	@ 0x30
 80076b6:	d86b      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d060      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d867      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d05c      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d05a      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x1aa>
 80076c8:	e062      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076da:	f000 fc9b 	bl	8008014 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	609a      	str	r2, [r3, #8]
      break;
 80076f6:	e04f      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007708:	f000 fc84 	bl	8008014 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800771a:	609a      	str	r2, [r3, #8]
      break;
 800771c:	e03c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800772a:	461a      	mov	r2, r3
 800772c:	f000 fbf4 	bl	8007f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2150      	movs	r1, #80	@ 0x50
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fc4e 	bl	8007fd8 <TIM_ITRx_SetConfig>
      break;
 800773c:	e02c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800774a:	461a      	mov	r2, r3
 800774c:	f000 fc13 	bl	8007f76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2160      	movs	r1, #96	@ 0x60
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fc3e 	bl	8007fd8 <TIM_ITRx_SetConfig>
      break;
 800775c:	e01c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800776a:	461a      	mov	r2, r3
 800776c:	f000 fbd4 	bl	8007f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2140      	movs	r1, #64	@ 0x40
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fc2e 	bl	8007fd8 <TIM_ITRx_SetConfig>
      break;
 800777c:	e00c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f000 fc25 	bl	8007fd8 <TIM_ITRx_SetConfig>
      break;
 800778e:	e003      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e000      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	ffceff88 	.word	0xffceff88
 80077b8:	00100040 	.word	0x00100040
 80077bc:	00100030 	.word	0x00100030
 80077c0:	00100020 	.word	0x00100020

080077c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a47      	ldr	r2, [pc, #284]	@ (8007944 <TIM_Base_SetConfig+0x130>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d013      	beq.n	8007854 <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007832:	d00f      	beq.n	8007854 <TIM_Base_SetConfig+0x40>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a44      	ldr	r2, [pc, #272]	@ (8007948 <TIM_Base_SetConfig+0x134>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00b      	beq.n	8007854 <TIM_Base_SetConfig+0x40>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a43      	ldr	r2, [pc, #268]	@ (800794c <TIM_Base_SetConfig+0x138>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d007      	beq.n	8007854 <TIM_Base_SetConfig+0x40>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a42      	ldr	r2, [pc, #264]	@ (8007950 <TIM_Base_SetConfig+0x13c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_Base_SetConfig+0x40>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a41      	ldr	r2, [pc, #260]	@ (8007954 <TIM_Base_SetConfig+0x140>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d108      	bne.n	8007866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800785a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a36      	ldr	r2, [pc, #216]	@ (8007944 <TIM_Base_SetConfig+0x130>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d027      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007874:	d023      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a33      	ldr	r2, [pc, #204]	@ (8007948 <TIM_Base_SetConfig+0x134>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d01f      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a32      	ldr	r2, [pc, #200]	@ (800794c <TIM_Base_SetConfig+0x138>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d01b      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a31      	ldr	r2, [pc, #196]	@ (8007950 <TIM_Base_SetConfig+0x13c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d017      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a30      	ldr	r2, [pc, #192]	@ (8007954 <TIM_Base_SetConfig+0x140>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a2f      	ldr	r2, [pc, #188]	@ (8007958 <TIM_Base_SetConfig+0x144>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00f      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2e      	ldr	r2, [pc, #184]	@ (800795c <TIM_Base_SetConfig+0x148>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00b      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007960 <TIM_Base_SetConfig+0x14c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d007      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007964 <TIM_Base_SetConfig+0x150>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_Base_SetConfig+0xaa>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007968 <TIM_Base_SetConfig+0x154>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d108      	bne.n	80078d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a14      	ldr	r2, [pc, #80]	@ (8007944 <TIM_Base_SetConfig+0x130>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00f      	beq.n	8007916 <TIM_Base_SetConfig+0x102>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a16      	ldr	r2, [pc, #88]	@ (8007954 <TIM_Base_SetConfig+0x140>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00b      	beq.n	8007916 <TIM_Base_SetConfig+0x102>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a15      	ldr	r2, [pc, #84]	@ (8007958 <TIM_Base_SetConfig+0x144>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d007      	beq.n	8007916 <TIM_Base_SetConfig+0x102>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a14      	ldr	r2, [pc, #80]	@ (800795c <TIM_Base_SetConfig+0x148>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_Base_SetConfig+0x102>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a13      	ldr	r2, [pc, #76]	@ (8007960 <TIM_Base_SetConfig+0x14c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d103      	bne.n	800791e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f043 0204 	orr.w	r2, r3, #4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	40010000 	.word	0x40010000
 8007948:	40000400 	.word	0x40000400
 800794c:	40000800 	.word	0x40000800
 8007950:	40000c00 	.word	0x40000c00
 8007954:	40010400 	.word	0x40010400
 8007958:	40014000 	.word	0x40014000
 800795c:	40014400 	.word	0x40014400
 8007960:	40014800 	.word	0x40014800
 8007964:	4000e000 	.word	0x4000e000
 8007968:	4000e400 	.word	0x4000e400

0800796c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	f023 0201 	bic.w	r2, r3, #1
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4b37      	ldr	r3, [pc, #220]	@ (8007a74 <TIM_OC1_SetConfig+0x108>)
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0303 	bic.w	r3, r3, #3
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f023 0302 	bic.w	r3, r3, #2
 80079b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a78 <TIM_OC1_SetConfig+0x10c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00f      	beq.n	80079e8 <TIM_OC1_SetConfig+0x7c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a2c      	ldr	r2, [pc, #176]	@ (8007a7c <TIM_OC1_SetConfig+0x110>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00b      	beq.n	80079e8 <TIM_OC1_SetConfig+0x7c>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007a80 <TIM_OC1_SetConfig+0x114>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d007      	beq.n	80079e8 <TIM_OC1_SetConfig+0x7c>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a2a      	ldr	r2, [pc, #168]	@ (8007a84 <TIM_OC1_SetConfig+0x118>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_OC1_SetConfig+0x7c>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a29      	ldr	r2, [pc, #164]	@ (8007a88 <TIM_OC1_SetConfig+0x11c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10c      	bne.n	8007a02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0308 	bic.w	r3, r3, #8
 80079ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f023 0304 	bic.w	r3, r3, #4
 8007a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a1c      	ldr	r2, [pc, #112]	@ (8007a78 <TIM_OC1_SetConfig+0x10c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00f      	beq.n	8007a2a <TIM_OC1_SetConfig+0xbe>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a7c <TIM_OC1_SetConfig+0x110>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00b      	beq.n	8007a2a <TIM_OC1_SetConfig+0xbe>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a1a      	ldr	r2, [pc, #104]	@ (8007a80 <TIM_OC1_SetConfig+0x114>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d007      	beq.n	8007a2a <TIM_OC1_SetConfig+0xbe>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a19      	ldr	r2, [pc, #100]	@ (8007a84 <TIM_OC1_SetConfig+0x118>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d003      	beq.n	8007a2a <TIM_OC1_SetConfig+0xbe>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a18      	ldr	r2, [pc, #96]	@ (8007a88 <TIM_OC1_SetConfig+0x11c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d111      	bne.n	8007a4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	fffeff8f 	.word	0xfffeff8f
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40010400 	.word	0x40010400
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800

08007a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f023 0210 	bic.w	r2, r3, #16
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4b34      	ldr	r3, [pc, #208]	@ (8007b88 <TIM_OC2_SetConfig+0xfc>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 0320 	bic.w	r3, r3, #32
 8007ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a29      	ldr	r2, [pc, #164]	@ (8007b8c <TIM_OC2_SetConfig+0x100>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC2_SetConfig+0x68>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a28      	ldr	r2, [pc, #160]	@ (8007b90 <TIM_OC2_SetConfig+0x104>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10d      	bne.n	8007b10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1e      	ldr	r2, [pc, #120]	@ (8007b8c <TIM_OC2_SetConfig+0x100>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00f      	beq.n	8007b38 <TIM_OC2_SetConfig+0xac>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b90 <TIM_OC2_SetConfig+0x104>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00b      	beq.n	8007b38 <TIM_OC2_SetConfig+0xac>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1c      	ldr	r2, [pc, #112]	@ (8007b94 <TIM_OC2_SetConfig+0x108>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d007      	beq.n	8007b38 <TIM_OC2_SetConfig+0xac>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007b98 <TIM_OC2_SetConfig+0x10c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <TIM_OC2_SetConfig+0xac>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1a      	ldr	r2, [pc, #104]	@ (8007b9c <TIM_OC2_SetConfig+0x110>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d113      	bne.n	8007b60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	621a      	str	r2, [r3, #32]
}
 8007b7a:	bf00      	nop
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	feff8fff 	.word	0xfeff8fff
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800

08007ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <TIM_OC3_SetConfig+0xf8>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a28      	ldr	r2, [pc, #160]	@ (8007c9c <TIM_OC3_SetConfig+0xfc>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d003      	beq.n	8007c06 <TIM_OC3_SetConfig+0x66>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a27      	ldr	r2, [pc, #156]	@ (8007ca0 <TIM_OC3_SetConfig+0x100>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d10d      	bne.n	8007c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1d      	ldr	r2, [pc, #116]	@ (8007c9c <TIM_OC3_SetConfig+0xfc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00f      	beq.n	8007c4a <TIM_OC3_SetConfig+0xaa>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca0 <TIM_OC3_SetConfig+0x100>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00b      	beq.n	8007c4a <TIM_OC3_SetConfig+0xaa>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca4 <TIM_OC3_SetConfig+0x104>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d007      	beq.n	8007c4a <TIM_OC3_SetConfig+0xaa>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ca8 <TIM_OC3_SetConfig+0x108>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d003      	beq.n	8007c4a <TIM_OC3_SetConfig+0xaa>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a19      	ldr	r2, [pc, #100]	@ (8007cac <TIM_OC3_SetConfig+0x10c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d113      	bne.n	8007c72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	621a      	str	r2, [r3, #32]
}
 8007c8c:	bf00      	nop
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	fffeff8f 	.word	0xfffeff8f
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	40010400 	.word	0x40010400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800

08007cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4b24      	ldr	r3, [pc, #144]	@ (8007d6c <TIM_OC4_SetConfig+0xbc>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	031b      	lsls	r3, r3, #12
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a19      	ldr	r2, [pc, #100]	@ (8007d70 <TIM_OC4_SetConfig+0xc0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00f      	beq.n	8007d30 <TIM_OC4_SetConfig+0x80>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a18      	ldr	r2, [pc, #96]	@ (8007d74 <TIM_OC4_SetConfig+0xc4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00b      	beq.n	8007d30 <TIM_OC4_SetConfig+0x80>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a17      	ldr	r2, [pc, #92]	@ (8007d78 <TIM_OC4_SetConfig+0xc8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d007      	beq.n	8007d30 <TIM_OC4_SetConfig+0x80>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a16      	ldr	r2, [pc, #88]	@ (8007d7c <TIM_OC4_SetConfig+0xcc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d003      	beq.n	8007d30 <TIM_OC4_SetConfig+0x80>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a15      	ldr	r2, [pc, #84]	@ (8007d80 <TIM_OC4_SetConfig+0xd0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d109      	bne.n	8007d44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	019b      	lsls	r3, r3, #6
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	feff8fff 	.word	0xfeff8fff
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40010400 	.word	0x40010400
 8007d78:	40014000 	.word	0x40014000
 8007d7c:	40014400 	.word	0x40014400
 8007d80:	40014800 	.word	0x40014800

08007d84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4b21      	ldr	r3, [pc, #132]	@ (8007e34 <TIM_OC5_SetConfig+0xb0>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007dc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a18      	ldr	r2, [pc, #96]	@ (8007e38 <TIM_OC5_SetConfig+0xb4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00f      	beq.n	8007dfa <TIM_OC5_SetConfig+0x76>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a17      	ldr	r2, [pc, #92]	@ (8007e3c <TIM_OC5_SetConfig+0xb8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00b      	beq.n	8007dfa <TIM_OC5_SetConfig+0x76>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a16      	ldr	r2, [pc, #88]	@ (8007e40 <TIM_OC5_SetConfig+0xbc>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <TIM_OC5_SetConfig+0x76>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a15      	ldr	r2, [pc, #84]	@ (8007e44 <TIM_OC5_SetConfig+0xc0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <TIM_OC5_SetConfig+0x76>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a14      	ldr	r2, [pc, #80]	@ (8007e48 <TIM_OC5_SetConfig+0xc4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d109      	bne.n	8007e0e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	fffeff8f 	.word	0xfffeff8f
 8007e38:	40010000 	.word	0x40010000
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	40014400 	.word	0x40014400
 8007e48:	40014800 	.word	0x40014800

08007e4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4b22      	ldr	r3, [pc, #136]	@ (8007f00 <TIM_OC6_SetConfig+0xb4>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	051b      	lsls	r3, r3, #20
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a19      	ldr	r2, [pc, #100]	@ (8007f04 <TIM_OC6_SetConfig+0xb8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00f      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x78>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a18      	ldr	r2, [pc, #96]	@ (8007f08 <TIM_OC6_SetConfig+0xbc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00b      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x78>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a17      	ldr	r2, [pc, #92]	@ (8007f0c <TIM_OC6_SetConfig+0xc0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d007      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x78>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a16      	ldr	r2, [pc, #88]	@ (8007f10 <TIM_OC6_SetConfig+0xc4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x78>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a15      	ldr	r2, [pc, #84]	@ (8007f14 <TIM_OC6_SetConfig+0xc8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d109      	bne.n	8007ed8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	029b      	lsls	r3, r3, #10
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	feff8fff 	.word	0xfeff8fff
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40010400 	.word	0x40010400
 8007f0c:	40014000 	.word	0x40014000
 8007f10:	40014400 	.word	0x40014400
 8007f14:	40014800 	.word	0x40014800

08007f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	f023 0201 	bic.w	r2, r3, #1
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f023 030a 	bic.w	r3, r3, #10
 8007f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	621a      	str	r2, [r3, #32]
}
 8007f6a:	bf00      	nop
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b087      	sub	sp, #28
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	f023 0210 	bic.w	r2, r3, #16
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	031b      	lsls	r3, r3, #12
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007fb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <TIM_ITRx_SetConfig+0x38>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f043 0307 	orr.w	r3, r3, #7
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	609a      	str	r2, [r3, #8]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	ffcfff8f 	.word	0xffcfff8f

08008014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800802e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	021a      	lsls	r2, r3, #8
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	431a      	orrs	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	609a      	str	r2, [r3, #8]
}
 8008048:	bf00      	nop
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 031f 	and.w	r3, r3, #31
 8008066:	2201      	movs	r2, #1
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a1a      	ldr	r2, [r3, #32]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	43db      	mvns	r3, r3
 8008076:	401a      	ands	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1a      	ldr	r2, [r3, #32]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 031f 	and.w	r3, r3, #31
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	fa01 f303 	lsl.w	r3, r1, r3
 800808c:	431a      	orrs	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	621a      	str	r2, [r3, #32]
}
 8008092:	bf00      	nop
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
	...

080080a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e077      	b.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a35      	ldr	r2, [pc, #212]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d004      	beq.n	80080ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a34      	ldr	r2, [pc, #208]	@ (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d108      	bne.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008104:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a25      	ldr	r2, [pc, #148]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d02c      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800812a:	d027      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a22      	ldr	r2, [pc, #136]	@ (80081bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d022      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a21      	ldr	r2, [pc, #132]	@ (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d01d      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1f      	ldr	r2, [pc, #124]	@ (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d018      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a1a      	ldr	r2, [pc, #104]	@ (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d013      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a1b      	ldr	r2, [pc, #108]	@ (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00e      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1a      	ldr	r2, [pc, #104]	@ (80081cc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d009      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a18      	ldr	r2, [pc, #96]	@ (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a17      	ldr	r2, [pc, #92]	@ (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d10c      	bne.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	4313      	orrs	r3, r2
 800818c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	40010000 	.word	0x40010000
 80081b8:	40010400 	.word	0x40010400
 80081bc:	40000400 	.word	0x40000400
 80081c0:	40000800 	.word	0x40000800
 80081c4:	40000c00 	.word	0x40000c00
 80081c8:	40001800 	.word	0x40001800
 80081cc:	40014000 	.word	0x40014000
 80081d0:	4000e000 	.word	0x4000e000
 80081d4:	4000e400 	.word	0x4000e400

080081d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	f023 0101 	bic.w	r1, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b08      	cmp	r3, #8
 800823c:	d102      	bne.n	8008244 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800823e:	2340      	movs	r3, #64	@ 0x40
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	e001      	b.n	8008248 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008254:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800825a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008260:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008266:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800826c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008272:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008278:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800827e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8008284:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80082ac:	4b20      	ldr	r3, [pc, #128]	@ (8008330 <FMC_NORSRAM_Init+0x11c>)
 80082ae:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082b6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082be:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80082c6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	ea02 0103 	and.w	r1, r2, r3
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	4319      	orrs	r1, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082f0:	d10c      	bne.n	800830c <FMC_NORSRAM_Init+0xf8>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d008      	beq.n	800830c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	0008fb7f 	.word	0x0008fb7f

08008334 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800834a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8008352:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800835a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	3b01      	subs	r3, #1
 8008362:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8008364:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	3b02      	subs	r3, #2
 800836c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800836e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800837a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800838a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800838e:	d113      	bne.n	80083b8 <FMC_NORSRAM_Timing_Init+0x84>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008398:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	3b01      	subs	r3, #1
 80083a0:	051b      	lsls	r3, r3, #20
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083dc:	d11d      	bne.n	800841a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083e6:	4b13      	ldr	r3, [pc, #76]	@ (8008434 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	6811      	ldr	r1, [r2, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	6852      	ldr	r2, [r2, #4]
 80083f2:	0112      	lsls	r2, r2, #4
 80083f4:	4311      	orrs	r1, r2
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	6892      	ldr	r2, [r2, #8]
 80083fa:	0212      	lsls	r2, r2, #8
 80083fc:	4311      	orrs	r1, r2
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	6992      	ldr	r2, [r2, #24]
 8008402:	4311      	orrs	r1, r2
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	68d2      	ldr	r2, [r2, #12]
 8008408:	0412      	lsls	r2, r2, #16
 800840a:	430a      	orrs	r2, r1
 800840c:	ea43 0102 	orr.w	r1, r3, r2
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008418:	e005      	b.n	8008426 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	cff00000 	.word	0xcff00000

08008438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008438:	b084      	sub	sp, #16
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	f107 001c 	add.w	r0, r7, #28
 8008446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800844a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800844e:	2b01      	cmp	r3, #1
 8008450:	d121      	bne.n	8008496 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	4b2c      	ldr	r3, [pc, #176]	@ (8008514 <USB_CoreInit+0xdc>)
 8008464:	4013      	ands	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008476:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800847a:	2b01      	cmp	r3, #1
 800847c:	d105      	bne.n	800848a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 fafa 	bl	8009a84 <USB_CoreReset>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]
 8008494:	e01b      	b.n	80084ce <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 faee 	bl	8009a84 <USB_CoreReset>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d106      	bne.n	80084c2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38
 80084c0:	e005      	b.n	80084ce <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084ce:	7fbb      	ldrb	r3, [r7, #30]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d116      	bne.n	8008502 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084d8:	b29a      	uxth	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008518 <USB_CoreInit+0xe0>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f043 0206 	orr.w	r2, r3, #6
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f043 0220 	orr.w	r2, r3, #32
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800850e:	b004      	add	sp, #16
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	ffbdffbf 	.word	0xffbdffbf
 8008518:	03ee0000 	.word	0x03ee0000

0800851c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	2b02      	cmp	r3, #2
 800852e:	d165      	bne.n	80085fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a41      	ldr	r2, [pc, #260]	@ (8008638 <USB_SetTurnaroundTime+0x11c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d906      	bls.n	8008546 <USB_SetTurnaroundTime+0x2a>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4a40      	ldr	r2, [pc, #256]	@ (800863c <USB_SetTurnaroundTime+0x120>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d202      	bcs.n	8008546 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008540:	230f      	movs	r3, #15
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e062      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4a3c      	ldr	r2, [pc, #240]	@ (800863c <USB_SetTurnaroundTime+0x120>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d306      	bcc.n	800855c <USB_SetTurnaroundTime+0x40>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4a3b      	ldr	r2, [pc, #236]	@ (8008640 <USB_SetTurnaroundTime+0x124>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d202      	bcs.n	800855c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008556:	230e      	movs	r3, #14
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	e057      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a38      	ldr	r2, [pc, #224]	@ (8008640 <USB_SetTurnaroundTime+0x124>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d306      	bcc.n	8008572 <USB_SetTurnaroundTime+0x56>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4a37      	ldr	r2, [pc, #220]	@ (8008644 <USB_SetTurnaroundTime+0x128>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d202      	bcs.n	8008572 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800856c:	230d      	movs	r3, #13
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e04c      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a33      	ldr	r2, [pc, #204]	@ (8008644 <USB_SetTurnaroundTime+0x128>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d306      	bcc.n	8008588 <USB_SetTurnaroundTime+0x6c>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	4a32      	ldr	r2, [pc, #200]	@ (8008648 <USB_SetTurnaroundTime+0x12c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d802      	bhi.n	8008588 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008582:	230c      	movs	r3, #12
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e041      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a2f      	ldr	r2, [pc, #188]	@ (8008648 <USB_SetTurnaroundTime+0x12c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d906      	bls.n	800859e <USB_SetTurnaroundTime+0x82>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4a2e      	ldr	r2, [pc, #184]	@ (800864c <USB_SetTurnaroundTime+0x130>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d802      	bhi.n	800859e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008598:	230b      	movs	r3, #11
 800859a:	617b      	str	r3, [r7, #20]
 800859c:	e036      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4a2a      	ldr	r2, [pc, #168]	@ (800864c <USB_SetTurnaroundTime+0x130>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d906      	bls.n	80085b4 <USB_SetTurnaroundTime+0x98>
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4a29      	ldr	r2, [pc, #164]	@ (8008650 <USB_SetTurnaroundTime+0x134>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d802      	bhi.n	80085b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085ae:	230a      	movs	r3, #10
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e02b      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4a26      	ldr	r2, [pc, #152]	@ (8008650 <USB_SetTurnaroundTime+0x134>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d906      	bls.n	80085ca <USB_SetTurnaroundTime+0xae>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	4a25      	ldr	r2, [pc, #148]	@ (8008654 <USB_SetTurnaroundTime+0x138>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d202      	bcs.n	80085ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085c4:	2309      	movs	r3, #9
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	e020      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4a21      	ldr	r2, [pc, #132]	@ (8008654 <USB_SetTurnaroundTime+0x138>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d306      	bcc.n	80085e0 <USB_SetTurnaroundTime+0xc4>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4a20      	ldr	r2, [pc, #128]	@ (8008658 <USB_SetTurnaroundTime+0x13c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d802      	bhi.n	80085e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085da:	2308      	movs	r3, #8
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	e015      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008658 <USB_SetTurnaroundTime+0x13c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d906      	bls.n	80085f6 <USB_SetTurnaroundTime+0xda>
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4a1c      	ldr	r2, [pc, #112]	@ (800865c <USB_SetTurnaroundTime+0x140>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d202      	bcs.n	80085f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085f0:	2307      	movs	r3, #7
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e00a      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085f6:	2306      	movs	r3, #6
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	e007      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d102      	bne.n	8008608 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008602:	2309      	movs	r3, #9
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e001      	b.n	800860c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008608:	2309      	movs	r3, #9
 800860a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68da      	ldr	r2, [r3, #12]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	029b      	lsls	r3, r3, #10
 8008620:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008624:	431a      	orrs	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	00d8acbf 	.word	0x00d8acbf
 800863c:	00e4e1c0 	.word	0x00e4e1c0
 8008640:	00f42400 	.word	0x00f42400
 8008644:	01067380 	.word	0x01067380
 8008648:	011a499f 	.word	0x011a499f
 800864c:	01312cff 	.word	0x01312cff
 8008650:	014ca43f 	.word	0x014ca43f
 8008654:	016e3600 	.word	0x016e3600
 8008658:	01a6ab1f 	.word	0x01a6ab1f
 800865c:	01e84800 	.word	0x01e84800

08008660 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f043 0201 	orr.w	r2, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d115      	bne.n	80086f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086d2:	200a      	movs	r0, #10
 80086d4:	f7f9 f81c 	bl	8001710 <HAL_Delay>
      ms += 10U;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	330a      	adds	r3, #10
 80086dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 f93f 	bl	8009962 <USB_GetMode>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d01e      	beq.n	8008728 <USB_SetCurrentMode+0x84>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80086ee:	d9f0      	bls.n	80086d2 <USB_SetCurrentMode+0x2e>
 80086f0:	e01a      	b.n	8008728 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d115      	bne.n	8008724 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008704:	200a      	movs	r0, #10
 8008706:	f7f9 f803 	bl	8001710 <HAL_Delay>
      ms += 10U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	330a      	adds	r3, #10
 800870e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f926 	bl	8009962 <USB_GetMode>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d005      	beq.n	8008728 <USB_SetCurrentMode+0x84>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008720:	d9f0      	bls.n	8008704 <USB_SetCurrentMode+0x60>
 8008722:	e001      	b.n	8008728 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e005      	b.n	8008734 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2bc8      	cmp	r3, #200	@ 0xc8
 800872c:	d101      	bne.n	8008732 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800873c:	b084      	sub	sp, #16
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800874a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008756:	2300      	movs	r3, #0
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	e009      	b.n	8008770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3340      	adds	r3, #64	@ 0x40
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	2200      	movs	r2, #0
 8008768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3301      	adds	r3, #1
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b0e      	cmp	r3, #14
 8008774:	d9f2      	bls.n	800875c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008776:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800877a:	2b00      	cmp	r3, #0
 800877c:	d11c      	bne.n	80087b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800878c:	f043 0302 	orr.w	r3, r3, #2
 8008790:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e005      	b.n	80087c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087ca:	461a      	mov	r2, r3
 80087cc:	2300      	movs	r3, #0
 80087ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d10d      	bne.n	80087f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087e0:	2100      	movs	r1, #0
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f968 	bl	8008ab8 <USB_SetDevSpeed>
 80087e8:	e008      	b.n	80087fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087ea:	2101      	movs	r1, #1
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f963 	bl	8008ab8 <USB_SetDevSpeed>
 80087f2:	e003      	b.n	80087fc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087f4:	2103      	movs	r1, #3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f95e 	bl	8008ab8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087fc:	2110      	movs	r1, #16
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f8fa 	bl	80089f8 <USB_FlushTxFifo>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f924 	bl	8008a5c <USB_FlushRxFifo>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008830:	461a      	mov	r2, r3
 8008832:	2300      	movs	r3, #0
 8008834:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008842:	2300      	movs	r3, #0
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	e043      	b.n	80088d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800885a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800885e:	d118      	bne.n	8008892 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10a      	bne.n	800887c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008872:	461a      	mov	r2, r3
 8008874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e013      	b.n	80088a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008888:	461a      	mov	r2, r3
 800888a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	e008      	b.n	80088a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800889e:	461a      	mov	r2, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b0:	461a      	mov	r2, r3
 80088b2:	2300      	movs	r3, #0
 80088b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c2:	461a      	mov	r2, r3
 80088c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3301      	adds	r3, #1
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088d4:	461a      	mov	r2, r3
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	4293      	cmp	r3, r2
 80088da:	d3b5      	bcc.n	8008848 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088dc:	2300      	movs	r3, #0
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	e043      	b.n	800896a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088f8:	d118      	bne.n	800892c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890c:	461a      	mov	r2, r3
 800890e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e013      	b.n	800893e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008922:	461a      	mov	r2, r3
 8008924:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	e008      	b.n	800893e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008938:	461a      	mov	r2, r3
 800893a:	2300      	movs	r3, #0
 800893c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894a:	461a      	mov	r2, r3
 800894c:	2300      	movs	r3, #0
 800894e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895c:	461a      	mov	r2, r3
 800895e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	3301      	adds	r3, #1
 8008968:	613b      	str	r3, [r7, #16]
 800896a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800896e:	461a      	mov	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	4293      	cmp	r3, r2
 8008974:	d3b5      	bcc.n	80088e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008988:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008996:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008998:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f043 0210 	orr.w	r2, r3, #16
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <USB_DevInit+0x2b4>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f043 0208 	orr.w	r2, r3, #8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d105      	bne.n	80089e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699a      	ldr	r2, [r3, #24]
 80089d8:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <USB_DevInit+0x2b8>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ec:	b004      	add	sp, #16
 80089ee:	4770      	bx	lr
 80089f0:	803c3800 	.word	0x803c3800
 80089f4:	40000004 	.word	0x40000004

080089f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a12:	d901      	bls.n	8008a18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e01b      	b.n	8008a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	daf2      	bge.n	8008a06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	019b      	lsls	r3, r3, #6
 8008a28:	f043 0220 	orr.w	r2, r3, #32
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a3c:	d901      	bls.n	8008a42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e006      	b.n	8008a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d0f0      	beq.n	8008a30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a74:	d901      	bls.n	8008a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e018      	b.n	8008aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	daf2      	bge.n	8008a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2210      	movs	r2, #16
 8008a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a98:	d901      	bls.n	8008a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e006      	b.n	8008aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d0f0      	beq.n	8008a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	68f9      	ldr	r1, [r7, #12]
 8008ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b087      	sub	sp, #28
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 0306 	and.w	r3, r3, #6
 8008b02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e00a      	b.n	8008b26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d002      	beq.n	8008b1c <USB_GetDevSpeed+0x32>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	d102      	bne.n	8008b22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	75fb      	strb	r3, [r7, #23]
 8008b20:	e001      	b.n	8008b26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b22:	230f      	movs	r3, #15
 8008b24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d139      	bne.n	8008bc4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	2101      	movs	r1, #1
 8008b62:	fa01 f303 	lsl.w	r3, r1, r3
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	68f9      	ldr	r1, [r7, #12]
 8008b6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d153      	bne.n	8008c30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	791b      	ldrb	r3, [r3, #4]
 8008ba2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ba4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	059b      	lsls	r3, r3, #22
 8008baa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bac:	431a      	orrs	r2, r3
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	0159      	lsls	r1, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	440b      	add	r3, r1
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4b20      	ldr	r3, [pc, #128]	@ (8008c40 <USB_ActivateEndpoint+0x10c>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	600b      	str	r3, [r1, #0]
 8008bc2:	e035      	b.n	8008c30 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f003 030f 	and.w	r3, r3, #15
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bda:	041b      	lsls	r3, r3, #16
 8008bdc:	68f9      	ldr	r1, [r7, #12]
 8008bde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008be2:	4313      	orrs	r3, r2
 8008be4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d119      	bne.n	8008c30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	791b      	ldrb	r3, [r3, #4]
 8008c16:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	0159      	lsls	r1, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	440b      	add	r3, r1
 8008c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4b05      	ldr	r3, [pc, #20]	@ (8008c40 <USB_ActivateEndpoint+0x10c>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	10008000 	.word	0x10008000

08008c44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d161      	bne.n	8008d24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c76:	d11f      	bne.n	8008cb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	2101      	movs	r1, #1
 8008cca:	fa01 f303 	lsl.w	r3, r1, r3
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cd8:	4013      	ands	r3, r2
 8008cda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	f003 030f 	and.w	r3, r3, #15
 8008cec:	2101      	movs	r1, #1
 8008cee:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	0159      	lsls	r1, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	440b      	add	r3, r1
 8008d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4b35      	ldr	r3, [pc, #212]	@ (8008df4 <USB_DeactivateEndpoint+0x1b0>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	600b      	str	r3, [r1, #0]
 8008d22:	e060      	b.n	8008de6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d3a:	d11f      	bne.n	8008d7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d92:	041b      	lsls	r3, r3, #16
 8008d94:	43db      	mvns	r3, r3
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	2101      	movs	r1, #1
 8008db2:	fa01 f303 	lsl.w	r3, r1, r3
 8008db6:	041b      	lsls	r3, r3, #16
 8008db8:	43db      	mvns	r3, r3
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	0159      	lsls	r1, r3, #5
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	440b      	add	r3, r1
 8008dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dde:	4619      	mov	r1, r3
 8008de0:	4b05      	ldr	r3, [pc, #20]	@ (8008df8 <USB_DeactivateEndpoint+0x1b4>)
 8008de2:	4013      	ands	r3, r2
 8008de4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	ec337800 	.word	0xec337800
 8008df8:	eff37800 	.word	0xeff37800

08008dfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	@ 0x28
 8008e00:	af02      	add	r7, sp, #8
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	f040 8185 	bne.w	8009128 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d132      	bne.n	8008e8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e32:	691a      	ldr	r2, [r3, #16]
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	0159      	lsls	r1, r3, #5
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	440b      	add	r3, r1
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e40:	4619      	mov	r1, r3
 8008e42:	4ba7      	ldr	r3, [pc, #668]	@ (80090e0 <USB_EPStartXfer+0x2e4>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	0151      	lsls	r1, r2, #5
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	440a      	add	r2, r1
 8008e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e74:	691a      	ldr	r2, [r3, #16]
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	0159      	lsls	r1, r3, #5
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	440b      	add	r3, r1
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e82:	4619      	mov	r1, r3
 8008e84:	4b97      	ldr	r3, [pc, #604]	@ (80090e4 <USB_EPStartXfer+0x2e8>)
 8008e86:	4013      	ands	r3, r2
 8008e88:	610b      	str	r3, [r1, #16]
 8008e8a:	e097      	b.n	8008fbc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	0159      	lsls	r1, r3, #5
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	440b      	add	r3, r1
 8008ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4b8e      	ldr	r3, [pc, #568]	@ (80090e4 <USB_EPStartXfer+0x2e8>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	0159      	lsls	r1, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	440b      	add	r3, r1
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4b85      	ldr	r3, [pc, #532]	@ (80090e0 <USB_EPStartXfer+0x2e4>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d11a      	bne.n	8008f0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d903      	bls.n	8008eea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	0151      	lsls	r1, r2, #5
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	440a      	add	r2, r1
 8008f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f08:	6113      	str	r3, [r2, #16]
 8008f0a:	e044      	b.n	8008f96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	691a      	ldr	r2, [r3, #16]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2e:	691a      	ldr	r2, [r3, #16]
 8008f30:	8afb      	ldrh	r3, [r7, #22]
 8008f32:	04d9      	lsls	r1, r3, #19
 8008f34:	4b6c      	ldr	r3, [pc, #432]	@ (80090e8 <USB_EPStartXfer+0x2ec>)
 8008f36:	400b      	ands	r3, r1
 8008f38:	69b9      	ldr	r1, [r7, #24]
 8008f3a:	0148      	lsls	r0, r1, #5
 8008f3c:	69f9      	ldr	r1, [r7, #28]
 8008f3e:	4401      	add	r1, r0
 8008f40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f44:	4313      	orrs	r3, r2
 8008f46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d122      	bne.n	8008f96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008f6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7c:	691a      	ldr	r2, [r3, #16]
 8008f7e:	8afb      	ldrh	r3, [r7, #22]
 8008f80:	075b      	lsls	r3, r3, #29
 8008f82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008f86:	69b9      	ldr	r1, [r7, #24]
 8008f88:	0148      	lsls	r0, r1, #5
 8008f8a:	69f9      	ldr	r1, [r7, #28]
 8008f8c:	4401      	add	r1, r0
 8008f8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f92:	4313      	orrs	r3, r2
 8008f94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fac:	69b9      	ldr	r1, [r7, #24]
 8008fae:	0148      	lsls	r0, r1, #5
 8008fb0:	69f9      	ldr	r1, [r7, #28]
 8008fb2:	4401      	add	r1, r0
 8008fb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d14b      	bne.n	800905a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d009      	beq.n	8008fde <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d128      	bne.n	8009038 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d110      	bne.n	8009018 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	e00f      	b.n	8009038 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009036:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009052:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e169      	b.n	800932e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009074:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009078:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d015      	beq.n	80090ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 8151 	beq.w	800932e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	2101      	movs	r1, #1
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	69f9      	ldr	r1, [r7, #28]
 80090a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090a8:	4313      	orrs	r3, r2
 80090aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80090ac:	e13f      	b.n	800932e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d116      	bne.n	80090ec <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	0151      	lsls	r1, r2, #5
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	440a      	add	r2, r1
 80090d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	e015      	b.n	800910c <USB_EPStartXfer+0x310>
 80090e0:	e007ffff 	.word	0xe007ffff
 80090e4:	fff80000 	.word	0xfff80000
 80090e8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	0151      	lsls	r1, r2, #5
 80090fe:	69fa      	ldr	r2, [r7, #28]
 8009100:	440a      	add	r2, r1
 8009102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800910a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	68d9      	ldr	r1, [r3, #12]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	b298      	uxth	r0, r3
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	4603      	mov	r3, r0
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f9b9 	bl	8009498 <USB_WritePacket>
 8009126:	e102      	b.n	800932e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	0159      	lsls	r1, r3, #5
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	440b      	add	r3, r1
 800913e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009142:	4619      	mov	r1, r3
 8009144:	4b7c      	ldr	r3, [pc, #496]	@ (8009338 <USB_EPStartXfer+0x53c>)
 8009146:	4013      	ands	r3, r2
 8009148:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	0159      	lsls	r1, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	440b      	add	r3, r1
 8009160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009164:	4619      	mov	r1, r3
 8009166:	4b75      	ldr	r3, [pc, #468]	@ (800933c <USB_EPStartXfer+0x540>)
 8009168:	4013      	ands	r3, r2
 800916a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d12f      	bne.n	80091d2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091a0:	69b9      	ldr	r1, [r7, #24]
 80091a2:	0148      	lsls	r0, r1, #5
 80091a4:	69f9      	ldr	r1, [r7, #28]
 80091a6:	4401      	add	r1, r0
 80091a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091ac:	4313      	orrs	r3, r2
 80091ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	0151      	lsls	r1, r2, #5
 80091c2:	69fa      	ldr	r2, [r7, #28]
 80091c4:	440a      	add	r2, r1
 80091c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091ce:	6113      	str	r3, [r2, #16]
 80091d0:	e05f      	b.n	8009292 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d123      	bne.n	8009222 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e6:	691a      	ldr	r2, [r3, #16]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091f0:	69b9      	ldr	r1, [r7, #24]
 80091f2:	0148      	lsls	r0, r1, #5
 80091f4:	69f9      	ldr	r1, [r7, #28]
 80091f6:	4401      	add	r1, r0
 80091f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091fc:	4313      	orrs	r3, r2
 80091fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	0151      	lsls	r1, r2, #5
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	440a      	add	r2, r1
 8009216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800921a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800921e:	6113      	str	r3, [r2, #16]
 8009220:	e037      	b.n	8009292 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	691a      	ldr	r2, [r3, #16]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	4413      	add	r3, r2
 800922c:	1e5a      	subs	r2, r3, #1
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	fbb2 f3f3 	udiv	r3, r2, r3
 8009236:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	8afa      	ldrh	r2, [r7, #22]
 800923e:	fb03 f202 	mul.w	r2, r3, r2
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009252:	691a      	ldr	r2, [r3, #16]
 8009254:	8afb      	ldrh	r3, [r7, #22]
 8009256:	04d9      	lsls	r1, r3, #19
 8009258:	4b39      	ldr	r3, [pc, #228]	@ (8009340 <USB_EPStartXfer+0x544>)
 800925a:	400b      	ands	r3, r1
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	0148      	lsls	r0, r1, #5
 8009260:	69f9      	ldr	r1, [r7, #28]
 8009262:	4401      	add	r1, r0
 8009264:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009268:	4313      	orrs	r3, r2
 800926a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009278:	691a      	ldr	r2, [r3, #16]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009282:	69b9      	ldr	r1, [r7, #24]
 8009284:	0148      	lsls	r0, r1, #5
 8009286:	69f9      	ldr	r1, [r7, #28]
 8009288:	4401      	add	r1, r0
 800928a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800928e:	4313      	orrs	r3, r2
 8009290:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d10d      	bne.n	80092b4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	68d9      	ldr	r1, [r3, #12]
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b0:	460a      	mov	r2, r1
 80092b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	791b      	ldrb	r3, [r3, #4]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d128      	bne.n	800930e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d110      	bne.n	80092ee <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	0151      	lsls	r1, r2, #5
 80092de:	69fa      	ldr	r2, [r7, #28]
 80092e0:	440a      	add	r2, r1
 80092e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	e00f      	b.n	800930e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	69fa      	ldr	r2, [r7, #28]
 8009302:	440a      	add	r2, r1
 8009304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800930c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	0151      	lsls	r1, r2, #5
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	440a      	add	r2, r1
 8009324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009328:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800932c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3720      	adds	r7, #32
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	fff80000 	.word	0xfff80000
 800933c:	e007ffff 	.word	0xe007ffff
 8009340:	1ff80000 	.word	0x1ff80000

08009344 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009344:	b480      	push	{r7}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	785b      	ldrb	r3, [r3, #1]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d14a      	bne.n	80093f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800937a:	f040 8086 	bne.w	800948a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	7812      	ldrb	r2, [r2, #0]
 8009392:	0151      	lsls	r1, r2, #5
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	440a      	add	r2, r1
 8009398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800939c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d902      	bls.n	80093dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	75fb      	strb	r3, [r7, #23]
          break;
 80093da:	e056      	b.n	800948a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f4:	d0e7      	beq.n	80093c6 <USB_EPStopXfer+0x82>
 80093f6:	e048      	b.n	800948a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800940c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009410:	d13b      	bne.n	800948a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	7812      	ldrb	r2, [r2, #0]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	440a      	add	r2, r1
 800942c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009430:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009434:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	7812      	ldrb	r2, [r2, #0]
 800944a:	0151      	lsls	r1, r2, #5
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	440a      	add	r2, r1
 8009450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3301      	adds	r3, #1
 800945e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009466:	4293      	cmp	r3, r2
 8009468:	d902      	bls.n	8009470 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	75fb      	strb	r3, [r7, #23]
          break;
 800946e:	e00c      	b.n	800948a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009488:	d0e7      	beq.n	800945a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009498:	b480      	push	{r7}
 800949a:	b089      	sub	sp, #36	@ 0x24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4611      	mov	r1, r2
 80094a4:	461a      	mov	r2, r3
 80094a6:	460b      	mov	r3, r1
 80094a8:	71fb      	strb	r3, [r7, #7]
 80094aa:	4613      	mov	r3, r2
 80094ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d123      	bne.n	8009506 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094be:	88bb      	ldrh	r3, [r7, #4]
 80094c0:	3303      	adds	r3, #3
 80094c2:	089b      	lsrs	r3, r3, #2
 80094c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094c6:	2300      	movs	r3, #0
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	e018      	b.n	80094fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	031a      	lsls	r2, r3, #12
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094d8:	461a      	mov	r2, r3
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	3301      	adds	r3, #1
 80094e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	3301      	adds	r3, #1
 80094ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	3301      	adds	r3, #1
 80094f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	3301      	adds	r3, #1
 80094f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	3301      	adds	r3, #1
 80094fc:	61bb      	str	r3, [r7, #24]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	429a      	cmp	r2, r3
 8009504:	d3e2      	bcc.n	80094cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3724      	adds	r7, #36	@ 0x24
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009514:	b480      	push	{r7}
 8009516:	b08b      	sub	sp, #44	@ 0x2c
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800952a:	88fb      	ldrh	r3, [r7, #6]
 800952c:	089b      	lsrs	r3, r3, #2
 800952e:	b29b      	uxth	r3, r3
 8009530:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009532:	88fb      	ldrh	r3, [r7, #6]
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800953a:	2300      	movs	r3, #0
 800953c:	623b      	str	r3, [r7, #32]
 800953e:	e014      	b.n	800956a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	601a      	str	r2, [r3, #0]
    pDest++;
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	3301      	adds	r3, #1
 8009550:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	3301      	adds	r3, #1
 8009556:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955a:	3301      	adds	r3, #1
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	3301      	adds	r3, #1
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	3301      	adds	r3, #1
 8009568:	623b      	str	r3, [r7, #32]
 800956a:	6a3a      	ldr	r2, [r7, #32]
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	429a      	cmp	r2, r3
 8009570:	d3e6      	bcc.n	8009540 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009572:	8bfb      	ldrh	r3, [r7, #30]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01e      	beq.n	80095b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009582:	461a      	mov	r2, r3
 8009584:	f107 0310 	add.w	r3, r7, #16
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
 8009598:	b2da      	uxtb	r2, r3
 800959a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959c:	701a      	strb	r2, [r3, #0]
      i++;
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	3301      	adds	r3, #1
 80095a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	3301      	adds	r3, #1
 80095a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80095aa:	8bfb      	ldrh	r3, [r7, #30]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095b0:	8bfb      	ldrh	r3, [r7, #30]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1ea      	bne.n	800958c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	372c      	adds	r7, #44	@ 0x2c
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d12c      	bne.n	800963a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	db12      	blt.n	8009618 <USB_EPSetStall+0x54>
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00f      	beq.n	8009618 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	0151      	lsls	r1, r2, #5
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	440a      	add	r2, r1
 800960e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009612:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009616:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009632:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	e02b      	b.n	8009692 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	db12      	blt.n	8009672 <USB_EPSetStall+0xae>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00f      	beq.n	8009672 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	0151      	lsls	r1, r2, #5
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	440a      	add	r2, r1
 8009668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800966c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009670:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800968c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009690:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	785b      	ldrb	r3, [r3, #1]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d128      	bne.n	800970e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	791b      	ldrb	r3, [r3, #4]
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d003      	beq.n	80096ec <USB_EPClearStall+0x4c>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	791b      	ldrb	r3, [r3, #4]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d138      	bne.n	800975e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	0151      	lsls	r1, r2, #5
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	440a      	add	r2, r1
 8009702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	e027      	b.n	800975e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	440a      	add	r2, r1
 8009724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009728:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800972c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	791b      	ldrb	r3, [r3, #4]
 8009732:	2b03      	cmp	r3, #3
 8009734:	d003      	beq.n	800973e <USB_EPClearStall+0x9e>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	791b      	ldrb	r3, [r3, #4]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d10f      	bne.n	800975e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	0151      	lsls	r1, r2, #5
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	440a      	add	r2, r1
 8009754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800975c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800978a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800978e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80097a0:	68f9      	ldr	r1, [r7, #12]
 80097a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097a6:	4313      	orrs	r3, r2
 80097a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097d2:	f023 0303 	bic.w	r3, r3, #3
 80097d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097e6:	f023 0302 	bic.w	r3, r3, #2
 80097ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009814:	f023 0303 	bic.w	r3, r3, #3
 8009818:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009828:	f043 0302 	orr.w	r3, r3, #2
 800982c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	4013      	ands	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009854:	68fb      	ldr	r3, [r7, #12]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009862:	b480      	push	{r7}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	4013      	ands	r3, r2
 8009884:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	0c1b      	lsrs	r3, r3, #16
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	4013      	ands	r3, r2
 80098b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	b29b      	uxth	r3, r3
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b085      	sub	sp, #20
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	460b      	mov	r3, r1
 80098d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	4013      	ands	r3, r2
 80098f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098f8:	68bb      	ldr	r3, [r7, #8]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009906:	b480      	push	{r7}
 8009908:	b087      	sub	sp, #28
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009928:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	fa22 f303 	lsr.w	r3, r2, r3
 8009936:	01db      	lsls	r3, r3, #7
 8009938:	b2db      	uxtb	r3, r3
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	4313      	orrs	r3, r2
 800993e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4013      	ands	r3, r2
 8009952:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009954:	68bb      	ldr	r3, [r7, #8]
}
 8009956:	4618      	mov	r0, r3
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009962:	b480      	push	{r7}
 8009964:	b083      	sub	sp, #12
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	f003 0301 	and.w	r3, r3, #1
}
 8009972:	4618      	mov	r0, r3
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800999a:	4619      	mov	r1, r3
 800999c:	4b09      	ldr	r3, [pc, #36]	@ (80099c4 <USB_ActivateSetup+0x44>)
 800999e:	4013      	ands	r3, r2
 80099a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	fffff800 	.word	0xfffff800

080099c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	460b      	mov	r3, r1
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	333c      	adds	r3, #60	@ 0x3c
 80099de:	3304      	adds	r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	4a26      	ldr	r2, [pc, #152]	@ (8009a80 <USB_EP0_OutStart+0xb8>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d90a      	bls.n	8009a02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099fc:	d101      	bne.n	8009a02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	e037      	b.n	8009a72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a30:	f043 0318 	orr.w	r3, r3, #24
 8009a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a4a:	7afb      	ldrb	r3, [r7, #11]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d10f      	bne.n	8009a70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a56:	461a      	mov	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a6a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	4f54300a 	.word	0x4f54300a

08009a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a9c:	d901      	bls.n	8009aa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e01b      	b.n	8009ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	daf2      	bge.n	8009a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f043 0201 	orr.w	r2, r3, #1
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3301      	adds	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ac6:	d901      	bls.n	8009acc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e006      	b.n	8009ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d0f0      	beq.n	8009aba <USB_CoreReset+0x36>

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009af4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009af8:	f002 fcea 	bl	800c4d0 <USBD_static_malloc>
 8009afc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	32b0      	adds	r2, #176	@ 0xb0
 8009b0e:	2100      	movs	r1, #0
 8009b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b14:	2302      	movs	r3, #2
 8009b16:	e0d4      	b.n	8009cc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b18:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f002 fe04 	bl	800c72c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	32b0      	adds	r2, #176	@ 0xb0
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32b0      	adds	r2, #176	@ 0xb0
 8009b3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	7c1b      	ldrb	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d138      	bne.n	8009bc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b50:	4b5e      	ldr	r3, [pc, #376]	@ (8009ccc <USBD_CDC_Init+0x1e4>)
 8009b52:	7819      	ldrb	r1, [r3, #0]
 8009b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b58:	2202      	movs	r2, #2
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f002 fb95 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b60:	4b5a      	ldr	r3, [pc, #360]	@ (8009ccc <USBD_CDC_Init+0x1e4>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 020f 	and.w	r2, r3, #15
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	3324      	adds	r3, #36	@ 0x24
 8009b76:	2201      	movs	r2, #1
 8009b78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b7a:	4b55      	ldr	r3, [pc, #340]	@ (8009cd0 <USBD_CDC_Init+0x1e8>)
 8009b7c:	7819      	ldrb	r1, [r3, #0]
 8009b7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b82:	2202      	movs	r2, #2
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f002 fb80 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b8a:	4b51      	ldr	r3, [pc, #324]	@ (8009cd0 <USBD_CDC_Init+0x1e8>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	f003 020f 	and.w	r2, r3, #15
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8009cd4 <USBD_CDC_Init+0x1ec>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	f003 020f 	and.w	r2, r3, #15
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	3326      	adds	r3, #38	@ 0x26
 8009bbc:	2210      	movs	r2, #16
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e035      	b.n	8009c2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bc2:	4b42      	ldr	r3, [pc, #264]	@ (8009ccc <USBD_CDC_Init+0x1e4>)
 8009bc4:	7819      	ldrb	r1, [r3, #0]
 8009bc6:	2340      	movs	r3, #64	@ 0x40
 8009bc8:	2202      	movs	r2, #2
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f002 fb5d 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8009ccc <USBD_CDC_Init+0x1e4>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	f003 020f 	and.w	r2, r3, #15
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	440b      	add	r3, r1
 8009be4:	3324      	adds	r3, #36	@ 0x24
 8009be6:	2201      	movs	r2, #1
 8009be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bea:	4b39      	ldr	r3, [pc, #228]	@ (8009cd0 <USBD_CDC_Init+0x1e8>)
 8009bec:	7819      	ldrb	r1, [r3, #0]
 8009bee:	2340      	movs	r3, #64	@ 0x40
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 fb49 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bf8:	4b35      	ldr	r3, [pc, #212]	@ (8009cd0 <USBD_CDC_Init+0x1e8>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c10:	2201      	movs	r2, #1
 8009c12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c14:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd4 <USBD_CDC_Init+0x1ec>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	f003 020f 	and.w	r2, r3, #15
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	440b      	add	r3, r1
 8009c28:	3326      	adds	r3, #38	@ 0x26
 8009c2a:	2210      	movs	r2, #16
 8009c2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c2e:	4b29      	ldr	r3, [pc, #164]	@ (8009cd4 <USBD_CDC_Init+0x1ec>)
 8009c30:	7819      	ldrb	r1, [r3, #0]
 8009c32:	2308      	movs	r3, #8
 8009c34:	2203      	movs	r2, #3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f002 fb27 	bl	800c28a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c3c:	4b25      	ldr	r3, [pc, #148]	@ (8009cd4 <USBD_CDC_Init+0x1ec>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 020f 	and.w	r2, r3, #15
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	3324      	adds	r3, #36	@ 0x24
 8009c52:	2201      	movs	r2, #1
 8009c54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	33b0      	adds	r3, #176	@ 0xb0
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	e018      	b.n	8009cc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	7c1b      	ldrb	r3, [r3, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c98:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <USBD_CDC_Init+0x1e8>)
 8009c9a:	7819      	ldrb	r1, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f002 fbde 	bl	800c468 <USBD_LL_PrepareReceive>
 8009cac:	e008      	b.n	8009cc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cae:	4b08      	ldr	r3, [pc, #32]	@ (8009cd0 <USBD_CDC_Init+0x1e8>)
 8009cb0:	7819      	ldrb	r1, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cb8:	2340      	movs	r3, #64	@ 0x40
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f002 fbd4 	bl	800c468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	2400009f 	.word	0x2400009f
 8009cd0:	240000a0 	.word	0x240000a0
 8009cd4:	240000a1 	.word	0x240000a1

08009cd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8009dd0 <USBD_CDC_DeInit+0xf8>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f002 faf3 	bl	800c2d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009cf0:	4b37      	ldr	r3, [pc, #220]	@ (8009dd0 <USBD_CDC_DeInit+0xf8>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f003 020f 	and.w	r2, r3, #15
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	3324      	adds	r3, #36	@ 0x24
 8009d06:	2200      	movs	r2, #0
 8009d08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d0a:	4b32      	ldr	r3, [pc, #200]	@ (8009dd4 <USBD_CDC_DeInit+0xfc>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f002 fae0 	bl	800c2d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d16:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd4 <USBD_CDC_DeInit+0xfc>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	f003 020f 	and.w	r2, r3, #15
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	440b      	add	r3, r1
 8009d2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d2e:	2200      	movs	r2, #0
 8009d30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d32:	4b29      	ldr	r3, [pc, #164]	@ (8009dd8 <USBD_CDC_DeInit+0x100>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f002 facc 	bl	800c2d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d3e:	4b26      	ldr	r3, [pc, #152]	@ (8009dd8 <USBD_CDC_DeInit+0x100>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 020f 	and.w	r2, r3, #15
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	3324      	adds	r3, #36	@ 0x24
 8009d54:	2200      	movs	r2, #0
 8009d56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d58:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd8 <USBD_CDC_DeInit+0x100>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	f003 020f 	and.w	r2, r3, #15
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	3326      	adds	r3, #38	@ 0x26
 8009d6e:	2200      	movs	r2, #0
 8009d70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	32b0      	adds	r2, #176	@ 0xb0
 8009d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01f      	beq.n	8009dc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	33b0      	adds	r3, #176	@ 0xb0
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	32b0      	adds	r2, #176	@ 0xb0
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 fba0 	bl	800c4ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	32b0      	adds	r2, #176	@ 0xb0
 8009db6:	2100      	movs	r1, #0
 8009db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	2400009f 	.word	0x2400009f
 8009dd4:	240000a0 	.word	0x240000a0
 8009dd8:	240000a1 	.word	0x240000a1

08009ddc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	32b0      	adds	r2, #176	@ 0xb0
 8009df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e0bf      	b.n	8009f8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d050      	beq.n	8009eba <USBD_CDC_Setup+0xde>
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	f040 80af 	bne.w	8009f7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	88db      	ldrh	r3, [r3, #6]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d03a      	beq.n	8009e9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	b25b      	sxtb	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	da1b      	bge.n	8009e68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	33b0      	adds	r3, #176	@ 0xb0
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	88d2      	ldrh	r2, [r2, #6]
 8009e4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	88db      	ldrh	r3, [r3, #6]
 8009e52:	2b07      	cmp	r3, #7
 8009e54:	bf28      	it	cs
 8009e56:	2307      	movcs	r3, #7
 8009e58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	89fa      	ldrh	r2, [r7, #14]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 fdbd 	bl	800b9e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e66:	e090      	b.n	8009f8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	785a      	ldrb	r2, [r3, #1]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	88db      	ldrh	r3, [r3, #6]
 8009e76:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e78:	d803      	bhi.n	8009e82 <USBD_CDC_Setup+0xa6>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	88db      	ldrh	r3, [r3, #6]
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	e000      	b.n	8009e84 <USBD_CDC_Setup+0xa8>
 8009e82:	2240      	movs	r2, #64	@ 0x40
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e8a:	6939      	ldr	r1, [r7, #16]
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e92:	461a      	mov	r2, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 fdcf 	bl	800ba38 <USBD_CtlPrepareRx>
      break;
 8009e9a:	e076      	b.n	8009f8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	33b0      	adds	r3, #176	@ 0xb0
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	7850      	ldrb	r0, [r2, #1]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	4798      	blx	r3
      break;
 8009eb8:	e067      	b.n	8009f8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	785b      	ldrb	r3, [r3, #1]
 8009ebe:	2b0b      	cmp	r3, #11
 8009ec0:	d851      	bhi.n	8009f66 <USBD_CDC_Setup+0x18a>
 8009ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec8 <USBD_CDC_Setup+0xec>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009ef9 	.word	0x08009ef9
 8009ecc:	08009f75 	.word	0x08009f75
 8009ed0:	08009f67 	.word	0x08009f67
 8009ed4:	08009f67 	.word	0x08009f67
 8009ed8:	08009f67 	.word	0x08009f67
 8009edc:	08009f67 	.word	0x08009f67
 8009ee0:	08009f67 	.word	0x08009f67
 8009ee4:	08009f67 	.word	0x08009f67
 8009ee8:	08009f67 	.word	0x08009f67
 8009eec:	08009f67 	.word	0x08009f67
 8009ef0:	08009f23 	.word	0x08009f23
 8009ef4:	08009f4d 	.word	0x08009f4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d107      	bne.n	8009f14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f04:	f107 030a 	add.w	r3, r7, #10
 8009f08:	2202      	movs	r2, #2
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 fd67 	bl	800b9e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f12:	e032      	b.n	8009f7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 fce5 	bl	800b8e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f20:	e02b      	b.n	8009f7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d107      	bne.n	8009f3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f2e:	f107 030d 	add.w	r3, r7, #13
 8009f32:	2201      	movs	r2, #1
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fd52 	bl	800b9e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f3c:	e01d      	b.n	8009f7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f001 fcd0 	bl	800b8e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f46:	2303      	movs	r3, #3
 8009f48:	75fb      	strb	r3, [r7, #23]
          break;
 8009f4a:	e016      	b.n	8009f7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d00f      	beq.n	8009f78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 fcc3 	bl	800b8e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f60:	2303      	movs	r3, #3
 8009f62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f64:	e008      	b.n	8009f78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fcbc 	bl	800b8e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	75fb      	strb	r3, [r7, #23]
          break;
 8009f72:	e002      	b.n	8009f7a <USBD_CDC_Setup+0x19e>
          break;
 8009f74:	bf00      	nop
 8009f76:	e008      	b.n	8009f8a <USBD_CDC_Setup+0x1ae>
          break;
 8009f78:	bf00      	nop
      }
      break;
 8009f7a:	e006      	b.n	8009f8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 fcb1 	bl	800b8e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f84:	2303      	movs	r3, #3
 8009f86:	75fb      	strb	r3, [r7, #23]
      break;
 8009f88:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	32b0      	adds	r2, #176	@ 0xb0
 8009fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e065      	b.n	800a08a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	32b0      	adds	r2, #176	@ 0xb0
 8009fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	f003 020f 	and.w	r2, r3, #15
 8009fd4:	6879      	ldr	r1, [r7, #4]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	440b      	add	r3, r1
 8009fe0:	3318      	adds	r3, #24
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d02f      	beq.n	800a048 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	f003 020f 	and.w	r2, r3, #15
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	3318      	adds	r3, #24
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	f003 010f 	and.w	r1, r3, #15
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	460b      	mov	r3, r1
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	440b      	add	r3, r1
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4403      	add	r3, r0
 800a010:	331c      	adds	r3, #28
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	fbb2 f1f3 	udiv	r1, r2, r3
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d112      	bne.n	800a048 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	f003 020f 	and.w	r2, r3, #15
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	3318      	adds	r3, #24
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a03a:	78f9      	ldrb	r1, [r7, #3]
 800a03c:	2300      	movs	r3, #0
 800a03e:	2200      	movs	r2, #0
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f002 f9f0 	bl	800c426 <USBD_LL_Transmit>
 800a046:	e01f      	b.n	800a088 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	33b0      	adds	r3, #176	@ 0xb0
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d010      	beq.n	800a088 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	33b0      	adds	r3, #176	@ 0xb0
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	32b0      	adds	r2, #176	@ 0xb0
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	32b0      	adds	r2, #176	@ 0xb0
 800a0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e01a      	b.n	800a0fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f002 f9ee 	bl	800c4aa <USBD_LL_GetRxDataSize>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	33b0      	adds	r3, #176	@ 0xb0
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	32b0      	adds	r2, #176	@ 0xb0
 800a114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a118:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	e024      	b.n	800a16e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	33b0      	adds	r3, #176	@ 0xb0
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d019      	beq.n	800a16c <USBD_CDC_EP0_RxReady+0x6a>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a13e:	2bff      	cmp	r3, #255	@ 0xff
 800a140:	d014      	beq.n	800a16c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	33b0      	adds	r3, #176	@ 0xb0
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a15a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a162:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	22ff      	movs	r2, #255	@ 0xff
 800a168:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a180:	2182      	movs	r1, #130	@ 0x82
 800a182:	4818      	ldr	r0, [pc, #96]	@ (800a1e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a184:	f000 fd4f 	bl	800ac26 <USBD_GetEpDesc>
 800a188:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a18a:	2101      	movs	r1, #1
 800a18c:	4815      	ldr	r0, [pc, #84]	@ (800a1e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a18e:	f000 fd4a 	bl	800ac26 <USBD_GetEpDesc>
 800a192:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a194:	2181      	movs	r1, #129	@ 0x81
 800a196:	4813      	ldr	r0, [pc, #76]	@ (800a1e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a198:	f000 fd45 	bl	800ac26 <USBD_GetEpDesc>
 800a19c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2210      	movs	r2, #16
 800a1a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d006      	beq.n	800a1be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b8:	711a      	strb	r2, [r3, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d006      	beq.n	800a1d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1cc:	711a      	strb	r2, [r3, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2243      	movs	r2, #67	@ 0x43
 800a1d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1d8:	4b02      	ldr	r3, [pc, #8]	@ (800a1e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	2400005c 	.word	0x2400005c

0800a1e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1f0:	2182      	movs	r1, #130	@ 0x82
 800a1f2:	4818      	ldr	r0, [pc, #96]	@ (800a254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1f4:	f000 fd17 	bl	800ac26 <USBD_GetEpDesc>
 800a1f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	4815      	ldr	r0, [pc, #84]	@ (800a254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1fe:	f000 fd12 	bl	800ac26 <USBD_GetEpDesc>
 800a202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a204:	2181      	movs	r1, #129	@ 0x81
 800a206:	4813      	ldr	r0, [pc, #76]	@ (800a254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a208:	f000 fd0d 	bl	800ac26 <USBD_GetEpDesc>
 800a20c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2210      	movs	r2, #16
 800a218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	2200      	movs	r2, #0
 800a224:	711a      	strb	r2, [r3, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f042 0202 	orr.w	r2, r2, #2
 800a22c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d006      	beq.n	800a242 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	711a      	strb	r2, [r3, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f042 0202 	orr.w	r2, r2, #2
 800a240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2243      	movs	r2, #67	@ 0x43
 800a246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a248:	4b02      	ldr	r3, [pc, #8]	@ (800a254 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	2400005c 	.word	0x2400005c

0800a258 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a260:	2182      	movs	r1, #130	@ 0x82
 800a262:	4818      	ldr	r0, [pc, #96]	@ (800a2c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a264:	f000 fcdf 	bl	800ac26 <USBD_GetEpDesc>
 800a268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a26a:	2101      	movs	r1, #1
 800a26c:	4815      	ldr	r0, [pc, #84]	@ (800a2c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a26e:	f000 fcda 	bl	800ac26 <USBD_GetEpDesc>
 800a272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a274:	2181      	movs	r1, #129	@ 0x81
 800a276:	4813      	ldr	r0, [pc, #76]	@ (800a2c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a278:	f000 fcd5 	bl	800ac26 <USBD_GetEpDesc>
 800a27c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2210      	movs	r2, #16
 800a288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2200      	movs	r2, #0
 800a294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a298:	711a      	strb	r2, [r3, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d006      	beq.n	800a2b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2ac:	711a      	strb	r2, [r3, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2243      	movs	r2, #67	@ 0x43
 800a2b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2b8:	4b02      	ldr	r3, [pc, #8]	@ (800a2c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	2400005c 	.word	0x2400005c

0800a2c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	220a      	movs	r2, #10
 800a2d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2d6:	4b03      	ldr	r3, [pc, #12]	@ (800a2e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	24000018 	.word	0x24000018

0800a2e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e009      	b.n	800a310 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	33b0      	adds	r3, #176	@ 0xb0
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	32b0      	adds	r2, #176	@ 0xb0
 800a332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a336:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a33e:	2303      	movs	r3, #3
 800a340:	e008      	b.n	800a354 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	371c      	adds	r7, #28
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	32b0      	adds	r2, #176	@ 0xb0
 800a374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a378:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	e004      	b.n	800a38e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
	...

0800a39c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	32b0      	adds	r2, #176	@ 0xb0
 800a3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e025      	b.n	800a40e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d11f      	bne.n	800a40c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3d4:	4b10      	ldr	r3, [pc, #64]	@ (800a418 <USBD_CDC_TransmitPacket+0x7c>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	f003 020f 	and.w	r2, r3, #15
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4403      	add	r3, r0
 800a3ee:	3318      	adds	r3, #24
 800a3f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a3f2:	4b09      	ldr	r3, [pc, #36]	@ (800a418 <USBD_CDC_TransmitPacket+0x7c>)
 800a3f4:	7819      	ldrb	r1, [r3, #0]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f002 f80f 	bl	800c426 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	2400009f 	.word	0x2400009f

0800a41c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	32b0      	adds	r2, #176	@ 0xb0
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	32b0      	adds	r2, #176	@ 0xb0
 800a43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a446:	2303      	movs	r3, #3
 800a448:	e018      	b.n	800a47c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	7c1b      	ldrb	r3, [r3, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a452:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <USBD_CDC_ReceivePacket+0x68>)
 800a454:	7819      	ldrb	r1, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a45c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f002 f801 	bl	800c468 <USBD_LL_PrepareReceive>
 800a466:	e008      	b.n	800a47a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a468:	4b06      	ldr	r3, [pc, #24]	@ (800a484 <USBD_CDC_ReceivePacket+0x68>)
 800a46a:	7819      	ldrb	r1, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a472:	2340      	movs	r3, #64	@ 0x40
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 fff7 	bl	800c468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	240000a0 	.word	0x240000a0

0800a488 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e01f      	b.n	800a4e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	79fa      	ldrb	r2, [r7, #7]
 800a4d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f001 fe6b 	bl	800c1b0 <USBD_LL_Init>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e025      	b.n	800a54c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	32ae      	adds	r2, #174	@ 0xae
 800a512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00f      	beq.n	800a53c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	32ae      	adds	r2, #174	@ 0xae
 800a526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52c:	f107 020e 	add.w	r2, r7, #14
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
 800a534:	4602      	mov	r2, r0
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fe79 	bl	800c254 <USBD_LL_Start>
 800a562:	4603      	mov	r3, r0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a574:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a576:	4618      	mov	r0, r3
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	460b      	mov	r3, r1
 800a58c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	78fa      	ldrb	r2, [r7, #3]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	78fa      	ldrb	r2, [r7, #3]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	4798      	blx	r3
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	4618      	mov	r0, r3
 800a602:	f001 f936 	bl	800b872 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a614:	461a      	mov	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a622:	f003 031f 	and.w	r3, r3, #31
 800a626:	2b02      	cmp	r3, #2
 800a628:	d01a      	beq.n	800a660 <USBD_LL_SetupStage+0x72>
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d822      	bhi.n	800a674 <USBD_LL_SetupStage+0x86>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <USBD_LL_SetupStage+0x4a>
 800a632:	2b01      	cmp	r3, #1
 800a634:	d00a      	beq.n	800a64c <USBD_LL_SetupStage+0x5e>
 800a636:	e01d      	b.n	800a674 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fb63 	bl	800ad0c <USBD_StdDevReq>
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]
      break;
 800a64a:	e020      	b.n	800a68e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fbcb 	bl	800adf0 <USBD_StdItfReq>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]
      break;
 800a65e:	e016      	b.n	800a68e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fc2d 	bl	800aec8 <USBD_StdEPReq>
 800a66e:	4603      	mov	r3, r0
 800a670:	73fb      	strb	r3, [r7, #15]
      break;
 800a672:	e00c      	b.n	800a68e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a67a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f001 fe46 	bl	800c314 <USBD_LL_StallEP>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
      break;
 800a68c:	bf00      	nop
  }

  return ret;
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d16e      	bne.n	800a78e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a6b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	f040 8098 	bne.w	800a7f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	689a      	ldr	r2, [r3, #8]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d913      	bls.n	800a6f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	689a      	ldr	r2, [r3, #8]
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	bf28      	it	cs
 800a6ea:	4613      	movcs	r3, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f001 f9be 	bl	800ba72 <USBD_CtlContinueRx>
 800a6f6:	e07d      	b.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6fe:	f003 031f 	and.w	r3, r3, #31
 800a702:	2b02      	cmp	r3, #2
 800a704:	d014      	beq.n	800a730 <USBD_LL_DataOutStage+0x98>
 800a706:	2b02      	cmp	r3, #2
 800a708:	d81d      	bhi.n	800a746 <USBD_LL_DataOutStage+0xae>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <USBD_LL_DataOutStage+0x7c>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d003      	beq.n	800a71a <USBD_LL_DataOutStage+0x82>
 800a712:	e018      	b.n	800a746 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	75bb      	strb	r3, [r7, #22]
            break;
 800a718:	e018      	b.n	800a74c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a720:	b2db      	uxtb	r3, r3
 800a722:	4619      	mov	r1, r3
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 fa64 	bl	800abf2 <USBD_CoreFindIF>
 800a72a:	4603      	mov	r3, r0
 800a72c:	75bb      	strb	r3, [r7, #22]
            break;
 800a72e:	e00d      	b.n	800a74c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a736:	b2db      	uxtb	r3, r3
 800a738:	4619      	mov	r1, r3
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 fa66 	bl	800ac0c <USBD_CoreFindEP>
 800a740:	4603      	mov	r3, r0
 800a742:	75bb      	strb	r3, [r7, #22]
            break;
 800a744:	e002      	b.n	800a74c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	75bb      	strb	r3, [r7, #22]
            break;
 800a74a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a74c:	7dbb      	ldrb	r3, [r7, #22]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d119      	bne.n	800a786 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d113      	bne.n	800a786 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a75e:	7dba      	ldrb	r2, [r7, #22]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	32ae      	adds	r2, #174	@ 0xae
 800a764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00b      	beq.n	800a786 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a76e:	7dba      	ldrb	r2, [r7, #22]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a776:	7dba      	ldrb	r2, [r7, #22]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	32ae      	adds	r2, #174	@ 0xae
 800a77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f001 f984 	bl	800ba94 <USBD_CtlSendStatus>
 800a78c:	e032      	b.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a78e:	7afb      	ldrb	r3, [r7, #11]
 800a790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a794:	b2db      	uxtb	r3, r3
 800a796:	4619      	mov	r1, r3
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fa37 	bl	800ac0c <USBD_CoreFindEP>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7a2:	7dbb      	ldrb	r3, [r7, #22]
 800a7a4:	2bff      	cmp	r3, #255	@ 0xff
 800a7a6:	d025      	beq.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
 800a7a8:	7dbb      	ldrb	r3, [r7, #22]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d122      	bne.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d117      	bne.n	800a7ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7ba:	7dba      	ldrb	r2, [r7, #22]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	32ae      	adds	r2, #174	@ 0xae
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00f      	beq.n	800a7ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7ca:	7dba      	ldrb	r2, [r7, #22]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7d2:	7dba      	ldrb	r2, [r7, #22]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	32ae      	adds	r2, #174	@ 0xae
 800a7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	7afa      	ldrb	r2, [r7, #11]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	e000      	b.n	800a7f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	460b      	mov	r3, r1
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a80c:	7afb      	ldrb	r3, [r7, #11]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d16f      	bne.n	800a8f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3314      	adds	r3, #20
 800a816:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d15a      	bne.n	800a8d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d914      	bls.n	800a858 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	689a      	ldr	r2, [r3, #8]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	461a      	mov	r2, r3
 800a842:	6879      	ldr	r1, [r7, #4]
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f001 f8e6 	bl	800ba16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a84a:	2300      	movs	r3, #0
 800a84c:	2200      	movs	r2, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f001 fe09 	bl	800c468 <USBD_LL_PrepareReceive>
 800a856:	e03f      	b.n	800a8d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	429a      	cmp	r2, r3
 800a862:	d11c      	bne.n	800a89e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d316      	bcc.n	800a89e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d20f      	bcs.n	800a89e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f001 f8c7 	bl	800ba16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	2100      	movs	r1, #0
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f001 fde6 	bl	800c468 <USBD_LL_PrepareReceive>
 800a89c:	e01c      	b.n	800a8d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d10f      	bne.n	800a8ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d009      	beq.n	800a8ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ca:	2180      	movs	r1, #128	@ 0x80
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f001 fd21 	bl	800c314 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f001 f8f1 	bl	800baba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d03a      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fe42 	bl	800a56c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8f0:	e032      	b.n	800a958 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 f985 	bl	800ac0c <USBD_CoreFindEP>
 800a902:	4603      	mov	r3, r0
 800a904:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a906:	7dfb      	ldrb	r3, [r7, #23]
 800a908:	2bff      	cmp	r3, #255	@ 0xff
 800a90a:	d025      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d122      	bne.n	800a958 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d11c      	bne.n	800a958 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a91e:	7dfa      	ldrb	r2, [r7, #23]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	32ae      	adds	r2, #174	@ 0xae
 800a924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d014      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a92e:	7dfa      	ldrb	r2, [r7, #23]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a936:	7dfa      	ldrb	r2, [r7, #23]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	32ae      	adds	r2, #174	@ 0xae
 800a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	7afa      	ldrb	r2, [r7, #11]
 800a944:	4611      	mov	r1, r2
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	4798      	blx	r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a94e:	7dbb      	ldrb	r3, [r7, #22]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a954:	7dbb      	ldrb	r3, [r7, #22]
 800a956:	e000      	b.n	800a95a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d014      	beq.n	800a9c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00e      	beq.n	800a9c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	6852      	ldr	r2, [r2, #4]
 800a9b6:	b2d2      	uxtb	r2, r2
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4798      	blx	r3
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9c8:	2340      	movs	r3, #64	@ 0x40
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f001 fc5b 	bl	800c28a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2240      	movs	r2, #64	@ 0x40
 800a9e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9e4:	2340      	movs	r3, #64	@ 0x40
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2180      	movs	r1, #128	@ 0x80
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 fc4d 	bl	800c28a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2240      	movs	r2, #64	@ 0x40
 800a9fa:	621a      	str	r2, [r3, #32]

  return ret;
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d006      	beq.n	800aa48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2204      	movs	r2, #4
 800aa4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d106      	bne.n	800aa80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d110      	bne.n	800aac4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00b      	beq.n	800aac4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	32ae      	adds	r2, #174	@ 0xae
 800aae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e01c      	b.n	800ab2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d115      	bne.n	800ab28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	32ae      	adds	r2, #174	@ 0xae
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	32ae      	adds	r2, #174	@ 0xae
 800ab1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	78fa      	ldrb	r2, [r7, #3]
 800ab22:	4611      	mov	r1, r2
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	32ae      	adds	r2, #174	@ 0xae
 800ab48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e01c      	b.n	800ab8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d115      	bne.n	800ab8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	32ae      	adds	r2, #174	@ 0xae
 800ab6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	32ae      	adds	r2, #174	@ 0xae
 800ab7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab84:	78fa      	ldrb	r2, [r7, #3]
 800ab86:	4611      	mov	r1, r2
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00e      	beq.n	800abe8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	6852      	ldr	r2, [r2, #4]
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	4611      	mov	r1, r2
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abe4:	2303      	movs	r3, #3
 800abe6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abf2:	b480      	push	{r7}
 800abf4:	b083      	sub	sp, #12
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abfe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b086      	sub	sp, #24
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	885b      	ldrh	r3, [r3, #2]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	7812      	ldrb	r2, [r2, #0]
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d91f      	bls.n	800ac8c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac52:	e013      	b.n	800ac7c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac54:	f107 030a 	add.w	r3, r7, #10
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6978      	ldr	r0, [r7, #20]
 800ac5c:	f000 f81b 	bl	800ac96 <USBD_GetNextDesc>
 800ac60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	785b      	ldrb	r3, [r3, #1]
 800ac66:	2b05      	cmp	r3, #5
 800ac68:	d108      	bne.n	800ac7c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	789b      	ldrb	r3, [r3, #2]
 800ac72:	78fa      	ldrb	r2, [r7, #3]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d008      	beq.n	800ac8a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	885b      	ldrh	r3, [r3, #2]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	897b      	ldrh	r3, [r7, #10]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d8e5      	bhi.n	800ac54 <USBD_GetEpDesc+0x2e>
 800ac88:	e000      	b.n	800ac8c <USBD_GetEpDesc+0x66>
          break;
 800ac8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac8c:	693b      	ldr	r3, [r7, #16]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	7812      	ldrb	r2, [r2, #0]
 800acac:	4413      	add	r3, r2
 800acae:	b29a      	uxth	r2, r3
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	461a      	mov	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4413      	add	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acc0:	68fb      	ldr	r3, [r7, #12]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acce:	b480      	push	{r7}
 800acd0:	b087      	sub	sp, #28
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	3301      	adds	r3, #1
 800ace4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acec:	8a3b      	ldrh	r3, [r7, #16]
 800acee:	021b      	lsls	r3, r3, #8
 800acf0:	b21a      	sxth	r2, r3
 800acf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	b21b      	sxth	r3, r3
 800acfa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acfc:	89fb      	ldrh	r3, [r7, #14]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
	...

0800ad0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad22:	2b40      	cmp	r3, #64	@ 0x40
 800ad24:	d005      	beq.n	800ad32 <USBD_StdDevReq+0x26>
 800ad26:	2b40      	cmp	r3, #64	@ 0x40
 800ad28:	d857      	bhi.n	800adda <USBD_StdDevReq+0xce>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00f      	beq.n	800ad4e <USBD_StdDevReq+0x42>
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	d153      	bne.n	800adda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	32ae      	adds	r2, #174	@ 0xae
 800ad3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	4798      	blx	r3
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4c:	e04a      	b.n	800ade4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	785b      	ldrb	r3, [r3, #1]
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d83b      	bhi.n	800adce <USBD_StdDevReq+0xc2>
 800ad56:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <USBD_StdDevReq+0x50>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800adb1 	.word	0x0800adb1
 800ad60:	0800adc5 	.word	0x0800adc5
 800ad64:	0800adcf 	.word	0x0800adcf
 800ad68:	0800adbb 	.word	0x0800adbb
 800ad6c:	0800adcf 	.word	0x0800adcf
 800ad70:	0800ad8f 	.word	0x0800ad8f
 800ad74:	0800ad85 	.word	0x0800ad85
 800ad78:	0800adcf 	.word	0x0800adcf
 800ad7c:	0800ada7 	.word	0x0800ada7
 800ad80:	0800ad99 	.word	0x0800ad99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa3c 	bl	800b204 <USBD_GetDescriptor>
          break;
 800ad8c:	e024      	b.n	800add8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fbcb 	bl	800b52c <USBD_SetAddress>
          break;
 800ad96:	e01f      	b.n	800add8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fc0a 	bl	800b5b4 <USBD_SetConfig>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]
          break;
 800ada4:	e018      	b.n	800add8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fcad 	bl	800b708 <USBD_GetConfig>
          break;
 800adae:	e013      	b.n	800add8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fcde 	bl	800b774 <USBD_GetStatus>
          break;
 800adb8:	e00e      	b.n	800add8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fd0d 	bl	800b7dc <USBD_SetFeature>
          break;
 800adc2:	e009      	b.n	800add8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fd31 	bl	800b82e <USBD_ClrFeature>
          break;
 800adcc:	e004      	b.n	800add8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fd88 	bl	800b8e6 <USBD_CtlError>
          break;
 800add6:	bf00      	nop
      }
      break;
 800add8:	e004      	b.n	800ade4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fd82 	bl	800b8e6 <USBD_CtlError>
      break;
 800ade2:	bf00      	nop
  }

  return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop

0800adf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae06:	2b40      	cmp	r3, #64	@ 0x40
 800ae08:	d005      	beq.n	800ae16 <USBD_StdItfReq+0x26>
 800ae0a:	2b40      	cmp	r3, #64	@ 0x40
 800ae0c:	d852      	bhi.n	800aeb4 <USBD_StdItfReq+0xc4>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <USBD_StdItfReq+0x26>
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d14e      	bne.n	800aeb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d840      	bhi.n	800aea6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	889b      	ldrh	r3, [r3, #4]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d836      	bhi.n	800ae9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	889b      	ldrh	r3, [r3, #4]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7ff fedb 	bl	800abf2 <USBD_CoreFindIF>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2bff      	cmp	r3, #255	@ 0xff
 800ae44:	d01d      	beq.n	800ae82 <USBD_StdItfReq+0x92>
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d11a      	bne.n	800ae82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae4c:	7bba      	ldrb	r2, [r7, #14]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	32ae      	adds	r2, #174	@ 0xae
 800ae52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00f      	beq.n	800ae7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae5c:	7bba      	ldrb	r2, [r7, #14]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae64:	7bba      	ldrb	r2, [r7, #14]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	32ae      	adds	r2, #174	@ 0xae
 800ae6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	4798      	blx	r3
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae7a:	e004      	b.n	800ae86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae80:	e001      	b.n	800ae86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae82:	2303      	movs	r3, #3
 800ae84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	88db      	ldrh	r3, [r3, #6]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d110      	bne.n	800aeb0 <USBD_StdItfReq+0xc0>
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10d      	bne.n	800aeb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fdfd 	bl	800ba94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae9a:	e009      	b.n	800aeb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fd21 	bl	800b8e6 <USBD_CtlError>
          break;
 800aea4:	e004      	b.n	800aeb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fd1c 	bl	800b8e6 <USBD_CtlError>
          break;
 800aeae:	e000      	b.n	800aeb2 <USBD_StdItfReq+0xc2>
          break;
 800aeb0:	bf00      	nop
      }
      break;
 800aeb2:	e004      	b.n	800aebe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fd15 	bl	800b8e6 <USBD_CtlError>
      break;
 800aebc:	bf00      	nop
  }

  return ret;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	889b      	ldrh	r3, [r3, #4]
 800aeda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aee4:	2b40      	cmp	r3, #64	@ 0x40
 800aee6:	d007      	beq.n	800aef8 <USBD_StdEPReq+0x30>
 800aee8:	2b40      	cmp	r3, #64	@ 0x40
 800aeea:	f200 817f 	bhi.w	800b1ec <USBD_StdEPReq+0x324>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d02a      	beq.n	800af48 <USBD_StdEPReq+0x80>
 800aef2:	2b20      	cmp	r3, #32
 800aef4:	f040 817a 	bne.w	800b1ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff fe85 	bl	800ac0c <USBD_CoreFindEP>
 800af02:	4603      	mov	r3, r0
 800af04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af06:	7b7b      	ldrb	r3, [r7, #13]
 800af08:	2bff      	cmp	r3, #255	@ 0xff
 800af0a:	f000 8174 	beq.w	800b1f6 <USBD_StdEPReq+0x32e>
 800af0e:	7b7b      	ldrb	r3, [r7, #13]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f040 8170 	bne.w	800b1f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af16:	7b7a      	ldrb	r2, [r7, #13]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af1e:	7b7a      	ldrb	r2, [r7, #13]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	32ae      	adds	r2, #174	@ 0xae
 800af24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 8163 	beq.w	800b1f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af30:	7b7a      	ldrb	r2, [r7, #13]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	32ae      	adds	r2, #174	@ 0xae
 800af36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	4798      	blx	r3
 800af42:	4603      	mov	r3, r0
 800af44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af46:	e156      	b.n	800b1f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	785b      	ldrb	r3, [r3, #1]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d008      	beq.n	800af62 <USBD_StdEPReq+0x9a>
 800af50:	2b03      	cmp	r3, #3
 800af52:	f300 8145 	bgt.w	800b1e0 <USBD_StdEPReq+0x318>
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 809b 	beq.w	800b092 <USBD_StdEPReq+0x1ca>
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d03c      	beq.n	800afda <USBD_StdEPReq+0x112>
 800af60:	e13e      	b.n	800b1e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d002      	beq.n	800af74 <USBD_StdEPReq+0xac>
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d016      	beq.n	800afa0 <USBD_StdEPReq+0xd8>
 800af72:	e02c      	b.n	800afce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00d      	beq.n	800af96 <USBD_StdEPReq+0xce>
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b80      	cmp	r3, #128	@ 0x80
 800af7e:	d00a      	beq.n	800af96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af80:	7bbb      	ldrb	r3, [r7, #14]
 800af82:	4619      	mov	r1, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f001 f9c5 	bl	800c314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af8a:	2180      	movs	r1, #128	@ 0x80
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 f9c1 	bl	800c314 <USBD_LL_StallEP>
 800af92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af94:	e020      	b.n	800afd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fca4 	bl	800b8e6 <USBD_CtlError>
              break;
 800af9e:	e01b      	b.n	800afd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	885b      	ldrh	r3, [r3, #2]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10e      	bne.n	800afc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00b      	beq.n	800afc6 <USBD_StdEPReq+0xfe>
 800afae:	7bbb      	ldrb	r3, [r7, #14]
 800afb0:	2b80      	cmp	r3, #128	@ 0x80
 800afb2:	d008      	beq.n	800afc6 <USBD_StdEPReq+0xfe>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	88db      	ldrh	r3, [r3, #6]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d104      	bne.n	800afc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f001 f9a7 	bl	800c314 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fd64 	bl	800ba94 <USBD_CtlSendStatus>

              break;
 800afcc:	e004      	b.n	800afd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fc88 	bl	800b8e6 <USBD_CtlError>
              break;
 800afd6:	bf00      	nop
          }
          break;
 800afd8:	e107      	b.n	800b1ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d002      	beq.n	800afec <USBD_StdEPReq+0x124>
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d016      	beq.n	800b018 <USBD_StdEPReq+0x150>
 800afea:	e04b      	b.n	800b084 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00d      	beq.n	800b00e <USBD_StdEPReq+0x146>
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	2b80      	cmp	r3, #128	@ 0x80
 800aff6:	d00a      	beq.n	800b00e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f001 f989 	bl	800c314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b002:	2180      	movs	r1, #128	@ 0x80
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 f985 	bl	800c314 <USBD_LL_StallEP>
 800b00a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b00c:	e040      	b.n	800b090 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fc68 	bl	800b8e6 <USBD_CtlError>
              break;
 800b016:	e03b      	b.n	800b090 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	885b      	ldrh	r3, [r3, #2]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d136      	bne.n	800b08e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b026:	2b00      	cmp	r3, #0
 800b028:	d004      	beq.n	800b034 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f001 f98f 	bl	800c352 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fd2d 	bl	800ba94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff fde4 	bl	800ac0c <USBD_CoreFindEP>
 800b044:	4603      	mov	r3, r0
 800b046:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b048:	7b7b      	ldrb	r3, [r7, #13]
 800b04a:	2bff      	cmp	r3, #255	@ 0xff
 800b04c:	d01f      	beq.n	800b08e <USBD_StdEPReq+0x1c6>
 800b04e:	7b7b      	ldrb	r3, [r7, #13]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d11c      	bne.n	800b08e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b054:	7b7a      	ldrb	r2, [r7, #13]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b05c:	7b7a      	ldrb	r2, [r7, #13]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	32ae      	adds	r2, #174	@ 0xae
 800b062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d010      	beq.n	800b08e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b06c:	7b7a      	ldrb	r2, [r7, #13]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32ae      	adds	r2, #174	@ 0xae
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b082:	e004      	b.n	800b08e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fc2d 	bl	800b8e6 <USBD_CtlError>
              break;
 800b08c:	e000      	b.n	800b090 <USBD_StdEPReq+0x1c8>
              break;
 800b08e:	bf00      	nop
          }
          break;
 800b090:	e0ab      	b.n	800b1ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d002      	beq.n	800b0a4 <USBD_StdEPReq+0x1dc>
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d032      	beq.n	800b108 <USBD_StdEPReq+0x240>
 800b0a2:	e097      	b.n	800b1d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d007      	beq.n	800b0ba <USBD_StdEPReq+0x1f2>
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	2b80      	cmp	r3, #128	@ 0x80
 800b0ae:	d004      	beq.n	800b0ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fc17 	bl	800b8e6 <USBD_CtlError>
                break;
 800b0b8:	e091      	b.n	800b1de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da0b      	bge.n	800b0da <USBD_StdEPReq+0x212>
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	3310      	adds	r3, #16
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	e00b      	b.n	800b0f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2202      	movs	r2, #2
 800b0fe:	4619      	mov	r1, r3
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fc6d 	bl	800b9e0 <USBD_CtlSendData>
              break;
 800b106:	e06a      	b.n	800b1de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	da11      	bge.n	800b134 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	f003 020f 	and.w	r2, r3, #15
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	4613      	mov	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	440b      	add	r3, r1
 800b122:	3324      	adds	r3, #36	@ 0x24
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d117      	bne.n	800b15a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fbda 	bl	800b8e6 <USBD_CtlError>
                  break;
 800b132:	e054      	b.n	800b1de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	f003 020f 	and.w	r2, r3, #15
 800b13a:	6879      	ldr	r1, [r7, #4]
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	440b      	add	r3, r1
 800b146:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fbc7 	bl	800b8e6 <USBD_CtlError>
                  break;
 800b158:	e041      	b.n	800b1de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b15a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	da0b      	bge.n	800b17a <USBD_StdEPReq+0x2b2>
 800b162:	7bbb      	ldrb	r3, [r7, #14]
 800b164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	3310      	adds	r3, #16
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	4413      	add	r3, r2
 800b176:	3304      	adds	r3, #4
 800b178:	e00b      	b.n	800b192 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	4413      	add	r3, r2
 800b190:	3304      	adds	r3, #4
 800b192:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b194:	7bbb      	ldrb	r3, [r7, #14]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <USBD_StdEPReq+0x2d8>
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	2b80      	cmp	r3, #128	@ 0x80
 800b19e:	d103      	bne.n	800b1a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	e00e      	b.n	800b1c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 f8ef 	bl	800c390 <USBD_LL_IsStallEP>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	e002      	b.n	800b1c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fc07 	bl	800b9e0 <USBD_CtlSendData>
              break;
 800b1d2:	e004      	b.n	800b1de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fb85 	bl	800b8e6 <USBD_CtlError>
              break;
 800b1dc:	bf00      	nop
          }
          break;
 800b1de:	e004      	b.n	800b1ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fb7f 	bl	800b8e6 <USBD_CtlError>
          break;
 800b1e8:	bf00      	nop
      }
      break;
 800b1ea:	e005      	b.n	800b1f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fb79 	bl	800b8e6 <USBD_CtlError>
      break;
 800b1f4:	e000      	b.n	800b1f8 <USBD_StdEPReq+0x330>
      break;
 800b1f6:	bf00      	nop
  }

  return ret;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	885b      	ldrh	r3, [r3, #2]
 800b21e:	0a1b      	lsrs	r3, r3, #8
 800b220:	b29b      	uxth	r3, r3
 800b222:	3b01      	subs	r3, #1
 800b224:	2b0e      	cmp	r3, #14
 800b226:	f200 8152 	bhi.w	800b4ce <USBD_GetDescriptor+0x2ca>
 800b22a:	a201      	add	r2, pc, #4	@ (adr r2, 800b230 <USBD_GetDescriptor+0x2c>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b2a1 	.word	0x0800b2a1
 800b234:	0800b2b9 	.word	0x0800b2b9
 800b238:	0800b2f9 	.word	0x0800b2f9
 800b23c:	0800b4cf 	.word	0x0800b4cf
 800b240:	0800b4cf 	.word	0x0800b4cf
 800b244:	0800b46f 	.word	0x0800b46f
 800b248:	0800b49b 	.word	0x0800b49b
 800b24c:	0800b4cf 	.word	0x0800b4cf
 800b250:	0800b4cf 	.word	0x0800b4cf
 800b254:	0800b4cf 	.word	0x0800b4cf
 800b258:	0800b4cf 	.word	0x0800b4cf
 800b25c:	0800b4cf 	.word	0x0800b4cf
 800b260:	0800b4cf 	.word	0x0800b4cf
 800b264:	0800b4cf 	.word	0x0800b4cf
 800b268:	0800b26d 	.word	0x0800b26d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00b      	beq.n	800b290 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b27e:	69db      	ldr	r3, [r3, #28]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	7c12      	ldrb	r2, [r2, #16]
 800b284:	f107 0108 	add.w	r1, r7, #8
 800b288:	4610      	mov	r0, r2
 800b28a:	4798      	blx	r3
 800b28c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b28e:	e126      	b.n	800b4de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fb27 	bl	800b8e6 <USBD_CtlError>
        err++;
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	3301      	adds	r3, #1
 800b29c:	72fb      	strb	r3, [r7, #11]
      break;
 800b29e:	e11e      	b.n	800b4de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	7c12      	ldrb	r2, [r2, #16]
 800b2ac:	f107 0108 	add.w	r1, r7, #8
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
 800b2b4:	60f8      	str	r0, [r7, #12]
      break;
 800b2b6:	e112      	b.n	800b4de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	7c1b      	ldrb	r3, [r3, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10d      	bne.n	800b2dc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c8:	f107 0208 	add.w	r2, r7, #8
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4798      	blx	r3
 800b2d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2da:	e100      	b.n	800b4de <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e4:	f107 0208 	add.w	r2, r7, #8
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	701a      	strb	r2, [r3, #0]
      break;
 800b2f6:	e0f2      	b.n	800b4de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	885b      	ldrh	r3, [r3, #2]
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b05      	cmp	r3, #5
 800b300:	f200 80ac 	bhi.w	800b45c <USBD_GetDescriptor+0x258>
 800b304:	a201      	add	r2, pc, #4	@ (adr r2, 800b30c <USBD_GetDescriptor+0x108>)
 800b306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30a:	bf00      	nop
 800b30c:	0800b325 	.word	0x0800b325
 800b310:	0800b359 	.word	0x0800b359
 800b314:	0800b38d 	.word	0x0800b38d
 800b318:	0800b3c1 	.word	0x0800b3c1
 800b31c:	0800b3f5 	.word	0x0800b3f5
 800b320:	0800b429 	.word	0x0800b429
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00b      	beq.n	800b348 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	7c12      	ldrb	r2, [r2, #16]
 800b33c:	f107 0108 	add.w	r1, r7, #8
 800b340:	4610      	mov	r0, r2
 800b342:	4798      	blx	r3
 800b344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b346:	e091      	b.n	800b46c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 facb 	bl	800b8e6 <USBD_CtlError>
            err++;
 800b350:	7afb      	ldrb	r3, [r7, #11]
 800b352:	3301      	adds	r3, #1
 800b354:	72fb      	strb	r3, [r7, #11]
          break;
 800b356:	e089      	b.n	800b46c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00b      	beq.n	800b37c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	7c12      	ldrb	r2, [r2, #16]
 800b370:	f107 0108 	add.w	r1, r7, #8
 800b374:	4610      	mov	r0, r2
 800b376:	4798      	blx	r3
 800b378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b37a:	e077      	b.n	800b46c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b37c:	6839      	ldr	r1, [r7, #0]
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fab1 	bl	800b8e6 <USBD_CtlError>
            err++;
 800b384:	7afb      	ldrb	r3, [r7, #11]
 800b386:	3301      	adds	r3, #1
 800b388:	72fb      	strb	r3, [r7, #11]
          break;
 800b38a:	e06f      	b.n	800b46c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00b      	beq.n	800b3b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	7c12      	ldrb	r2, [r2, #16]
 800b3a4:	f107 0108 	add.w	r1, r7, #8
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	4798      	blx	r3
 800b3ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ae:	e05d      	b.n	800b46c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fa97 	bl	800b8e6 <USBD_CtlError>
            err++;
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3be:	e055      	b.n	800b46c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00b      	beq.n	800b3e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	7c12      	ldrb	r2, [r2, #16]
 800b3d8:	f107 0108 	add.w	r1, r7, #8
 800b3dc:	4610      	mov	r0, r2
 800b3de:	4798      	blx	r3
 800b3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3e2:	e043      	b.n	800b46c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fa7d 	bl	800b8e6 <USBD_CtlError>
            err++;
 800b3ec:	7afb      	ldrb	r3, [r7, #11]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3f2:	e03b      	b.n	800b46c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00b      	beq.n	800b418 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	7c12      	ldrb	r2, [r2, #16]
 800b40c:	f107 0108 	add.w	r1, r7, #8
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
 800b414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b416:	e029      	b.n	800b46c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fa63 	bl	800b8e6 <USBD_CtlError>
            err++;
 800b420:	7afb      	ldrb	r3, [r7, #11]
 800b422:	3301      	adds	r3, #1
 800b424:	72fb      	strb	r3, [r7, #11]
          break;
 800b426:	e021      	b.n	800b46c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00b      	beq.n	800b44c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7c12      	ldrb	r2, [r2, #16]
 800b440:	f107 0108 	add.w	r1, r7, #8
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b44a:	e00f      	b.n	800b46c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa49 	bl	800b8e6 <USBD_CtlError>
            err++;
 800b454:	7afb      	ldrb	r3, [r7, #11]
 800b456:	3301      	adds	r3, #1
 800b458:	72fb      	strb	r3, [r7, #11]
          break;
 800b45a:	e007      	b.n	800b46c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa41 	bl	800b8e6 <USBD_CtlError>
          err++;
 800b464:	7afb      	ldrb	r3, [r7, #11]
 800b466:	3301      	adds	r3, #1
 800b468:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b46a:	bf00      	nop
      }
      break;
 800b46c:	e037      	b.n	800b4de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	7c1b      	ldrb	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d109      	bne.n	800b48a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b47e:	f107 0208 	add.w	r2, r7, #8
 800b482:	4610      	mov	r0, r2
 800b484:	4798      	blx	r3
 800b486:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b488:	e029      	b.n	800b4de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fa2a 	bl	800b8e6 <USBD_CtlError>
        err++;
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	3301      	adds	r3, #1
 800b496:	72fb      	strb	r3, [r7, #11]
      break;
 800b498:	e021      	b.n	800b4de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7c1b      	ldrb	r3, [r3, #16]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10d      	bne.n	800b4be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4aa:	f107 0208 	add.w	r2, r7, #8
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4798      	blx	r3
 800b4b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	2207      	movs	r2, #7
 800b4ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4bc:	e00f      	b.n	800b4de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fa10 	bl	800b8e6 <USBD_CtlError>
        err++;
 800b4c6:	7afb      	ldrb	r3, [r7, #11]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	72fb      	strb	r3, [r7, #11]
      break;
 800b4cc:	e007      	b.n	800b4de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fa08 	bl	800b8e6 <USBD_CtlError>
      err++;
 800b4d6:	7afb      	ldrb	r3, [r7, #11]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	72fb      	strb	r3, [r7, #11]
      break;
 800b4dc:	bf00      	nop
  }

  if (err != 0U)
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d11e      	bne.n	800b522 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	88db      	ldrh	r3, [r3, #6]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d016      	beq.n	800b51a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b4ec:	893b      	ldrh	r3, [r7, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00e      	beq.n	800b510 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	88da      	ldrh	r2, [r3, #6]
 800b4f6:	893b      	ldrh	r3, [r7, #8]
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	bf28      	it	cs
 800b4fc:	4613      	movcs	r3, r2
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b502:	893b      	ldrh	r3, [r7, #8]
 800b504:	461a      	mov	r2, r3
 800b506:	68f9      	ldr	r1, [r7, #12]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fa69 	bl	800b9e0 <USBD_CtlSendData>
 800b50e:	e009      	b.n	800b524 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f9e7 	bl	800b8e6 <USBD_CtlError>
 800b518:	e004      	b.n	800b524 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 faba 	bl	800ba94 <USBD_CtlSendStatus>
 800b520:	e000      	b.n	800b524 <USBD_GetDescriptor+0x320>
    return;
 800b522:	bf00      	nop
  }
}
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop

0800b52c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	889b      	ldrh	r3, [r3, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d131      	bne.n	800b5a2 <USBD_SetAddress+0x76>
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	88db      	ldrh	r3, [r3, #6]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d12d      	bne.n	800b5a2 <USBD_SetAddress+0x76>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	885b      	ldrh	r3, [r3, #2]
 800b54a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b54c:	d829      	bhi.n	800b5a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	885b      	ldrh	r3, [r3, #2]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b558:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b03      	cmp	r3, #3
 800b564:	d104      	bne.n	800b570 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f9bc 	bl	800b8e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b56e:	e01d      	b.n	800b5ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	7bfa      	ldrb	r2, [r7, #15]
 800b574:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 ff33 	bl	800c3e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fa86 	bl	800ba94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d004      	beq.n	800b598 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2202      	movs	r2, #2
 800b592:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b596:	e009      	b.n	800b5ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a0:	e004      	b.n	800b5ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f99e 	bl	800b8e6 <USBD_CtlError>
  }
}
 800b5aa:	bf00      	nop
 800b5ac:	bf00      	nop
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	885b      	ldrh	r3, [r3, #2]
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	4b4e      	ldr	r3, [pc, #312]	@ (800b704 <USBD_SetConfig+0x150>)
 800b5ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5cc:	4b4d      	ldr	r3, [pc, #308]	@ (800b704 <USBD_SetConfig+0x150>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d905      	bls.n	800b5e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f985 	bl	800b8e6 <USBD_CtlError>
    return USBD_FAIL;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e08c      	b.n	800b6fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d002      	beq.n	800b5f2 <USBD_SetConfig+0x3e>
 800b5ec:	2b03      	cmp	r3, #3
 800b5ee:	d029      	beq.n	800b644 <USBD_SetConfig+0x90>
 800b5f0:	e075      	b.n	800b6de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5f2:	4b44      	ldr	r3, [pc, #272]	@ (800b704 <USBD_SetConfig+0x150>)
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d020      	beq.n	800b63c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b5fa:	4b42      	ldr	r3, [pc, #264]	@ (800b704 <USBD_SetConfig+0x150>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b604:	4b3f      	ldr	r3, [pc, #252]	@ (800b704 <USBD_SetConfig+0x150>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7fe ffb9 	bl	800a582 <USBD_SetClassConfig>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d008      	beq.n	800b62c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f962 	bl	800b8e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2202      	movs	r2, #2
 800b626:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b62a:	e065      	b.n	800b6f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fa31 	bl	800ba94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2203      	movs	r2, #3
 800b636:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b63a:	e05d      	b.n	800b6f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fa29 	bl	800ba94 <USBD_CtlSendStatus>
      break;
 800b642:	e059      	b.n	800b6f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b644:	4b2f      	ldr	r3, [pc, #188]	@ (800b704 <USBD_SetConfig+0x150>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d112      	bne.n	800b672 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b654:	4b2b      	ldr	r3, [pc, #172]	@ (800b704 <USBD_SetConfig+0x150>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	461a      	mov	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b65e:	4b29      	ldr	r3, [pc, #164]	@ (800b704 <USBD_SetConfig+0x150>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7fe ffa8 	bl	800a5ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fa12 	bl	800ba94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b670:	e042      	b.n	800b6f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b672:	4b24      	ldr	r3, [pc, #144]	@ (800b704 <USBD_SetConfig+0x150>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d02a      	beq.n	800b6d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	b2db      	uxtb	r3, r3
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7fe ff96 	bl	800a5ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b68e:	4b1d      	ldr	r3, [pc, #116]	@ (800b704 <USBD_SetConfig+0x150>)
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b698:	4b1a      	ldr	r3, [pc, #104]	@ (800b704 <USBD_SetConfig+0x150>)
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7fe ff6f 	bl	800a582 <USBD_SetClassConfig>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00f      	beq.n	800b6ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f918 	bl	800b8e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7fe ff7b 	bl	800a5ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b6cc:	e014      	b.n	800b6f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f9e0 	bl	800ba94 <USBD_CtlSendStatus>
      break;
 800b6d4:	e010      	b.n	800b6f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f9dc 	bl	800ba94 <USBD_CtlSendStatus>
      break;
 800b6dc:	e00c      	b.n	800b6f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f900 	bl	800b8e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6e6:	4b07      	ldr	r3, [pc, #28]	@ (800b704 <USBD_SetConfig+0x150>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7fe ff64 	bl	800a5ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f6:	bf00      	nop
  }

  return ret;
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	240002c8 	.word	0x240002c8

0800b708 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	88db      	ldrh	r3, [r3, #6]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d004      	beq.n	800b724 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f8e2 	bl	800b8e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b722:	e023      	b.n	800b76c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	dc02      	bgt.n	800b736 <USBD_GetConfig+0x2e>
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc03      	bgt.n	800b73c <USBD_GetConfig+0x34>
 800b734:	e015      	b.n	800b762 <USBD_GetConfig+0x5a>
 800b736:	2b03      	cmp	r3, #3
 800b738:	d00b      	beq.n	800b752 <USBD_GetConfig+0x4a>
 800b73a:	e012      	b.n	800b762 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3308      	adds	r3, #8
 800b746:	2201      	movs	r2, #1
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f948 	bl	800b9e0 <USBD_CtlSendData>
        break;
 800b750:	e00c      	b.n	800b76c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3304      	adds	r3, #4
 800b756:	2201      	movs	r2, #1
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f940 	bl	800b9e0 <USBD_CtlSendData>
        break;
 800b760:	e004      	b.n	800b76c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f8be 	bl	800b8e6 <USBD_CtlError>
        break;
 800b76a:	bf00      	nop
}
 800b76c:	bf00      	nop
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b784:	b2db      	uxtb	r3, r3
 800b786:	3b01      	subs	r3, #1
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d81e      	bhi.n	800b7ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	88db      	ldrh	r3, [r3, #6]
 800b790:	2b02      	cmp	r3, #2
 800b792:	d004      	beq.n	800b79e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f8a5 	bl	800b8e6 <USBD_CtlError>
        break;
 800b79c:	e01a      	b.n	800b7d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	f043 0202 	orr.w	r2, r3, #2
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	330c      	adds	r3, #12
 800b7be:	2202      	movs	r2, #2
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f90c 	bl	800b9e0 <USBD_CtlSendData>
      break;
 800b7c8:	e004      	b.n	800b7d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f88a 	bl	800b8e6 <USBD_CtlError>
      break;
 800b7d2:	bf00      	nop
  }
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	885b      	ldrh	r3, [r3, #2]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d107      	bne.n	800b7fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f94c 	bl	800ba94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7fc:	e013      	b.n	800b826 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	885b      	ldrh	r3, [r3, #2]
 800b802:	2b02      	cmp	r3, #2
 800b804:	d10b      	bne.n	800b81e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	889b      	ldrh	r3, [r3, #4]
 800b80a:	0a1b      	lsrs	r3, r3, #8
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f93c 	bl	800ba94 <USBD_CtlSendStatus>
}
 800b81c:	e003      	b.n	800b826 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f860 	bl	800b8e6 <USBD_CtlError>
}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	3b01      	subs	r3, #1
 800b842:	2b02      	cmp	r3, #2
 800b844:	d80b      	bhi.n	800b85e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	885b      	ldrh	r3, [r3, #2]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d10c      	bne.n	800b868 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f91c 	bl	800ba94 <USBD_CtlSendStatus>
      }
      break;
 800b85c:	e004      	b.n	800b868 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f840 	bl	800b8e6 <USBD_CtlError>
      break;
 800b866:	e000      	b.n	800b86a <USBD_ClrFeature+0x3c>
      break;
 800b868:	bf00      	nop
  }
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b084      	sub	sp, #16
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	781a      	ldrb	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3301      	adds	r3, #1
 800b88c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	781a      	ldrb	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3301      	adds	r3, #1
 800b89a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fa16 	bl	800acce <SWAPBYTE>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff fa09 	bl	800acce <SWAPBYTE>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	461a      	mov	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7ff f9fc 	bl	800acce <SWAPBYTE>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	461a      	mov	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	80da      	strh	r2, [r3, #6]
}
 800b8de:	bf00      	nop
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8f0:	2180      	movs	r1, #128	@ 0x80
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fd0e 	bl	800c314 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fd0a 	bl	800c314 <USBD_LL_StallEP>
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d042      	beq.n	800b9a4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b922:	6938      	ldr	r0, [r7, #16]
 800b924:	f000 f842 	bl	800b9ac <USBD_GetLen>
 800b928:	4603      	mov	r3, r0
 800b92a:	3301      	adds	r3, #1
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b932:	d808      	bhi.n	800b946 <USBD_GetString+0x3e>
 800b934:	6938      	ldr	r0, [r7, #16]
 800b936:	f000 f839 	bl	800b9ac <USBD_GetLen>
 800b93a:	4603      	mov	r3, r0
 800b93c:	3301      	adds	r3, #1
 800b93e:	b29b      	uxth	r3, r3
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	b29a      	uxth	r2, r3
 800b944:	e001      	b.n	800b94a <USBD_GetString+0x42>
 800b946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	4413      	add	r3, r2
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	7812      	ldrb	r2, [r2, #0]
 800b958:	701a      	strb	r2, [r3, #0]
  idx++;
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	3301      	adds	r3, #1
 800b95e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	4413      	add	r3, r2
 800b966:	2203      	movs	r2, #3
 800b968:	701a      	strb	r2, [r3, #0]
  idx++;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	3301      	adds	r3, #1
 800b96e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b970:	e013      	b.n	800b99a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	4413      	add	r3, r2
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	7812      	ldrb	r2, [r2, #0]
 800b97c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	3301      	adds	r3, #1
 800b982:	613b      	str	r3, [r7, #16]
    idx++;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	3301      	adds	r3, #1
 800b988:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	4413      	add	r3, r2
 800b990:	2200      	movs	r2, #0
 800b992:	701a      	strb	r2, [r3, #0]
    idx++;
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	3301      	adds	r3, #1
 800b998:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1e7      	bne.n	800b972 <USBD_GetString+0x6a>
 800b9a2:	e000      	b.n	800b9a6 <USBD_GetString+0x9e>
    return;
 800b9a4:	bf00      	nop
  }
}
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9bc:	e005      	b.n	800b9ca <USBD_GetLen+0x1e>
  {
    len++;
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1f5      	bne.n	800b9be <USBD_GetLen+0x12>
  }

  return len;
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	2100      	movs	r1, #0
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f000 fd0d 	bl	800c426 <USBD_LL_Transmit>

  return USBD_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	2100      	movs	r1, #0
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f000 fcfc 	bl	800c426 <USBD_LL_Transmit>

  return USBD_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2203      	movs	r2, #3
 800ba48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	2100      	movs	r1, #0
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 fd00 	bl	800c468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	60f8      	str	r0, [r7, #12]
 800ba7a:	60b9      	str	r1, [r7, #8]
 800ba7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	2100      	movs	r1, #0
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f000 fcef 	bl	800c468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2204      	movs	r2, #4
 800baa0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800baa4:	2300      	movs	r3, #0
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fcbb 	bl	800c426 <USBD_LL_Transmit>

  return USBD_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2205      	movs	r2, #5
 800bac6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baca:	2300      	movs	r3, #0
 800bacc:	2200      	movs	r2, #0
 800bace:	2100      	movs	r1, #0
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fcc9 	bl	800c468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800bae4:	2201      	movs	r2, #1
 800bae6:	4913      	ldr	r1, [pc, #76]	@ (800bb34 <MX_USB_DEVICE_Init+0x54>)
 800bae8:	4813      	ldr	r0, [pc, #76]	@ (800bb38 <MX_USB_DEVICE_Init+0x58>)
 800baea:	f7fe fccd 	bl	800a488 <USBD_Init>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800baf4:	f7f5 f948 	bl	8000d88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800baf8:	4910      	ldr	r1, [pc, #64]	@ (800bb3c <MX_USB_DEVICE_Init+0x5c>)
 800bafa:	480f      	ldr	r0, [pc, #60]	@ (800bb38 <MX_USB_DEVICE_Init+0x58>)
 800bafc:	f7fe fcf4 	bl	800a4e8 <USBD_RegisterClass>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb06:	f7f5 f93f 	bl	8000d88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800bb0a:	490d      	ldr	r1, [pc, #52]	@ (800bb40 <MX_USB_DEVICE_Init+0x60>)
 800bb0c:	480a      	ldr	r0, [pc, #40]	@ (800bb38 <MX_USB_DEVICE_Init+0x58>)
 800bb0e:	f7fe fbeb 	bl	800a2e8 <USBD_CDC_RegisterInterface>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb18:	f7f5 f936 	bl	8000d88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800bb1c:	4806      	ldr	r0, [pc, #24]	@ (800bb38 <MX_USB_DEVICE_Init+0x58>)
 800bb1e:	f7fe fd19 	bl	800a554 <USBD_Start>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb28:	f7f5 f92e 	bl	8000d88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bb2c:	f7f8 fdc2 	bl	80046b4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb30:	bf00      	nop
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	240000b8 	.word	0x240000b8
 800bb38:	240002cc 	.word	0x240002cc
 800bb3c:	24000024 	.word	0x24000024
 800bb40:	240000a4 	.word	0x240000a4

0800bb44 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800bb48:	2200      	movs	r2, #0
 800bb4a:	4905      	ldr	r1, [pc, #20]	@ (800bb60 <CDC_Init_HS+0x1c>)
 800bb4c:	4805      	ldr	r0, [pc, #20]	@ (800bb64 <CDC_Init_HS+0x20>)
 800bb4e:	f7fe fbe5 	bl	800a31c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800bb52:	4905      	ldr	r1, [pc, #20]	@ (800bb68 <CDC_Init_HS+0x24>)
 800bb54:	4803      	ldr	r0, [pc, #12]	@ (800bb64 <CDC_Init_HS+0x20>)
 800bb56:	f7fe fc03 	bl	800a360 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb5a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	24000da8 	.word	0x24000da8
 800bb64:	240002cc 	.word	0x240002cc
 800bb68:	240005a8 	.word	0x240005a8

0800bb6c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800bb70:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	6039      	str	r1, [r7, #0]
 800bb86:	71fb      	strb	r3, [r7, #7]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	2b23      	cmp	r3, #35	@ 0x23
 800bb90:	d84a      	bhi.n	800bc28 <CDC_Control_HS+0xac>
 800bb92:	a201      	add	r2, pc, #4	@ (adr r2, 800bb98 <CDC_Control_HS+0x1c>)
 800bb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb98:	0800bc29 	.word	0x0800bc29
 800bb9c:	0800bc29 	.word	0x0800bc29
 800bba0:	0800bc29 	.word	0x0800bc29
 800bba4:	0800bc29 	.word	0x0800bc29
 800bba8:	0800bc29 	.word	0x0800bc29
 800bbac:	0800bc29 	.word	0x0800bc29
 800bbb0:	0800bc29 	.word	0x0800bc29
 800bbb4:	0800bc29 	.word	0x0800bc29
 800bbb8:	0800bc29 	.word	0x0800bc29
 800bbbc:	0800bc29 	.word	0x0800bc29
 800bbc0:	0800bc29 	.word	0x0800bc29
 800bbc4:	0800bc29 	.word	0x0800bc29
 800bbc8:	0800bc29 	.word	0x0800bc29
 800bbcc:	0800bc29 	.word	0x0800bc29
 800bbd0:	0800bc29 	.word	0x0800bc29
 800bbd4:	0800bc29 	.word	0x0800bc29
 800bbd8:	0800bc29 	.word	0x0800bc29
 800bbdc:	0800bc29 	.word	0x0800bc29
 800bbe0:	0800bc29 	.word	0x0800bc29
 800bbe4:	0800bc29 	.word	0x0800bc29
 800bbe8:	0800bc29 	.word	0x0800bc29
 800bbec:	0800bc29 	.word	0x0800bc29
 800bbf0:	0800bc29 	.word	0x0800bc29
 800bbf4:	0800bc29 	.word	0x0800bc29
 800bbf8:	0800bc29 	.word	0x0800bc29
 800bbfc:	0800bc29 	.word	0x0800bc29
 800bc00:	0800bc29 	.word	0x0800bc29
 800bc04:	0800bc29 	.word	0x0800bc29
 800bc08:	0800bc29 	.word	0x0800bc29
 800bc0c:	0800bc29 	.word	0x0800bc29
 800bc10:	0800bc29 	.word	0x0800bc29
 800bc14:	0800bc29 	.word	0x0800bc29
 800bc18:	0800bc29 	.word	0x0800bc29
 800bc1c:	0800bc29 	.word	0x0800bc29
 800bc20:	0800bc29 	.word	0x0800bc29
 800bc24:	0800bc29 	.word	0x0800bc29
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc28:	bf00      	nop
  }

  return (USBD_OK);
 800bc2a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4805      	ldr	r0, [pc, #20]	@ (800bc5c <CDC_Receive_HS+0x24>)
 800bc46:	f7fe fb8b 	bl	800a360 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800bc4a:	4804      	ldr	r0, [pc, #16]	@ (800bc5c <CDC_Receive_HS+0x24>)
 800bc4c:	f7fe fbe6 	bl	800a41c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc50:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	240002cc 	.word	0x240002cc

0800bc60 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800bc70:	4b0d      	ldr	r3, [pc, #52]	@ (800bca8 <CDC_Transmit_HS+0x48>)
 800bc72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e00b      	b.n	800bc9e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800bc86:	887b      	ldrh	r3, [r7, #2]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	4806      	ldr	r0, [pc, #24]	@ (800bca8 <CDC_Transmit_HS+0x48>)
 800bc8e:	f7fe fb45 	bl	800a31c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800bc92:	4805      	ldr	r0, [pc, #20]	@ (800bca8 <CDC_Transmit_HS+0x48>)
 800bc94:	f7fe fb82 	bl	800a39c <USBD_CDC_TransmitPacket>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	240002cc 	.word	0x240002cc

0800bcac <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800bcbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	371c      	adds	r7, #28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
	...

0800bcd0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	6039      	str	r1, [r7, #0]
 800bcda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2212      	movs	r2, #18
 800bce0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800bce2:	4b03      	ldr	r3, [pc, #12]	@ (800bcf0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	240000d8 	.word	0x240000d8

0800bcf4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	6039      	str	r1, [r7, #0]
 800bcfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2204      	movs	r2, #4
 800bd04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd06:	4b03      	ldr	r3, [pc, #12]	@ (800bd14 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	240000ec 	.word	0x240000ec

0800bd18 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd24:	79fb      	ldrb	r3, [r7, #7]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d105      	bne.n	800bd36 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4907      	ldr	r1, [pc, #28]	@ (800bd4c <USBD_HS_ProductStrDescriptor+0x34>)
 800bd2e:	4808      	ldr	r0, [pc, #32]	@ (800bd50 <USBD_HS_ProductStrDescriptor+0x38>)
 800bd30:	f7ff fdea 	bl	800b908 <USBD_GetString>
 800bd34:	e004      	b.n	800bd40 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4904      	ldr	r1, [pc, #16]	@ (800bd4c <USBD_HS_ProductStrDescriptor+0x34>)
 800bd3a:	4805      	ldr	r0, [pc, #20]	@ (800bd50 <USBD_HS_ProductStrDescriptor+0x38>)
 800bd3c:	f7ff fde4 	bl	800b908 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd40:	4b02      	ldr	r3, [pc, #8]	@ (800bd4c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	240015a8 	.word	0x240015a8
 800bd50:	0800cf40 	.word	0x0800cf40

0800bd54 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	6039      	str	r1, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	4904      	ldr	r1, [pc, #16]	@ (800bd74 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800bd64:	4804      	ldr	r0, [pc, #16]	@ (800bd78 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800bd66:	f7ff fdcf 	bl	800b908 <USBD_GetString>
  return USBD_StrDesc;
 800bd6a:	4b02      	ldr	r3, [pc, #8]	@ (800bd74 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	240015a8 	.word	0x240015a8
 800bd78:	0800cf58 	.word	0x0800cf58

0800bd7c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	6039      	str	r1, [r7, #0]
 800bd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	221a      	movs	r2, #26
 800bd8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd8e:	f000 f843 	bl	800be18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bd92:	4b02      	ldr	r3, [pc, #8]	@ (800bd9c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	240000f0 	.word	0x240000f0

0800bda0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d105      	bne.n	800bdbe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	4907      	ldr	r1, [pc, #28]	@ (800bdd4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bdb6:	4808      	ldr	r0, [pc, #32]	@ (800bdd8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bdb8:	f7ff fda6 	bl	800b908 <USBD_GetString>
 800bdbc:	e004      	b.n	800bdc8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4904      	ldr	r1, [pc, #16]	@ (800bdd4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bdc2:	4805      	ldr	r0, [pc, #20]	@ (800bdd8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bdc4:	f7ff fda0 	bl	800b908 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdc8:	4b02      	ldr	r3, [pc, #8]	@ (800bdd4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	240015a8 	.word	0x240015a8
 800bdd8:	0800cf6c 	.word	0x0800cf6c

0800bddc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d105      	bne.n	800bdfa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	4907      	ldr	r1, [pc, #28]	@ (800be10 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bdf2:	4808      	ldr	r0, [pc, #32]	@ (800be14 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bdf4:	f7ff fd88 	bl	800b908 <USBD_GetString>
 800bdf8:	e004      	b.n	800be04 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	4904      	ldr	r1, [pc, #16]	@ (800be10 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bdfe:	4805      	ldr	r0, [pc, #20]	@ (800be14 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800be00:	f7ff fd82 	bl	800b908 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be04:	4b02      	ldr	r3, [pc, #8]	@ (800be10 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	240015a8 	.word	0x240015a8
 800be14:	0800cf78 	.word	0x0800cf78

0800be18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be1e:	4b0f      	ldr	r3, [pc, #60]	@ (800be5c <Get_SerialNum+0x44>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be24:	4b0e      	ldr	r3, [pc, #56]	@ (800be60 <Get_SerialNum+0x48>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be2a:	4b0e      	ldr	r3, [pc, #56]	@ (800be64 <Get_SerialNum+0x4c>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4413      	add	r3, r2
 800be36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d009      	beq.n	800be52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be3e:	2208      	movs	r2, #8
 800be40:	4909      	ldr	r1, [pc, #36]	@ (800be68 <Get_SerialNum+0x50>)
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 f814 	bl	800be70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be48:	2204      	movs	r2, #4
 800be4a:	4908      	ldr	r1, [pc, #32]	@ (800be6c <Get_SerialNum+0x54>)
 800be4c:	68b8      	ldr	r0, [r7, #8]
 800be4e:	f000 f80f 	bl	800be70 <IntToUnicode>
  }
}
 800be52:	bf00      	nop
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	1ff1e800 	.word	0x1ff1e800
 800be60:	1ff1e804 	.word	0x1ff1e804
 800be64:	1ff1e808 	.word	0x1ff1e808
 800be68:	240000f2 	.word	0x240000f2
 800be6c:	24000102 	.word	0x24000102

0800be70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	4613      	mov	r3, r2
 800be7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be82:	2300      	movs	r3, #0
 800be84:	75fb      	strb	r3, [r7, #23]
 800be86:	e027      	b.n	800bed8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	0f1b      	lsrs	r3, r3, #28
 800be8c:	2b09      	cmp	r3, #9
 800be8e:	d80b      	bhi.n	800bea8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	0f1b      	lsrs	r3, r3, #28
 800be94:	b2da      	uxtb	r2, r3
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	005b      	lsls	r3, r3, #1
 800be9a:	4619      	mov	r1, r3
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	440b      	add	r3, r1
 800bea0:	3230      	adds	r2, #48	@ 0x30
 800bea2:	b2d2      	uxtb	r2, r2
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	e00a      	b.n	800bebe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	0f1b      	lsrs	r3, r3, #28
 800beac:	b2da      	uxtb	r2, r3
 800beae:	7dfb      	ldrb	r3, [r7, #23]
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	4619      	mov	r1, r3
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	440b      	add	r3, r1
 800beb8:	3237      	adds	r2, #55	@ 0x37
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	011b      	lsls	r3, r3, #4
 800bec2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	3301      	adds	r3, #1
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	4413      	add	r3, r2
 800bece:	2200      	movs	r2, #0
 800bed0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	3301      	adds	r3, #1
 800bed6:	75fb      	strb	r3, [r7, #23]
 800bed8:	7dfa      	ldrb	r2, [r7, #23]
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d3d3      	bcc.n	800be88 <IntToUnicode+0x18>
  }
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
	...

0800bef0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b0b8      	sub	sp, #224	@ 0xe0
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bef8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800befc:	2200      	movs	r2, #0
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	605a      	str	r2, [r3, #4]
 800bf02:	609a      	str	r2, [r3, #8]
 800bf04:	60da      	str	r2, [r3, #12]
 800bf06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf08:	f107 0310 	add.w	r3, r7, #16
 800bf0c:	22b8      	movs	r2, #184	@ 0xb8
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f000 fc0b 	bl	800c72c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a29      	ldr	r2, [pc, #164]	@ (800bfc0 <HAL_PCD_MspInit+0xd0>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d14b      	bne.n	800bfb8 <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bf24:	f04f 0300 	mov.w	r3, #0
 800bf28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bf2c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800bf30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bf34:	f107 0310 	add.w	r3, r7, #16
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7f9 fb05 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800bf44:	f7f4 ff20 	bl	8000d88 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bf48:	f7f8 fbb4 	bl	80046b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf4c:	4b1d      	ldr	r3, [pc, #116]	@ (800bfc4 <HAL_PCD_MspInit+0xd4>)
 800bf4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf52:	4a1c      	ldr	r2, [pc, #112]	@ (800bfc4 <HAL_PCD_MspInit+0xd4>)
 800bf54:	f043 0301 	orr.w	r3, r3, #1
 800bf58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bf5c:	4b19      	ldr	r3, [pc, #100]	@ (800bfc4 <HAL_PCD_MspInit+0xd4>)
 800bf5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bf6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf72:	2300      	movs	r3, #0
 800bf74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf7e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800bf82:	4619      	mov	r1, r3
 800bf84:	4810      	ldr	r0, [pc, #64]	@ (800bfc8 <HAL_PCD_MspInit+0xd8>)
 800bf86:	f7f5 fd03 	bl	8001990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bf8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bfc4 <HAL_PCD_MspInit+0xd4>)
 800bf8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf90:	4a0c      	ldr	r2, [pc, #48]	@ (800bfc4 <HAL_PCD_MspInit+0xd4>)
 800bf92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bf96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bf9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc4 <HAL_PCD_MspInit+0xd4>)
 800bf9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bfa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfa4:	60bb      	str	r3, [r7, #8]
 800bfa6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	204d      	movs	r0, #77	@ 0x4d
 800bfae:	f7f5 fcba 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bfb2:	204d      	movs	r0, #77	@ 0x4d
 800bfb4:	f7f5 fcd1 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bfb8:	bf00      	nop
 800bfba:	37e0      	adds	r7, #224	@ 0xe0
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	40040000 	.word	0x40040000
 800bfc4:	58024400 	.word	0x58024400
 800bfc8:	58020000 	.word	0x58020000

0800bfcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	f7fe fb03 	bl	800a5ee <USBD_LL_SetupStage>
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c002:	78fa      	ldrb	r2, [r7, #3]
 800c004:	6879      	ldr	r1, [r7, #4]
 800c006:	4613      	mov	r3, r2
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	4413      	add	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	440b      	add	r3, r1
 800c010:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	78fb      	ldrb	r3, [r7, #3]
 800c018:	4619      	mov	r1, r3
 800c01a:	f7fe fb3d 	bl	800a698 <USBD_LL_DataOutStage>
}
 800c01e:	bf00      	nop
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	460b      	mov	r3, r1
 800c030:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c038:	78fa      	ldrb	r2, [r7, #3]
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	4613      	mov	r3, r2
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	4413      	add	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	3320      	adds	r3, #32
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	78fb      	ldrb	r3, [r7, #3]
 800c04c:	4619      	mov	r1, r3
 800c04e:	f7fe fbd6 	bl	800a7fe <USBD_LL_DataInStage>
}
 800c052:	bf00      	nop
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fe fd10 	bl	800aa8e <USBD_LL_SOF>
}
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b084      	sub	sp, #16
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c07e:	2301      	movs	r3, #1
 800c080:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	79db      	ldrb	r3, [r3, #7]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c08a:	2300      	movs	r3, #0
 800c08c:	73fb      	strb	r3, [r7, #15]
 800c08e:	e008      	b.n	800c0a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	79db      	ldrb	r3, [r3, #7]
 800c094:	2b02      	cmp	r3, #2
 800c096:	d102      	bne.n	800c09e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c098:	2301      	movs	r3, #1
 800c09a:	73fb      	strb	r3, [r7, #15]
 800c09c:	e001      	b.n	800c0a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c09e:	f7f4 fe73 	bl	8000d88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0a8:	7bfa      	ldrb	r2, [r7, #15]
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fe fcaa 	bl	800aa06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7fe fc52 	bl	800a962 <USBD_LL_Reset>
}
 800c0be:	bf00      	nop
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
	...

0800c0c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe fca5 	bl	800aa26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	6812      	ldr	r2, [r2, #0]
 800c0ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0ee:	f043 0301 	orr.w	r3, r3, #1
 800c0f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	7adb      	ldrb	r3, [r3, #11]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d005      	beq.n	800c108 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0fc:	4b04      	ldr	r3, [pc, #16]	@ (800c110 <HAL_PCD_SuspendCallback+0x48>)
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	4a03      	ldr	r2, [pc, #12]	@ (800c110 <HAL_PCD_SuspendCallback+0x48>)
 800c102:	f043 0306 	orr.w	r3, r3, #6
 800c106:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c108:	bf00      	nop
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	e000ed00 	.word	0xe000ed00

0800c114 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fc9b 	bl	800aa5e <USBD_LL_Resume>
}
 800c128:	bf00      	nop
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c142:	78fa      	ldrb	r2, [r7, #3]
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe fcf3 	bl	800ab32 <USBD_LL_IsoOUTIncomplete>
}
 800c14c:	bf00      	nop
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c166:	78fa      	ldrb	r2, [r7, #3]
 800c168:	4611      	mov	r1, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fe fcaf 	bl	800aace <USBD_LL_IsoINIncomplete>
}
 800c170:	bf00      	nop
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fd05 	bl	800ab96 <USBD_LL_DevConnected>
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe fd02 	bl	800abac <USBD_LL_DevDisconnected>
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d140      	bne.n	800c242 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c1c0:	4a22      	ldr	r2, [pc, #136]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a20      	ldr	r2, [pc, #128]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1cc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c1d0:	4b1e      	ldr	r3, [pc, #120]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1d2:	4a1f      	ldr	r2, [pc, #124]	@ (800c250 <USBD_LL_Init+0xa0>)
 800c1d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800c1d6:	4b1d      	ldr	r3, [pc, #116]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1d8:	2209      	movs	r2, #9
 800c1da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800c1dc:	4b1b      	ldr	r3, [pc, #108]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1de:	2202      	movs	r2, #2
 800c1e0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c1e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c1e8:	4b18      	ldr	r3, [pc, #96]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c1ee:	4b17      	ldr	r3, [pc, #92]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c1f4:	4b15      	ldr	r3, [pc, #84]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c1fa:	4b14      	ldr	r3, [pc, #80]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800c200:	4b12      	ldr	r3, [pc, #72]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c202:	2201      	movs	r2, #1
 800c204:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c206:	4b11      	ldr	r3, [pc, #68]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c208:	2200      	movs	r2, #0
 800c20a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c20c:	4b0f      	ldr	r3, [pc, #60]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c20e:	2200      	movs	r2, #0
 800c210:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c212:	480e      	ldr	r0, [pc, #56]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c214:	f7f6 ff44 	bl	80030a0 <HAL_PCD_Init>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c21e:	f7f4 fdb3 	bl	8000d88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c222:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c226:	4809      	ldr	r0, [pc, #36]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c228:	f7f8 f999 	bl	800455e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c22c:	2280      	movs	r2, #128	@ 0x80
 800c22e:	2100      	movs	r1, #0
 800c230:	4806      	ldr	r0, [pc, #24]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c232:	f7f8 f94d 	bl	80044d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c236:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800c23a:	2101      	movs	r1, #1
 800c23c:	4803      	ldr	r0, [pc, #12]	@ (800c24c <USBD_LL_Init+0x9c>)
 800c23e:	f7f8 f947 	bl	80044d0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	240017a8 	.word	0x240017a8
 800c250:	40040000 	.word	0x40040000

0800c254 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7f7 f824 	bl	80032b8 <HAL_PCD_Start>
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	4618      	mov	r0, r3
 800c278:	f000 f942 	bl	800c500 <USBD_Get_USB_Status>
 800c27c:	4603      	mov	r3, r0
 800c27e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c280:	7bbb      	ldrb	r3, [r7, #14]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b084      	sub	sp, #16
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	4608      	mov	r0, r1
 800c294:	4611      	mov	r1, r2
 800c296:	461a      	mov	r2, r3
 800c298:	4603      	mov	r3, r0
 800c29a:	70fb      	strb	r3, [r7, #3]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70bb      	strb	r3, [r7, #2]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c2b2:	78bb      	ldrb	r3, [r7, #2]
 800c2b4:	883a      	ldrh	r2, [r7, #0]
 800c2b6:	78f9      	ldrb	r1, [r7, #3]
 800c2b8:	f7f7 fd25 	bl	8003d06 <HAL_PCD_EP_Open>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 f91c 	bl	800c500 <USBD_Get_USB_Status>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2f0:	78fa      	ldrb	r2, [r7, #3]
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7f7 fd70 	bl	8003dda <HAL_PCD_EP_Close>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
 800c300:	4618      	mov	r0, r3
 800c302:	f000 f8fd 	bl	800c500 <USBD_Get_USB_Status>
 800c306:	4603      	mov	r3, r0
 800c308:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c32e:	78fa      	ldrb	r2, [r7, #3]
 800c330:	4611      	mov	r1, r2
 800c332:	4618      	mov	r0, r3
 800c334:	f7f7 fe28 	bl	8003f88 <HAL_PCD_EP_SetStall>
 800c338:	4603      	mov	r3, r0
 800c33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f8de 	bl	800c500 <USBD_Get_USB_Status>
 800c344:	4603      	mov	r3, r0
 800c346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c348:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	460b      	mov	r3, r1
 800c35c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c36c:	78fa      	ldrb	r2, [r7, #3]
 800c36e:	4611      	mov	r1, r2
 800c370:	4618      	mov	r0, r3
 800c372:	f7f7 fe6c 	bl	800404e <HAL_PCD_EP_ClrStall>
 800c376:	4603      	mov	r3, r0
 800c378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 f8bf 	bl	800c500 <USBD_Get_USB_Status>
 800c382:	4603      	mov	r3, r0
 800c384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c386:	7bbb      	ldrb	r3, [r7, #14]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da0b      	bge.n	800c3c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3b2:	68f9      	ldr	r1, [r7, #12]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	440b      	add	r3, r1
 800c3be:	3316      	adds	r3, #22
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	e00b      	b.n	800c3dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3ca:	68f9      	ldr	r1, [r7, #12]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	4413      	add	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	440b      	add	r3, r1
 800c3d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c3da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c402:	78fa      	ldrb	r2, [r7, #3]
 800c404:	4611      	mov	r1, r2
 800c406:	4618      	mov	r0, r3
 800c408:	f7f7 fc59 	bl	8003cbe <HAL_PCD_SetAddress>
 800c40c:	4603      	mov	r3, r0
 800c40e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f874 	bl	800c500 <USBD_Get_USB_Status>
 800c418:	4603      	mov	r3, r0
 800c41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b086      	sub	sp, #24
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
 800c432:	460b      	mov	r3, r1
 800c434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c444:	7af9      	ldrb	r1, [r7, #11]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	f7f7 fd63 	bl	8003f14 <HAL_PCD_EP_Transmit>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	4618      	mov	r0, r3
 800c456:	f000 f853 	bl	800c500 <USBD_Get_USB_Status>
 800c45a:	4603      	mov	r3, r0
 800c45c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c45e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	607a      	str	r2, [r7, #4]
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	460b      	mov	r3, r1
 800c476:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c478:	2300      	movs	r3, #0
 800c47a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c486:	7af9      	ldrb	r1, [r7, #11]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	f7f7 fcef 	bl	8003e6e <HAL_PCD_EP_Receive>
 800c490:	4603      	mov	r3, r0
 800c492:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 f832 	bl	800c500 <USBD_Get_USB_Status>
 800c49c:	4603      	mov	r3, r0
 800c49e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4bc:	78fa      	ldrb	r2, [r7, #3]
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7f7 fd0f 	bl	8003ee4 <HAL_PCD_EP_GetRxCount>
 800c4c6:	4603      	mov	r3, r0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4d8:	4b03      	ldr	r3, [pc, #12]	@ (800c4e8 <USBD_static_malloc+0x18>)
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	24001c8c 	.word	0x24001c8c

0800c4ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c50e:	79fb      	ldrb	r3, [r7, #7]
 800c510:	2b03      	cmp	r3, #3
 800c512:	d817      	bhi.n	800c544 <USBD_Get_USB_Status+0x44>
 800c514:	a201      	add	r2, pc, #4	@ (adr r2, 800c51c <USBD_Get_USB_Status+0x1c>)
 800c516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51a:	bf00      	nop
 800c51c:	0800c52d 	.word	0x0800c52d
 800c520:	0800c533 	.word	0x0800c533
 800c524:	0800c539 	.word	0x0800c539
 800c528:	0800c53f 	.word	0x0800c53f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
    break;
 800c530:	e00b      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c532:	2303      	movs	r3, #3
 800c534:	73fb      	strb	r3, [r7, #15]
    break;
 800c536:	e008      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c538:	2301      	movs	r3, #1
 800c53a:	73fb      	strb	r3, [r7, #15]
    break;
 800c53c:	e005      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c53e:	2303      	movs	r3, #3
 800c540:	73fb      	strb	r3, [r7, #15]
    break;
 800c542:	e002      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	73fb      	strb	r3, [r7, #15]
    break;
 800c548:	bf00      	nop
  }
  return usb_status;
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <malloc>:
 800c558:	4b02      	ldr	r3, [pc, #8]	@ (800c564 <malloc+0xc>)
 800c55a:	4601      	mov	r1, r0
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	f000 b825 	b.w	800c5ac <_malloc_r>
 800c562:	bf00      	nop
 800c564:	2400010c 	.word	0x2400010c

0800c568 <sbrk_aligned>:
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	4e0f      	ldr	r6, [pc, #60]	@ (800c5a8 <sbrk_aligned+0x40>)
 800c56c:	460c      	mov	r4, r1
 800c56e:	6831      	ldr	r1, [r6, #0]
 800c570:	4605      	mov	r5, r0
 800c572:	b911      	cbnz	r1, 800c57a <sbrk_aligned+0x12>
 800c574:	f000 f8e2 	bl	800c73c <_sbrk_r>
 800c578:	6030      	str	r0, [r6, #0]
 800c57a:	4621      	mov	r1, r4
 800c57c:	4628      	mov	r0, r5
 800c57e:	f000 f8dd 	bl	800c73c <_sbrk_r>
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	d103      	bne.n	800c58e <sbrk_aligned+0x26>
 800c586:	f04f 34ff 	mov.w	r4, #4294967295
 800c58a:	4620      	mov	r0, r4
 800c58c:	bd70      	pop	{r4, r5, r6, pc}
 800c58e:	1cc4      	adds	r4, r0, #3
 800c590:	f024 0403 	bic.w	r4, r4, #3
 800c594:	42a0      	cmp	r0, r4
 800c596:	d0f8      	beq.n	800c58a <sbrk_aligned+0x22>
 800c598:	1a21      	subs	r1, r4, r0
 800c59a:	4628      	mov	r0, r5
 800c59c:	f000 f8ce 	bl	800c73c <_sbrk_r>
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d1f2      	bne.n	800c58a <sbrk_aligned+0x22>
 800c5a4:	e7ef      	b.n	800c586 <sbrk_aligned+0x1e>
 800c5a6:	bf00      	nop
 800c5a8:	24001eac 	.word	0x24001eac

0800c5ac <_malloc_r>:
 800c5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b0:	1ccd      	adds	r5, r1, #3
 800c5b2:	f025 0503 	bic.w	r5, r5, #3
 800c5b6:	3508      	adds	r5, #8
 800c5b8:	2d0c      	cmp	r5, #12
 800c5ba:	bf38      	it	cc
 800c5bc:	250c      	movcc	r5, #12
 800c5be:	2d00      	cmp	r5, #0
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	db01      	blt.n	800c5c8 <_malloc_r+0x1c>
 800c5c4:	42a9      	cmp	r1, r5
 800c5c6:	d904      	bls.n	800c5d2 <_malloc_r+0x26>
 800c5c8:	230c      	movs	r3, #12
 800c5ca:	6033      	str	r3, [r6, #0]
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c6a8 <_malloc_r+0xfc>
 800c5d6:	f000 f869 	bl	800c6ac <__malloc_lock>
 800c5da:	f8d8 3000 	ldr.w	r3, [r8]
 800c5de:	461c      	mov	r4, r3
 800c5e0:	bb44      	cbnz	r4, 800c634 <_malloc_r+0x88>
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f7ff ffbf 	bl	800c568 <sbrk_aligned>
 800c5ea:	1c43      	adds	r3, r0, #1
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	d158      	bne.n	800c6a2 <_malloc_r+0xf6>
 800c5f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c5f4:	4627      	mov	r7, r4
 800c5f6:	2f00      	cmp	r7, #0
 800c5f8:	d143      	bne.n	800c682 <_malloc_r+0xd6>
 800c5fa:	2c00      	cmp	r4, #0
 800c5fc:	d04b      	beq.n	800c696 <_malloc_r+0xea>
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	4639      	mov	r1, r7
 800c602:	4630      	mov	r0, r6
 800c604:	eb04 0903 	add.w	r9, r4, r3
 800c608:	f000 f898 	bl	800c73c <_sbrk_r>
 800c60c:	4581      	cmp	r9, r0
 800c60e:	d142      	bne.n	800c696 <_malloc_r+0xea>
 800c610:	6821      	ldr	r1, [r4, #0]
 800c612:	1a6d      	subs	r5, r5, r1
 800c614:	4629      	mov	r1, r5
 800c616:	4630      	mov	r0, r6
 800c618:	f7ff ffa6 	bl	800c568 <sbrk_aligned>
 800c61c:	3001      	adds	r0, #1
 800c61e:	d03a      	beq.n	800c696 <_malloc_r+0xea>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	442b      	add	r3, r5
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	f8d8 3000 	ldr.w	r3, [r8]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	bb62      	cbnz	r2, 800c688 <_malloc_r+0xdc>
 800c62e:	f8c8 7000 	str.w	r7, [r8]
 800c632:	e00f      	b.n	800c654 <_malloc_r+0xa8>
 800c634:	6822      	ldr	r2, [r4, #0]
 800c636:	1b52      	subs	r2, r2, r5
 800c638:	d420      	bmi.n	800c67c <_malloc_r+0xd0>
 800c63a:	2a0b      	cmp	r2, #11
 800c63c:	d917      	bls.n	800c66e <_malloc_r+0xc2>
 800c63e:	1961      	adds	r1, r4, r5
 800c640:	42a3      	cmp	r3, r4
 800c642:	6025      	str	r5, [r4, #0]
 800c644:	bf18      	it	ne
 800c646:	6059      	strne	r1, [r3, #4]
 800c648:	6863      	ldr	r3, [r4, #4]
 800c64a:	bf08      	it	eq
 800c64c:	f8c8 1000 	streq.w	r1, [r8]
 800c650:	5162      	str	r2, [r4, r5]
 800c652:	604b      	str	r3, [r1, #4]
 800c654:	4630      	mov	r0, r6
 800c656:	f000 f82f 	bl	800c6b8 <__malloc_unlock>
 800c65a:	f104 000b 	add.w	r0, r4, #11
 800c65e:	1d23      	adds	r3, r4, #4
 800c660:	f020 0007 	bic.w	r0, r0, #7
 800c664:	1ac2      	subs	r2, r0, r3
 800c666:	bf1c      	itt	ne
 800c668:	1a1b      	subne	r3, r3, r0
 800c66a:	50a3      	strne	r3, [r4, r2]
 800c66c:	e7af      	b.n	800c5ce <_malloc_r+0x22>
 800c66e:	6862      	ldr	r2, [r4, #4]
 800c670:	42a3      	cmp	r3, r4
 800c672:	bf0c      	ite	eq
 800c674:	f8c8 2000 	streq.w	r2, [r8]
 800c678:	605a      	strne	r2, [r3, #4]
 800c67a:	e7eb      	b.n	800c654 <_malloc_r+0xa8>
 800c67c:	4623      	mov	r3, r4
 800c67e:	6864      	ldr	r4, [r4, #4]
 800c680:	e7ae      	b.n	800c5e0 <_malloc_r+0x34>
 800c682:	463c      	mov	r4, r7
 800c684:	687f      	ldr	r7, [r7, #4]
 800c686:	e7b6      	b.n	800c5f6 <_malloc_r+0x4a>
 800c688:	461a      	mov	r2, r3
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	d1fb      	bne.n	800c688 <_malloc_r+0xdc>
 800c690:	2300      	movs	r3, #0
 800c692:	6053      	str	r3, [r2, #4]
 800c694:	e7de      	b.n	800c654 <_malloc_r+0xa8>
 800c696:	230c      	movs	r3, #12
 800c698:	6033      	str	r3, [r6, #0]
 800c69a:	4630      	mov	r0, r6
 800c69c:	f000 f80c 	bl	800c6b8 <__malloc_unlock>
 800c6a0:	e794      	b.n	800c5cc <_malloc_r+0x20>
 800c6a2:	6005      	str	r5, [r0, #0]
 800c6a4:	e7d6      	b.n	800c654 <_malloc_r+0xa8>
 800c6a6:	bf00      	nop
 800c6a8:	24001eb0 	.word	0x24001eb0

0800c6ac <__malloc_lock>:
 800c6ac:	4801      	ldr	r0, [pc, #4]	@ (800c6b4 <__malloc_lock+0x8>)
 800c6ae:	f000 b87f 	b.w	800c7b0 <__retarget_lock_acquire_recursive>
 800c6b2:	bf00      	nop
 800c6b4:	24001ff0 	.word	0x24001ff0

0800c6b8 <__malloc_unlock>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	@ (800c6c0 <__malloc_unlock+0x8>)
 800c6ba:	f000 b87a 	b.w	800c7b2 <__retarget_lock_release_recursive>
 800c6be:	bf00      	nop
 800c6c0:	24001ff0 	.word	0x24001ff0

0800c6c4 <sniprintf>:
 800c6c4:	b40c      	push	{r2, r3}
 800c6c6:	b530      	push	{r4, r5, lr}
 800c6c8:	4b17      	ldr	r3, [pc, #92]	@ (800c728 <sniprintf+0x64>)
 800c6ca:	1e0c      	subs	r4, r1, #0
 800c6cc:	681d      	ldr	r5, [r3, #0]
 800c6ce:	b09d      	sub	sp, #116	@ 0x74
 800c6d0:	da08      	bge.n	800c6e4 <sniprintf+0x20>
 800c6d2:	238b      	movs	r3, #139	@ 0x8b
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6da:	b01d      	add	sp, #116	@ 0x74
 800c6dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6e0:	b002      	add	sp, #8
 800c6e2:	4770      	bx	lr
 800c6e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c6e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c6ec:	bf14      	ite	ne
 800c6ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c6f2:	4623      	moveq	r3, r4
 800c6f4:	9304      	str	r3, [sp, #16]
 800c6f6:	9307      	str	r3, [sp, #28]
 800c6f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6fc:	9002      	str	r0, [sp, #8]
 800c6fe:	9006      	str	r0, [sp, #24]
 800c700:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c704:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c706:	ab21      	add	r3, sp, #132	@ 0x84
 800c708:	a902      	add	r1, sp, #8
 800c70a:	4628      	mov	r0, r5
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	f000 f8f7 	bl	800c900 <_svfiprintf_r>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	bfbc      	itt	lt
 800c716:	238b      	movlt	r3, #139	@ 0x8b
 800c718:	602b      	strlt	r3, [r5, #0]
 800c71a:	2c00      	cmp	r4, #0
 800c71c:	d0dd      	beq.n	800c6da <sniprintf+0x16>
 800c71e:	9b02      	ldr	r3, [sp, #8]
 800c720:	2200      	movs	r2, #0
 800c722:	701a      	strb	r2, [r3, #0]
 800c724:	e7d9      	b.n	800c6da <sniprintf+0x16>
 800c726:	bf00      	nop
 800c728:	2400010c 	.word	0x2400010c

0800c72c <memset>:
 800c72c:	4402      	add	r2, r0
 800c72e:	4603      	mov	r3, r0
 800c730:	4293      	cmp	r3, r2
 800c732:	d100      	bne.n	800c736 <memset+0xa>
 800c734:	4770      	bx	lr
 800c736:	f803 1b01 	strb.w	r1, [r3], #1
 800c73a:	e7f9      	b.n	800c730 <memset+0x4>

0800c73c <_sbrk_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4d06      	ldr	r5, [pc, #24]	@ (800c758 <_sbrk_r+0x1c>)
 800c740:	2300      	movs	r3, #0
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	602b      	str	r3, [r5, #0]
 800c748:	f7f4 fe46 	bl	80013d8 <_sbrk>
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d102      	bne.n	800c756 <_sbrk_r+0x1a>
 800c750:	682b      	ldr	r3, [r5, #0]
 800c752:	b103      	cbz	r3, 800c756 <_sbrk_r+0x1a>
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	24001fec 	.word	0x24001fec

0800c75c <__errno>:
 800c75c:	4b01      	ldr	r3, [pc, #4]	@ (800c764 <__errno+0x8>)
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	2400010c 	.word	0x2400010c

0800c768 <__libc_init_array>:
 800c768:	b570      	push	{r4, r5, r6, lr}
 800c76a:	4d0d      	ldr	r5, [pc, #52]	@ (800c7a0 <__libc_init_array+0x38>)
 800c76c:	4c0d      	ldr	r4, [pc, #52]	@ (800c7a4 <__libc_init_array+0x3c>)
 800c76e:	1b64      	subs	r4, r4, r5
 800c770:	10a4      	asrs	r4, r4, #2
 800c772:	2600      	movs	r6, #0
 800c774:	42a6      	cmp	r6, r4
 800c776:	d109      	bne.n	800c78c <__libc_init_array+0x24>
 800c778:	4d0b      	ldr	r5, [pc, #44]	@ (800c7a8 <__libc_init_array+0x40>)
 800c77a:	4c0c      	ldr	r4, [pc, #48]	@ (800c7ac <__libc_init_array+0x44>)
 800c77c:	f000 fba8 	bl	800ced0 <_init>
 800c780:	1b64      	subs	r4, r4, r5
 800c782:	10a4      	asrs	r4, r4, #2
 800c784:	2600      	movs	r6, #0
 800c786:	42a6      	cmp	r6, r4
 800c788:	d105      	bne.n	800c796 <__libc_init_array+0x2e>
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
 800c78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c790:	4798      	blx	r3
 800c792:	3601      	adds	r6, #1
 800c794:	e7ee      	b.n	800c774 <__libc_init_array+0xc>
 800c796:	f855 3b04 	ldr.w	r3, [r5], #4
 800c79a:	4798      	blx	r3
 800c79c:	3601      	adds	r6, #1
 800c79e:	e7f2      	b.n	800c786 <__libc_init_array+0x1e>
 800c7a0:	0800cfd4 	.word	0x0800cfd4
 800c7a4:	0800cfd4 	.word	0x0800cfd4
 800c7a8:	0800cfd4 	.word	0x0800cfd4
 800c7ac:	0800cfd8 	.word	0x0800cfd8

0800c7b0 <__retarget_lock_acquire_recursive>:
 800c7b0:	4770      	bx	lr

0800c7b2 <__retarget_lock_release_recursive>:
 800c7b2:	4770      	bx	lr

0800c7b4 <_free_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	2900      	cmp	r1, #0
 800c7ba:	d041      	beq.n	800c840 <_free_r+0x8c>
 800c7bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c0:	1f0c      	subs	r4, r1, #4
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	bfb8      	it	lt
 800c7c6:	18e4      	addlt	r4, r4, r3
 800c7c8:	f7ff ff70 	bl	800c6ac <__malloc_lock>
 800c7cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c844 <_free_r+0x90>)
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	b933      	cbnz	r3, 800c7e0 <_free_r+0x2c>
 800c7d2:	6063      	str	r3, [r4, #4]
 800c7d4:	6014      	str	r4, [r2, #0]
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7dc:	f7ff bf6c 	b.w	800c6b8 <__malloc_unlock>
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	d908      	bls.n	800c7f6 <_free_r+0x42>
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	1821      	adds	r1, r4, r0
 800c7e8:	428b      	cmp	r3, r1
 800c7ea:	bf01      	itttt	eq
 800c7ec:	6819      	ldreq	r1, [r3, #0]
 800c7ee:	685b      	ldreq	r3, [r3, #4]
 800c7f0:	1809      	addeq	r1, r1, r0
 800c7f2:	6021      	streq	r1, [r4, #0]
 800c7f4:	e7ed      	b.n	800c7d2 <_free_r+0x1e>
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	b10b      	cbz	r3, 800c800 <_free_r+0x4c>
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	d9fa      	bls.n	800c7f6 <_free_r+0x42>
 800c800:	6811      	ldr	r1, [r2, #0]
 800c802:	1850      	adds	r0, r2, r1
 800c804:	42a0      	cmp	r0, r4
 800c806:	d10b      	bne.n	800c820 <_free_r+0x6c>
 800c808:	6820      	ldr	r0, [r4, #0]
 800c80a:	4401      	add	r1, r0
 800c80c:	1850      	adds	r0, r2, r1
 800c80e:	4283      	cmp	r3, r0
 800c810:	6011      	str	r1, [r2, #0]
 800c812:	d1e0      	bne.n	800c7d6 <_free_r+0x22>
 800c814:	6818      	ldr	r0, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	6053      	str	r3, [r2, #4]
 800c81a:	4408      	add	r0, r1
 800c81c:	6010      	str	r0, [r2, #0]
 800c81e:	e7da      	b.n	800c7d6 <_free_r+0x22>
 800c820:	d902      	bls.n	800c828 <_free_r+0x74>
 800c822:	230c      	movs	r3, #12
 800c824:	602b      	str	r3, [r5, #0]
 800c826:	e7d6      	b.n	800c7d6 <_free_r+0x22>
 800c828:	6820      	ldr	r0, [r4, #0]
 800c82a:	1821      	adds	r1, r4, r0
 800c82c:	428b      	cmp	r3, r1
 800c82e:	bf04      	itt	eq
 800c830:	6819      	ldreq	r1, [r3, #0]
 800c832:	685b      	ldreq	r3, [r3, #4]
 800c834:	6063      	str	r3, [r4, #4]
 800c836:	bf04      	itt	eq
 800c838:	1809      	addeq	r1, r1, r0
 800c83a:	6021      	streq	r1, [r4, #0]
 800c83c:	6054      	str	r4, [r2, #4]
 800c83e:	e7ca      	b.n	800c7d6 <_free_r+0x22>
 800c840:	bd38      	pop	{r3, r4, r5, pc}
 800c842:	bf00      	nop
 800c844:	24001eb0 	.word	0x24001eb0

0800c848 <__ssputs_r>:
 800c848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	688e      	ldr	r6, [r1, #8]
 800c84e:	461f      	mov	r7, r3
 800c850:	42be      	cmp	r6, r7
 800c852:	680b      	ldr	r3, [r1, #0]
 800c854:	4682      	mov	sl, r0
 800c856:	460c      	mov	r4, r1
 800c858:	4690      	mov	r8, r2
 800c85a:	d82d      	bhi.n	800c8b8 <__ssputs_r+0x70>
 800c85c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c864:	d026      	beq.n	800c8b4 <__ssputs_r+0x6c>
 800c866:	6965      	ldr	r5, [r4, #20]
 800c868:	6909      	ldr	r1, [r1, #16]
 800c86a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c86e:	eba3 0901 	sub.w	r9, r3, r1
 800c872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c876:	1c7b      	adds	r3, r7, #1
 800c878:	444b      	add	r3, r9
 800c87a:	106d      	asrs	r5, r5, #1
 800c87c:	429d      	cmp	r5, r3
 800c87e:	bf38      	it	cc
 800c880:	461d      	movcc	r5, r3
 800c882:	0553      	lsls	r3, r2, #21
 800c884:	d527      	bpl.n	800c8d6 <__ssputs_r+0x8e>
 800c886:	4629      	mov	r1, r5
 800c888:	f7ff fe90 	bl	800c5ac <_malloc_r>
 800c88c:	4606      	mov	r6, r0
 800c88e:	b360      	cbz	r0, 800c8ea <__ssputs_r+0xa2>
 800c890:	6921      	ldr	r1, [r4, #16]
 800c892:	464a      	mov	r2, r9
 800c894:	f000 fad8 	bl	800ce48 <memcpy>
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c89e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8a2:	81a3      	strh	r3, [r4, #12]
 800c8a4:	6126      	str	r6, [r4, #16]
 800c8a6:	6165      	str	r5, [r4, #20]
 800c8a8:	444e      	add	r6, r9
 800c8aa:	eba5 0509 	sub.w	r5, r5, r9
 800c8ae:	6026      	str	r6, [r4, #0]
 800c8b0:	60a5      	str	r5, [r4, #8]
 800c8b2:	463e      	mov	r6, r7
 800c8b4:	42be      	cmp	r6, r7
 800c8b6:	d900      	bls.n	800c8ba <__ssputs_r+0x72>
 800c8b8:	463e      	mov	r6, r7
 800c8ba:	6820      	ldr	r0, [r4, #0]
 800c8bc:	4632      	mov	r2, r6
 800c8be:	4641      	mov	r1, r8
 800c8c0:	f000 faa8 	bl	800ce14 <memmove>
 800c8c4:	68a3      	ldr	r3, [r4, #8]
 800c8c6:	1b9b      	subs	r3, r3, r6
 800c8c8:	60a3      	str	r3, [r4, #8]
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	4433      	add	r3, r6
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d6:	462a      	mov	r2, r5
 800c8d8:	f000 fac4 	bl	800ce64 <_realloc_r>
 800c8dc:	4606      	mov	r6, r0
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d1e0      	bne.n	800c8a4 <__ssputs_r+0x5c>
 800c8e2:	6921      	ldr	r1, [r4, #16]
 800c8e4:	4650      	mov	r0, sl
 800c8e6:	f7ff ff65 	bl	800c7b4 <_free_r>
 800c8ea:	230c      	movs	r3, #12
 800c8ec:	f8ca 3000 	str.w	r3, [sl]
 800c8f0:	89a3      	ldrh	r3, [r4, #12]
 800c8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f6:	81a3      	strh	r3, [r4, #12]
 800c8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fc:	e7e9      	b.n	800c8d2 <__ssputs_r+0x8a>
	...

0800c900 <_svfiprintf_r>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	4698      	mov	r8, r3
 800c906:	898b      	ldrh	r3, [r1, #12]
 800c908:	061b      	lsls	r3, r3, #24
 800c90a:	b09d      	sub	sp, #116	@ 0x74
 800c90c:	4607      	mov	r7, r0
 800c90e:	460d      	mov	r5, r1
 800c910:	4614      	mov	r4, r2
 800c912:	d510      	bpl.n	800c936 <_svfiprintf_r+0x36>
 800c914:	690b      	ldr	r3, [r1, #16]
 800c916:	b973      	cbnz	r3, 800c936 <_svfiprintf_r+0x36>
 800c918:	2140      	movs	r1, #64	@ 0x40
 800c91a:	f7ff fe47 	bl	800c5ac <_malloc_r>
 800c91e:	6028      	str	r0, [r5, #0]
 800c920:	6128      	str	r0, [r5, #16]
 800c922:	b930      	cbnz	r0, 800c932 <_svfiprintf_r+0x32>
 800c924:	230c      	movs	r3, #12
 800c926:	603b      	str	r3, [r7, #0]
 800c928:	f04f 30ff 	mov.w	r0, #4294967295
 800c92c:	b01d      	add	sp, #116	@ 0x74
 800c92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c932:	2340      	movs	r3, #64	@ 0x40
 800c934:	616b      	str	r3, [r5, #20]
 800c936:	2300      	movs	r3, #0
 800c938:	9309      	str	r3, [sp, #36]	@ 0x24
 800c93a:	2320      	movs	r3, #32
 800c93c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c940:	f8cd 800c 	str.w	r8, [sp, #12]
 800c944:	2330      	movs	r3, #48	@ 0x30
 800c946:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cae4 <_svfiprintf_r+0x1e4>
 800c94a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c94e:	f04f 0901 	mov.w	r9, #1
 800c952:	4623      	mov	r3, r4
 800c954:	469a      	mov	sl, r3
 800c956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c95a:	b10a      	cbz	r2, 800c960 <_svfiprintf_r+0x60>
 800c95c:	2a25      	cmp	r2, #37	@ 0x25
 800c95e:	d1f9      	bne.n	800c954 <_svfiprintf_r+0x54>
 800c960:	ebba 0b04 	subs.w	fp, sl, r4
 800c964:	d00b      	beq.n	800c97e <_svfiprintf_r+0x7e>
 800c966:	465b      	mov	r3, fp
 800c968:	4622      	mov	r2, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	4638      	mov	r0, r7
 800c96e:	f7ff ff6b 	bl	800c848 <__ssputs_r>
 800c972:	3001      	adds	r0, #1
 800c974:	f000 80a7 	beq.w	800cac6 <_svfiprintf_r+0x1c6>
 800c978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c97a:	445a      	add	r2, fp
 800c97c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c97e:	f89a 3000 	ldrb.w	r3, [sl]
 800c982:	2b00      	cmp	r3, #0
 800c984:	f000 809f 	beq.w	800cac6 <_svfiprintf_r+0x1c6>
 800c988:	2300      	movs	r3, #0
 800c98a:	f04f 32ff 	mov.w	r2, #4294967295
 800c98e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c992:	f10a 0a01 	add.w	sl, sl, #1
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	9307      	str	r3, [sp, #28]
 800c99a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c99e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9a0:	4654      	mov	r4, sl
 800c9a2:	2205      	movs	r2, #5
 800c9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a8:	484e      	ldr	r0, [pc, #312]	@ (800cae4 <_svfiprintf_r+0x1e4>)
 800c9aa:	f7f3 fcb9 	bl	8000320 <memchr>
 800c9ae:	9a04      	ldr	r2, [sp, #16]
 800c9b0:	b9d8      	cbnz	r0, 800c9ea <_svfiprintf_r+0xea>
 800c9b2:	06d0      	lsls	r0, r2, #27
 800c9b4:	bf44      	itt	mi
 800c9b6:	2320      	movmi	r3, #32
 800c9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9bc:	0711      	lsls	r1, r2, #28
 800c9be:	bf44      	itt	mi
 800c9c0:	232b      	movmi	r3, #43	@ 0x2b
 800c9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9cc:	d015      	beq.n	800c9fa <_svfiprintf_r+0xfa>
 800c9ce:	9a07      	ldr	r2, [sp, #28]
 800c9d0:	4654      	mov	r4, sl
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	f04f 0c0a 	mov.w	ip, #10
 800c9d8:	4621      	mov	r1, r4
 800c9da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9de:	3b30      	subs	r3, #48	@ 0x30
 800c9e0:	2b09      	cmp	r3, #9
 800c9e2:	d94b      	bls.n	800ca7c <_svfiprintf_r+0x17c>
 800c9e4:	b1b0      	cbz	r0, 800ca14 <_svfiprintf_r+0x114>
 800c9e6:	9207      	str	r2, [sp, #28]
 800c9e8:	e014      	b.n	800ca14 <_svfiprintf_r+0x114>
 800c9ea:	eba0 0308 	sub.w	r3, r0, r8
 800c9ee:	fa09 f303 	lsl.w	r3, r9, r3
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	9304      	str	r3, [sp, #16]
 800c9f6:	46a2      	mov	sl, r4
 800c9f8:	e7d2      	b.n	800c9a0 <_svfiprintf_r+0xa0>
 800c9fa:	9b03      	ldr	r3, [sp, #12]
 800c9fc:	1d19      	adds	r1, r3, #4
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	9103      	str	r1, [sp, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	bfbb      	ittet	lt
 800ca06:	425b      	neglt	r3, r3
 800ca08:	f042 0202 	orrlt.w	r2, r2, #2
 800ca0c:	9307      	strge	r3, [sp, #28]
 800ca0e:	9307      	strlt	r3, [sp, #28]
 800ca10:	bfb8      	it	lt
 800ca12:	9204      	strlt	r2, [sp, #16]
 800ca14:	7823      	ldrb	r3, [r4, #0]
 800ca16:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca18:	d10a      	bne.n	800ca30 <_svfiprintf_r+0x130>
 800ca1a:	7863      	ldrb	r3, [r4, #1]
 800ca1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca1e:	d132      	bne.n	800ca86 <_svfiprintf_r+0x186>
 800ca20:	9b03      	ldr	r3, [sp, #12]
 800ca22:	1d1a      	adds	r2, r3, #4
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	9203      	str	r2, [sp, #12]
 800ca28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca2c:	3402      	adds	r4, #2
 800ca2e:	9305      	str	r3, [sp, #20]
 800ca30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800caf4 <_svfiprintf_r+0x1f4>
 800ca34:	7821      	ldrb	r1, [r4, #0]
 800ca36:	2203      	movs	r2, #3
 800ca38:	4650      	mov	r0, sl
 800ca3a:	f7f3 fc71 	bl	8000320 <memchr>
 800ca3e:	b138      	cbz	r0, 800ca50 <_svfiprintf_r+0x150>
 800ca40:	9b04      	ldr	r3, [sp, #16]
 800ca42:	eba0 000a 	sub.w	r0, r0, sl
 800ca46:	2240      	movs	r2, #64	@ 0x40
 800ca48:	4082      	lsls	r2, r0
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	3401      	adds	r4, #1
 800ca4e:	9304      	str	r3, [sp, #16]
 800ca50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca54:	4824      	ldr	r0, [pc, #144]	@ (800cae8 <_svfiprintf_r+0x1e8>)
 800ca56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca5a:	2206      	movs	r2, #6
 800ca5c:	f7f3 fc60 	bl	8000320 <memchr>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d036      	beq.n	800cad2 <_svfiprintf_r+0x1d2>
 800ca64:	4b21      	ldr	r3, [pc, #132]	@ (800caec <_svfiprintf_r+0x1ec>)
 800ca66:	bb1b      	cbnz	r3, 800cab0 <_svfiprintf_r+0x1b0>
 800ca68:	9b03      	ldr	r3, [sp, #12]
 800ca6a:	3307      	adds	r3, #7
 800ca6c:	f023 0307 	bic.w	r3, r3, #7
 800ca70:	3308      	adds	r3, #8
 800ca72:	9303      	str	r3, [sp, #12]
 800ca74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca76:	4433      	add	r3, r6
 800ca78:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca7a:	e76a      	b.n	800c952 <_svfiprintf_r+0x52>
 800ca7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca80:	460c      	mov	r4, r1
 800ca82:	2001      	movs	r0, #1
 800ca84:	e7a8      	b.n	800c9d8 <_svfiprintf_r+0xd8>
 800ca86:	2300      	movs	r3, #0
 800ca88:	3401      	adds	r4, #1
 800ca8a:	9305      	str	r3, [sp, #20]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	f04f 0c0a 	mov.w	ip, #10
 800ca92:	4620      	mov	r0, r4
 800ca94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca98:	3a30      	subs	r2, #48	@ 0x30
 800ca9a:	2a09      	cmp	r2, #9
 800ca9c:	d903      	bls.n	800caa6 <_svfiprintf_r+0x1a6>
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d0c6      	beq.n	800ca30 <_svfiprintf_r+0x130>
 800caa2:	9105      	str	r1, [sp, #20]
 800caa4:	e7c4      	b.n	800ca30 <_svfiprintf_r+0x130>
 800caa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800caaa:	4604      	mov	r4, r0
 800caac:	2301      	movs	r3, #1
 800caae:	e7f0      	b.n	800ca92 <_svfiprintf_r+0x192>
 800cab0:	ab03      	add	r3, sp, #12
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	462a      	mov	r2, r5
 800cab6:	4b0e      	ldr	r3, [pc, #56]	@ (800caf0 <_svfiprintf_r+0x1f0>)
 800cab8:	a904      	add	r1, sp, #16
 800caba:	4638      	mov	r0, r7
 800cabc:	f3af 8000 	nop.w
 800cac0:	1c42      	adds	r2, r0, #1
 800cac2:	4606      	mov	r6, r0
 800cac4:	d1d6      	bne.n	800ca74 <_svfiprintf_r+0x174>
 800cac6:	89ab      	ldrh	r3, [r5, #12]
 800cac8:	065b      	lsls	r3, r3, #25
 800caca:	f53f af2d 	bmi.w	800c928 <_svfiprintf_r+0x28>
 800cace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cad0:	e72c      	b.n	800c92c <_svfiprintf_r+0x2c>
 800cad2:	ab03      	add	r3, sp, #12
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	462a      	mov	r2, r5
 800cad8:	4b05      	ldr	r3, [pc, #20]	@ (800caf0 <_svfiprintf_r+0x1f0>)
 800cada:	a904      	add	r1, sp, #16
 800cadc:	4638      	mov	r0, r7
 800cade:	f000 f879 	bl	800cbd4 <_printf_i>
 800cae2:	e7ed      	b.n	800cac0 <_svfiprintf_r+0x1c0>
 800cae4:	0800cf98 	.word	0x0800cf98
 800cae8:	0800cfa2 	.word	0x0800cfa2
 800caec:	00000000 	.word	0x00000000
 800caf0:	0800c849 	.word	0x0800c849
 800caf4:	0800cf9e 	.word	0x0800cf9e

0800caf8 <_printf_common>:
 800caf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cafc:	4616      	mov	r6, r2
 800cafe:	4698      	mov	r8, r3
 800cb00:	688a      	ldr	r2, [r1, #8]
 800cb02:	690b      	ldr	r3, [r1, #16]
 800cb04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	bfb8      	it	lt
 800cb0c:	4613      	movlt	r3, r2
 800cb0e:	6033      	str	r3, [r6, #0]
 800cb10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb14:	4607      	mov	r7, r0
 800cb16:	460c      	mov	r4, r1
 800cb18:	b10a      	cbz	r2, 800cb1e <_printf_common+0x26>
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	6033      	str	r3, [r6, #0]
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	0699      	lsls	r1, r3, #26
 800cb22:	bf42      	ittt	mi
 800cb24:	6833      	ldrmi	r3, [r6, #0]
 800cb26:	3302      	addmi	r3, #2
 800cb28:	6033      	strmi	r3, [r6, #0]
 800cb2a:	6825      	ldr	r5, [r4, #0]
 800cb2c:	f015 0506 	ands.w	r5, r5, #6
 800cb30:	d106      	bne.n	800cb40 <_printf_common+0x48>
 800cb32:	f104 0a19 	add.w	sl, r4, #25
 800cb36:	68e3      	ldr	r3, [r4, #12]
 800cb38:	6832      	ldr	r2, [r6, #0]
 800cb3a:	1a9b      	subs	r3, r3, r2
 800cb3c:	42ab      	cmp	r3, r5
 800cb3e:	dc26      	bgt.n	800cb8e <_printf_common+0x96>
 800cb40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb44:	6822      	ldr	r2, [r4, #0]
 800cb46:	3b00      	subs	r3, #0
 800cb48:	bf18      	it	ne
 800cb4a:	2301      	movne	r3, #1
 800cb4c:	0692      	lsls	r2, r2, #26
 800cb4e:	d42b      	bmi.n	800cba8 <_printf_common+0xb0>
 800cb50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb54:	4641      	mov	r1, r8
 800cb56:	4638      	mov	r0, r7
 800cb58:	47c8      	blx	r9
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	d01e      	beq.n	800cb9c <_printf_common+0xa4>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	6922      	ldr	r2, [r4, #16]
 800cb62:	f003 0306 	and.w	r3, r3, #6
 800cb66:	2b04      	cmp	r3, #4
 800cb68:	bf02      	ittt	eq
 800cb6a:	68e5      	ldreq	r5, [r4, #12]
 800cb6c:	6833      	ldreq	r3, [r6, #0]
 800cb6e:	1aed      	subeq	r5, r5, r3
 800cb70:	68a3      	ldr	r3, [r4, #8]
 800cb72:	bf0c      	ite	eq
 800cb74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb78:	2500      	movne	r5, #0
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	bfc4      	itt	gt
 800cb7e:	1a9b      	subgt	r3, r3, r2
 800cb80:	18ed      	addgt	r5, r5, r3
 800cb82:	2600      	movs	r6, #0
 800cb84:	341a      	adds	r4, #26
 800cb86:	42b5      	cmp	r5, r6
 800cb88:	d11a      	bne.n	800cbc0 <_printf_common+0xc8>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e008      	b.n	800cba0 <_printf_common+0xa8>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	4652      	mov	r2, sl
 800cb92:	4641      	mov	r1, r8
 800cb94:	4638      	mov	r0, r7
 800cb96:	47c8      	blx	r9
 800cb98:	3001      	adds	r0, #1
 800cb9a:	d103      	bne.n	800cba4 <_printf_common+0xac>
 800cb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba4:	3501      	adds	r5, #1
 800cba6:	e7c6      	b.n	800cb36 <_printf_common+0x3e>
 800cba8:	18e1      	adds	r1, r4, r3
 800cbaa:	1c5a      	adds	r2, r3, #1
 800cbac:	2030      	movs	r0, #48	@ 0x30
 800cbae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbb2:	4422      	add	r2, r4
 800cbb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbbc:	3302      	adds	r3, #2
 800cbbe:	e7c7      	b.n	800cb50 <_printf_common+0x58>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	4641      	mov	r1, r8
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	47c8      	blx	r9
 800cbca:	3001      	adds	r0, #1
 800cbcc:	d0e6      	beq.n	800cb9c <_printf_common+0xa4>
 800cbce:	3601      	adds	r6, #1
 800cbd0:	e7d9      	b.n	800cb86 <_printf_common+0x8e>
	...

0800cbd4 <_printf_i>:
 800cbd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd8:	7e0f      	ldrb	r7, [r1, #24]
 800cbda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbdc:	2f78      	cmp	r7, #120	@ 0x78
 800cbde:	4691      	mov	r9, r2
 800cbe0:	4680      	mov	r8, r0
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	469a      	mov	sl, r3
 800cbe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbea:	d807      	bhi.n	800cbfc <_printf_i+0x28>
 800cbec:	2f62      	cmp	r7, #98	@ 0x62
 800cbee:	d80a      	bhi.n	800cc06 <_printf_i+0x32>
 800cbf0:	2f00      	cmp	r7, #0
 800cbf2:	f000 80d2 	beq.w	800cd9a <_printf_i+0x1c6>
 800cbf6:	2f58      	cmp	r7, #88	@ 0x58
 800cbf8:	f000 80b9 	beq.w	800cd6e <_printf_i+0x19a>
 800cbfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc04:	e03a      	b.n	800cc7c <_printf_i+0xa8>
 800cc06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc0a:	2b15      	cmp	r3, #21
 800cc0c:	d8f6      	bhi.n	800cbfc <_printf_i+0x28>
 800cc0e:	a101      	add	r1, pc, #4	@ (adr r1, 800cc14 <_printf_i+0x40>)
 800cc10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc14:	0800cc6d 	.word	0x0800cc6d
 800cc18:	0800cc81 	.word	0x0800cc81
 800cc1c:	0800cbfd 	.word	0x0800cbfd
 800cc20:	0800cbfd 	.word	0x0800cbfd
 800cc24:	0800cbfd 	.word	0x0800cbfd
 800cc28:	0800cbfd 	.word	0x0800cbfd
 800cc2c:	0800cc81 	.word	0x0800cc81
 800cc30:	0800cbfd 	.word	0x0800cbfd
 800cc34:	0800cbfd 	.word	0x0800cbfd
 800cc38:	0800cbfd 	.word	0x0800cbfd
 800cc3c:	0800cbfd 	.word	0x0800cbfd
 800cc40:	0800cd81 	.word	0x0800cd81
 800cc44:	0800ccab 	.word	0x0800ccab
 800cc48:	0800cd3b 	.word	0x0800cd3b
 800cc4c:	0800cbfd 	.word	0x0800cbfd
 800cc50:	0800cbfd 	.word	0x0800cbfd
 800cc54:	0800cda3 	.word	0x0800cda3
 800cc58:	0800cbfd 	.word	0x0800cbfd
 800cc5c:	0800ccab 	.word	0x0800ccab
 800cc60:	0800cbfd 	.word	0x0800cbfd
 800cc64:	0800cbfd 	.word	0x0800cbfd
 800cc68:	0800cd43 	.word	0x0800cd43
 800cc6c:	6833      	ldr	r3, [r6, #0]
 800cc6e:	1d1a      	adds	r2, r3, #4
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6032      	str	r2, [r6, #0]
 800cc74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e09d      	b.n	800cdbc <_printf_i+0x1e8>
 800cc80:	6833      	ldr	r3, [r6, #0]
 800cc82:	6820      	ldr	r0, [r4, #0]
 800cc84:	1d19      	adds	r1, r3, #4
 800cc86:	6031      	str	r1, [r6, #0]
 800cc88:	0606      	lsls	r6, r0, #24
 800cc8a:	d501      	bpl.n	800cc90 <_printf_i+0xbc>
 800cc8c:	681d      	ldr	r5, [r3, #0]
 800cc8e:	e003      	b.n	800cc98 <_printf_i+0xc4>
 800cc90:	0645      	lsls	r5, r0, #25
 800cc92:	d5fb      	bpl.n	800cc8c <_printf_i+0xb8>
 800cc94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc98:	2d00      	cmp	r5, #0
 800cc9a:	da03      	bge.n	800cca4 <_printf_i+0xd0>
 800cc9c:	232d      	movs	r3, #45	@ 0x2d
 800cc9e:	426d      	negs	r5, r5
 800cca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cca4:	4859      	ldr	r0, [pc, #356]	@ (800ce0c <_printf_i+0x238>)
 800cca6:	230a      	movs	r3, #10
 800cca8:	e011      	b.n	800ccce <_printf_i+0xfa>
 800ccaa:	6821      	ldr	r1, [r4, #0]
 800ccac:	6833      	ldr	r3, [r6, #0]
 800ccae:	0608      	lsls	r0, r1, #24
 800ccb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ccb4:	d402      	bmi.n	800ccbc <_printf_i+0xe8>
 800ccb6:	0649      	lsls	r1, r1, #25
 800ccb8:	bf48      	it	mi
 800ccba:	b2ad      	uxthmi	r5, r5
 800ccbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccbe:	4853      	ldr	r0, [pc, #332]	@ (800ce0c <_printf_i+0x238>)
 800ccc0:	6033      	str	r3, [r6, #0]
 800ccc2:	bf14      	ite	ne
 800ccc4:	230a      	movne	r3, #10
 800ccc6:	2308      	moveq	r3, #8
 800ccc8:	2100      	movs	r1, #0
 800ccca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccce:	6866      	ldr	r6, [r4, #4]
 800ccd0:	60a6      	str	r6, [r4, #8]
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	bfa2      	ittt	ge
 800ccd6:	6821      	ldrge	r1, [r4, #0]
 800ccd8:	f021 0104 	bicge.w	r1, r1, #4
 800ccdc:	6021      	strge	r1, [r4, #0]
 800ccde:	b90d      	cbnz	r5, 800cce4 <_printf_i+0x110>
 800cce0:	2e00      	cmp	r6, #0
 800cce2:	d04b      	beq.n	800cd7c <_printf_i+0x1a8>
 800cce4:	4616      	mov	r6, r2
 800cce6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccea:	fb03 5711 	mls	r7, r3, r1, r5
 800ccee:	5dc7      	ldrb	r7, [r0, r7]
 800ccf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccf4:	462f      	mov	r7, r5
 800ccf6:	42bb      	cmp	r3, r7
 800ccf8:	460d      	mov	r5, r1
 800ccfa:	d9f4      	bls.n	800cce6 <_printf_i+0x112>
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	d10b      	bne.n	800cd18 <_printf_i+0x144>
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	07df      	lsls	r7, r3, #31
 800cd04:	d508      	bpl.n	800cd18 <_printf_i+0x144>
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	6861      	ldr	r1, [r4, #4]
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	bfde      	ittt	le
 800cd0e:	2330      	movle	r3, #48	@ 0x30
 800cd10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd18:	1b92      	subs	r2, r2, r6
 800cd1a:	6122      	str	r2, [r4, #16]
 800cd1c:	f8cd a000 	str.w	sl, [sp]
 800cd20:	464b      	mov	r3, r9
 800cd22:	aa03      	add	r2, sp, #12
 800cd24:	4621      	mov	r1, r4
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7ff fee6 	bl	800caf8 <_printf_common>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	d14a      	bne.n	800cdc6 <_printf_i+0x1f2>
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295
 800cd34:	b004      	add	sp, #16
 800cd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	f043 0320 	orr.w	r3, r3, #32
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	4833      	ldr	r0, [pc, #204]	@ (800ce10 <_printf_i+0x23c>)
 800cd44:	2778      	movs	r7, #120	@ 0x78
 800cd46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	6831      	ldr	r1, [r6, #0]
 800cd4e:	061f      	lsls	r7, r3, #24
 800cd50:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd54:	d402      	bmi.n	800cd5c <_printf_i+0x188>
 800cd56:	065f      	lsls	r7, r3, #25
 800cd58:	bf48      	it	mi
 800cd5a:	b2ad      	uxthmi	r5, r5
 800cd5c:	6031      	str	r1, [r6, #0]
 800cd5e:	07d9      	lsls	r1, r3, #31
 800cd60:	bf44      	itt	mi
 800cd62:	f043 0320 	orrmi.w	r3, r3, #32
 800cd66:	6023      	strmi	r3, [r4, #0]
 800cd68:	b11d      	cbz	r5, 800cd72 <_printf_i+0x19e>
 800cd6a:	2310      	movs	r3, #16
 800cd6c:	e7ac      	b.n	800ccc8 <_printf_i+0xf4>
 800cd6e:	4827      	ldr	r0, [pc, #156]	@ (800ce0c <_printf_i+0x238>)
 800cd70:	e7e9      	b.n	800cd46 <_printf_i+0x172>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	f023 0320 	bic.w	r3, r3, #32
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	e7f6      	b.n	800cd6a <_printf_i+0x196>
 800cd7c:	4616      	mov	r6, r2
 800cd7e:	e7bd      	b.n	800ccfc <_printf_i+0x128>
 800cd80:	6833      	ldr	r3, [r6, #0]
 800cd82:	6825      	ldr	r5, [r4, #0]
 800cd84:	6961      	ldr	r1, [r4, #20]
 800cd86:	1d18      	adds	r0, r3, #4
 800cd88:	6030      	str	r0, [r6, #0]
 800cd8a:	062e      	lsls	r6, r5, #24
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	d501      	bpl.n	800cd94 <_printf_i+0x1c0>
 800cd90:	6019      	str	r1, [r3, #0]
 800cd92:	e002      	b.n	800cd9a <_printf_i+0x1c6>
 800cd94:	0668      	lsls	r0, r5, #25
 800cd96:	d5fb      	bpl.n	800cd90 <_printf_i+0x1bc>
 800cd98:	8019      	strh	r1, [r3, #0]
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	6123      	str	r3, [r4, #16]
 800cd9e:	4616      	mov	r6, r2
 800cda0:	e7bc      	b.n	800cd1c <_printf_i+0x148>
 800cda2:	6833      	ldr	r3, [r6, #0]
 800cda4:	1d1a      	adds	r2, r3, #4
 800cda6:	6032      	str	r2, [r6, #0]
 800cda8:	681e      	ldr	r6, [r3, #0]
 800cdaa:	6862      	ldr	r2, [r4, #4]
 800cdac:	2100      	movs	r1, #0
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7f3 fab6 	bl	8000320 <memchr>
 800cdb4:	b108      	cbz	r0, 800cdba <_printf_i+0x1e6>
 800cdb6:	1b80      	subs	r0, r0, r6
 800cdb8:	6060      	str	r0, [r4, #4]
 800cdba:	6863      	ldr	r3, [r4, #4]
 800cdbc:	6123      	str	r3, [r4, #16]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdc4:	e7aa      	b.n	800cd1c <_printf_i+0x148>
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	4632      	mov	r2, r6
 800cdca:	4649      	mov	r1, r9
 800cdcc:	4640      	mov	r0, r8
 800cdce:	47d0      	blx	sl
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d0ad      	beq.n	800cd30 <_printf_i+0x15c>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	079b      	lsls	r3, r3, #30
 800cdd8:	d413      	bmi.n	800ce02 <_printf_i+0x22e>
 800cdda:	68e0      	ldr	r0, [r4, #12]
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	4298      	cmp	r0, r3
 800cde0:	bfb8      	it	lt
 800cde2:	4618      	movlt	r0, r3
 800cde4:	e7a6      	b.n	800cd34 <_printf_i+0x160>
 800cde6:	2301      	movs	r3, #1
 800cde8:	4632      	mov	r2, r6
 800cdea:	4649      	mov	r1, r9
 800cdec:	4640      	mov	r0, r8
 800cdee:	47d0      	blx	sl
 800cdf0:	3001      	adds	r0, #1
 800cdf2:	d09d      	beq.n	800cd30 <_printf_i+0x15c>
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	68e3      	ldr	r3, [r4, #12]
 800cdf8:	9903      	ldr	r1, [sp, #12]
 800cdfa:	1a5b      	subs	r3, r3, r1
 800cdfc:	42ab      	cmp	r3, r5
 800cdfe:	dcf2      	bgt.n	800cde6 <_printf_i+0x212>
 800ce00:	e7eb      	b.n	800cdda <_printf_i+0x206>
 800ce02:	2500      	movs	r5, #0
 800ce04:	f104 0619 	add.w	r6, r4, #25
 800ce08:	e7f5      	b.n	800cdf6 <_printf_i+0x222>
 800ce0a:	bf00      	nop
 800ce0c:	0800cfa9 	.word	0x0800cfa9
 800ce10:	0800cfba 	.word	0x0800cfba

0800ce14 <memmove>:
 800ce14:	4288      	cmp	r0, r1
 800ce16:	b510      	push	{r4, lr}
 800ce18:	eb01 0402 	add.w	r4, r1, r2
 800ce1c:	d902      	bls.n	800ce24 <memmove+0x10>
 800ce1e:	4284      	cmp	r4, r0
 800ce20:	4623      	mov	r3, r4
 800ce22:	d807      	bhi.n	800ce34 <memmove+0x20>
 800ce24:	1e43      	subs	r3, r0, #1
 800ce26:	42a1      	cmp	r1, r4
 800ce28:	d008      	beq.n	800ce3c <memmove+0x28>
 800ce2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce32:	e7f8      	b.n	800ce26 <memmove+0x12>
 800ce34:	4402      	add	r2, r0
 800ce36:	4601      	mov	r1, r0
 800ce38:	428a      	cmp	r2, r1
 800ce3a:	d100      	bne.n	800ce3e <memmove+0x2a>
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce46:	e7f7      	b.n	800ce38 <memmove+0x24>

0800ce48 <memcpy>:
 800ce48:	440a      	add	r2, r1
 800ce4a:	4291      	cmp	r1, r2
 800ce4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce50:	d100      	bne.n	800ce54 <memcpy+0xc>
 800ce52:	4770      	bx	lr
 800ce54:	b510      	push	{r4, lr}
 800ce56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce5e:	4291      	cmp	r1, r2
 800ce60:	d1f9      	bne.n	800ce56 <memcpy+0xe>
 800ce62:	bd10      	pop	{r4, pc}

0800ce64 <_realloc_r>:
 800ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	4680      	mov	r8, r0
 800ce6a:	4615      	mov	r5, r2
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	b921      	cbnz	r1, 800ce7a <_realloc_r+0x16>
 800ce70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce74:	4611      	mov	r1, r2
 800ce76:	f7ff bb99 	b.w	800c5ac <_malloc_r>
 800ce7a:	b92a      	cbnz	r2, 800ce88 <_realloc_r+0x24>
 800ce7c:	f7ff fc9a 	bl	800c7b4 <_free_r>
 800ce80:	2400      	movs	r4, #0
 800ce82:	4620      	mov	r0, r4
 800ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce88:	f000 f81a 	bl	800cec0 <_malloc_usable_size_r>
 800ce8c:	4285      	cmp	r5, r0
 800ce8e:	4606      	mov	r6, r0
 800ce90:	d802      	bhi.n	800ce98 <_realloc_r+0x34>
 800ce92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce96:	d8f4      	bhi.n	800ce82 <_realloc_r+0x1e>
 800ce98:	4629      	mov	r1, r5
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	f7ff fb86 	bl	800c5ac <_malloc_r>
 800cea0:	4607      	mov	r7, r0
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d0ec      	beq.n	800ce80 <_realloc_r+0x1c>
 800cea6:	42b5      	cmp	r5, r6
 800cea8:	462a      	mov	r2, r5
 800ceaa:	4621      	mov	r1, r4
 800ceac:	bf28      	it	cs
 800ceae:	4632      	movcs	r2, r6
 800ceb0:	f7ff ffca 	bl	800ce48 <memcpy>
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	f7ff fc7c 	bl	800c7b4 <_free_r>
 800cebc:	463c      	mov	r4, r7
 800cebe:	e7e0      	b.n	800ce82 <_realloc_r+0x1e>

0800cec0 <_malloc_usable_size_r>:
 800cec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec4:	1f18      	subs	r0, r3, #4
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	bfbc      	itt	lt
 800ceca:	580b      	ldrlt	r3, [r1, r0]
 800cecc:	18c0      	addlt	r0, r0, r3
 800cece:	4770      	bx	lr

0800ced0 <_init>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr

0800cedc <_fini>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	bf00      	nop
 800cee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cee2:	bc08      	pop	{r3}
 800cee4:	469e      	mov	lr, r3
 800cee6:	4770      	bx	lr
